
Spotlight_solar_v1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010704  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08010844  08010844  00020844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010d60  08010d60  00020d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010d64  08010d64  00020d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  20000004  08010d68  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  200001d0  08010f34  000301d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000026c  08010fcd  0003026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000063a8  20000280  08010fde  00030280  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20006628  08010fde  00036628  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   00053195  00000000  00000000  000302ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00009546  00000000  00000000  00083442  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00003630  00000000  00000000  0008c988  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003228  00000000  00000000  0008ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00034ff5  00000000  00000000  000931e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003639d  00000000  00000000  000c81d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00108313  00000000  00000000  000fe572  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00206885  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000dd98  00000000  00000000  00206900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000280 	.word	0x20000280
 800015c:	00000000 	.word	0x00000000
 8000160:	0801082c 	.word	0x0801082c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000284 	.word	0x20000284
 800017c:	0801082c 	.word	0x0801082c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800019c:	4b07      	ldr	r3, [pc, #28]	; (80001bc <LL_C2_PWR_SetPowerMode+0x28>)
 800019e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001a2:	f023 0207 	bic.w	r2, r3, #7
 80001a6:	4905      	ldr	r1, [pc, #20]	; (80001bc <LL_C2_PWR_SetPowerMode+0x28>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4313      	orrs	r3, r2
 80001ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ba:	4770      	bx	lr
 80001bc:	58000400 	.word	0x58000400

080001c0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001cc:	689b      	ldr	r3, [r3, #8]
 80001ce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80001d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	608b      	str	r3, [r1, #8]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr

080001e8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80001ec:	f000 f80a 	bl	8000204 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80001f0:	4903      	ldr	r1, [pc, #12]	; (8000200 <APPE_Init+0x18>)
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fdce 	bl	8000d94 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80001f8:	f000 f812 	bl	8000220 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80001fc:	bf00      	nop
}
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	20004dd0 	.word	0x20004dd0

08000204 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000208:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800020c:	f7ff ffd8 	bl	80001c0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000210:	f010 fa94 	bl	801073c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000214:	2004      	movs	r0, #4
 8000216:	f7ff ffbd 	bl	8000194 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800021a:	bf00      	nop
}
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000226:	f009 f8b5 	bl	8009394 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 800022a:	2000      	movs	r0, #0
 800022c:	f00a ff5e 	bl	800b0ec <osMutexNew>
 8000230:	4602      	mov	r2, r0
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <appe_Tl_Init+0x70>)
 8000234:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000236:	2200      	movs	r2, #0
 8000238:	2100      	movs	r1, #0
 800023a:	2001      	movs	r0, #1
 800023c:	f00b f89e 	bl	800b37c <osSemaphoreNew>
 8000240:	4602      	mov	r2, r0
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <appe_Tl_Init+0x74>)
 8000244:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000246:	4a14      	ldr	r2, [pc, #80]	; (8000298 <appe_Tl_Init+0x78>)
 8000248:	2100      	movs	r1, #0
 800024a:	4814      	ldr	r0, [pc, #80]	; (800029c <appe_Tl_Init+0x7c>)
 800024c:	f00a fd84 	bl	800ad58 <osThreadNew>
 8000250:	4602      	mov	r2, r0
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <appe_Tl_Init+0x80>)
 8000254:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <appe_Tl_Init+0x84>)
 8000258:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <appe_Tl_Init+0x88>)
 800025c:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800025e:	463b      	mov	r3, r7
 8000260:	4619      	mov	r1, r3
 8000262:	4812      	ldr	r0, [pc, #72]	; (80002ac <appe_Tl_Init+0x8c>)
 8000264:	f008 ff5c 	bl	8009120 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <appe_Tl_Init+0x90>)
 800026e:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <appe_Tl_Init+0x94>)
 8000272:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000274:	f240 533c 	movw	r3, #1340	; 0x53c
 8000278:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	4618      	mov	r0, r3
 8000280:	f009 f9f2 	bl	8009668 <TL_MM_Init>

  TL_Enable();
 8000284:	f009 f880 	bl	8009388 <TL_Enable>

  return;
 8000288:	bf00      	nop
}
 800028a:	3720      	adds	r7, #32
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20004d78 	.word	0x20004d78
 8000294:	20004d80 	.word	0x20004d80
 8000298:	08010c0c 	.word	0x08010c0c
 800029c:	080003a1 	.word	0x080003a1
 80002a0:	20004d7c 	.word	0x20004d7c
 80002a4:	2003061c 	.word	0x2003061c
 80002a8:	080002b9 	.word	0x080002b9
 80002ac:	080002f9 	.word	0x080002f9
 80002b0:	20030728 	.word	0x20030728
 80002b4:	200300e0 	.word	0x200300e0

080002b8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d002      	beq.n	80002ce <APPE_SysStatusNot+0x16>
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d008      	beq.n	80002de <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80002cc:	e00d      	b.n	80002ea <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <APPE_SysStatusNot+0x3c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f04f 31ff 	mov.w	r1, #4294967295
 80002d6:	4618      	mov	r0, r3
 80002d8:	f00a ffa2 	bl	800b220 <osMutexAcquire>
      break;
 80002dc:	e005      	b.n	80002ea <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <APPE_SysStatusNot+0x3c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f00a fffa 	bl	800b2dc <osMutexRelease>
      break;
 80002e8:	bf00      	nop
  }
  return;
 80002ea:	bf00      	nop
}
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20004d78 	.word	0x20004d78

080002f8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	330b      	adds	r3, #11
 8000306:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	b29b      	uxth	r3, r3
 800030e:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000312:	d004      	beq.n	800031e <APPE_SysUserEvtRx+0x26>
 8000314:	f249 2201 	movw	r2, #37377	; 0x9201
 8000318:	4293      	cmp	r3, r2
 800031a:	d003      	beq.n	8000324 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 800031c:	e008      	b.n	8000330 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 800031e:	f000 f833 	bl	8000388 <APPE_SysEvtReadyProcessing>
         break;
 8000322:	e005      	b.n	8000330 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	789b      	ldrb	r3, [r3, #2]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f805 	bl	8000338 <APPE_SysEvtError>
         break;
 800032e:	bf00      	nop
  }
  return;
 8000330:	bf00      	nop
}
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b7d      	cmp	r3, #125	; 0x7d
 8000346:	d002      	beq.n	800034e <APPE_SysEvtError+0x16>
 8000348:	2b7e      	cmp	r3, #126	; 0x7e
 800034a:	d006      	beq.n	800035a <APPE_SysEvtError+0x22>
 800034c:	e00b      	b.n	8000366 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 800034e:	4a0b      	ldr	r2, [pc, #44]	; (800037c <APPE_SysEvtError+0x44>)
 8000350:	2101      	movs	r1, #1
 8000352:	2000      	movs	r0, #0
 8000354:	f001 fcd2 	bl	8001cfc <logApplication>
       break;
 8000358:	e00c      	b.n	8000374 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 800035a:	4a09      	ldr	r2, [pc, #36]	; (8000380 <APPE_SysEvtError+0x48>)
 800035c:	2101      	movs	r1, #1
 800035e:	2000      	movs	r0, #0
 8000360:	f001 fccc 	bl	8001cfc <logApplication>
       break;
 8000364:	e006      	b.n	8000374 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4a06      	ldr	r2, [pc, #24]	; (8000384 <APPE_SysEvtError+0x4c>)
 800036a:	2101      	movs	r1, #1
 800036c:	2000      	movs	r0, #0
 800036e:	f001 fcc5 	bl	8001cfc <logApplication>
       break;
 8000372:	bf00      	nop
  }
  return;
 8000374:	bf00      	nop
}
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	0801085c 	.word	0x0801085c
 8000380:	08010880 	.word	0x08010880
 8000384:	080108a0 	.word	0x080108a0

08000388 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 800038c:	f009 f9e0 	bl	8009750 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000390:	f00e fc74 	bl	800ec7c <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000394:	2100      	movs	r1, #0
 8000396:	2001      	movs	r0, #1
 8000398:	f010 f9e2 	bl	8010760 <UTIL_LPM_SetOffMode>
  return;
 800039c:	bf00      	nop
}
 800039e:	bd80      	pop	{r7, pc}

080003a0 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80003a8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ac:	2100      	movs	r1, #0
 80003ae:	2001      	movs	r0, #1
 80003b0:	f00a fdda 	bl	800af68 <osThreadFlagsWait>
     shci_user_evt_proc();
 80003b4:	f008 fed0 	bl	8009158 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80003b8:	e7f6      	b.n	80003a8 <ShciUserEvtProcess+0x8>
	...

080003bc <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <shci_notify_asynch_evt+0x1c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2101      	movs	r1, #1
 80003ca:	4618      	mov	r0, r3
 80003cc:	f00a fd6a 	bl	800aea4 <osThreadFlagsSet>
  return;
 80003d0:	bf00      	nop
}
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20004d7c 	.word	0x20004d7c

080003dc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <shci_cmd_resp_release+0x1c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f00b f8cb 	bl	800b584 <osSemaphoreRelease>
  return;
 80003ee:	bf00      	nop
}
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20004d80 	.word	0x20004d80

080003fc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <shci_cmd_resp_wait+0x20>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f04f 31ff 	mov.w	r1, #4294967295
 800040c:	4618      	mov	r0, r3
 800040e:	f00b f853 	bl	800b4b8 <osSemaphoreAcquire>
  return;
 8000412:	bf00      	nop
}
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20004d80 	.word	0x20004d80

08000420 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f009 f959 	bl	80096e0 <TL_MM_EvtDone>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800043c:	4a05      	ldr	r2, [pc, #20]	; (8000454 <_Z16MX_FREERTOS_Initv+0x1c>)
 800043e:	2100      	movs	r1, #0
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <_Z16MX_FREERTOS_Initv+0x20>)
 8000442:	f00a fc89 	bl	800ad58 <osThreadNew>
 8000446:	4602      	mov	r2, r0
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <_Z16MX_FREERTOS_Initv+0x24>)
 800044a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  APPE_Init();
 800044c:	f7ff fecc 	bl	80001e8 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	08010c30 	.word	0x08010c30
 8000458:	08000461 	.word	0x08000461
 800045c:	2000029c 	.word	0x2000029c

08000460 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	osDelay(100);
 8000468:	2064      	movs	r0, #100	; 0x64
 800046a:	f00a fe11 	bl	800b090 <osDelay>
	myMain();
 800046e:	f001 f974 	bl	800175a <_Z6myMainv>
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8000472:	f04f 32ff 	mov.w	r2, #4294967295
 8000476:	2101      	movs	r1, #1
 8000478:	2001      	movs	r0, #1
 800047a:	f00a fd75 	bl	800af68 <osThreadFlagsWait>
 800047e:	e7f8      	b.n	8000472 <_Z16StartDefaultTaskPv+0x12>

08000480 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800049c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4013      	ands	r3, r2
 80004b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b8:	68fb      	ldr	r3, [r7, #12]
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004dc:	2004      	movs	r0, #4
 80004de:	f7ff ffd9 	bl	8000494 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	2001      	movs	r0, #1
 80004e4:	f7ff ffd6 	bl	8000494 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e8:	2002      	movs	r0, #2
 80004ea:	f7ff ffd3 	bl	8000494 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2110      	movs	r1, #16
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f6:	f001 ffff 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2103      	movs	r1, #3
 80004fe:	4811      	ldr	r0, [pc, #68]	; (8000544 <MX_GPIO_Init+0x7c>)
 8000500:	f001 fffa 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000504:	2310      	movs	r3, #16
 8000506:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	4619      	mov	r1, r3
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f001 fe7c 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000520:	2303      	movs	r3, #3
 8000522:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	2301      	movs	r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4619      	mov	r1, r3
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <MX_GPIO_Init+0x7c>)
 8000536:	f001 fe6f 	bl	8002218 <HAL_GPIO_Init>

}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	48000400 	.word	0x48000400

08000548 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <LL_EXTI_EnableIT_0_31+0x24>)
 8000552:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000556:	4905      	ldr	r1, [pc, #20]	; (800056c <LL_EXTI_EnableIT_0_31+0x24>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	58000800 	.word	0x58000800

08000570 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4904      	ldr	r1, [pc, #16]	; (8000590 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4313      	orrs	r3, r2
 8000582:	600b      	str	r3, [r1, #0]

}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	58000800 	.word	0x58000800

08000594 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <ReadRtcSsrValue+0x3c>)
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800059e:	b29b      	uxth	r3, r3
 80005a0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <ReadRtcSsrValue+0x3c>)
 80005a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80005aa:	e005      	b.n	80005b8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <ReadRtcSsrValue+0x3c>)
 80005b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d1f5      	bne.n	80005ac <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80005c0:	683b      	ldr	r3, [r7, #0]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40002800 	.word	0x40002800

080005d4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	460a      	mov	r2, r1
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	4613      	mov	r3, r2
 80005e2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80005e4:	79ba      	ldrb	r2, [r7, #6]
 80005e6:	491d      	ldr	r1, [pc, #116]	; (800065c <LinkTimerAfter+0x88>)
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	440b      	add	r3, r1
 80005f2:	3315      	adds	r3, #21
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d009      	beq.n	8000612 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80005fe:	7bfa      	ldrb	r2, [r7, #15]
 8000600:	4916      	ldr	r1, [pc, #88]	; (800065c <LinkTimerAfter+0x88>)
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	440b      	add	r3, r1
 800060c:	3314      	adds	r3, #20
 800060e:	79fa      	ldrb	r2, [r7, #7]
 8000610:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	4911      	ldr	r1, [pc, #68]	; (800065c <LinkTimerAfter+0x88>)
 8000616:	4613      	mov	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4413      	add	r3, r2
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	440b      	add	r3, r1
 8000620:	3315      	adds	r3, #21
 8000622:	7bfa      	ldrb	r2, [r7, #15]
 8000624:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	490c      	ldr	r1, [pc, #48]	; (800065c <LinkTimerAfter+0x88>)
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	440b      	add	r3, r1
 8000634:	3314      	adds	r3, #20
 8000636:	79ba      	ldrb	r2, [r7, #6]
 8000638:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800063a:	79ba      	ldrb	r2, [r7, #6]
 800063c:	4907      	ldr	r1, [pc, #28]	; (800065c <LinkTimerAfter+0x88>)
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	440b      	add	r3, r1
 8000648:	3315      	adds	r3, #21
 800064a:	79fa      	ldrb	r2, [r7, #7]
 800064c:	701a      	strb	r2, [r3, #0]

  return;
 800064e:	bf00      	nop
}
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200001d0 	.word	0x200001d0

08000660 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <LinkTimerBefore+0xb8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	79ba      	ldrb	r2, [r7, #6]
 8000678:	429a      	cmp	r2, r3
 800067a:	d032      	beq.n	80006e2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	4927      	ldr	r1, [pc, #156]	; (800071c <LinkTimerBefore+0xbc>)
 8000680:	4613      	mov	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	4413      	add	r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	440b      	add	r3, r1
 800068a:	3314      	adds	r3, #20
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000690:	7bfa      	ldrb	r2, [r7, #15]
 8000692:	4922      	ldr	r1, [pc, #136]	; (800071c <LinkTimerBefore+0xbc>)
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	440b      	add	r3, r1
 800069e:	3315      	adds	r3, #21
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80006a4:	79fa      	ldrb	r2, [r7, #7]
 80006a6:	491d      	ldr	r1, [pc, #116]	; (800071c <LinkTimerBefore+0xbc>)
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	440b      	add	r3, r1
 80006b2:	3315      	adds	r3, #21
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80006b8:	79fa      	ldrb	r2, [r7, #7]
 80006ba:	4918      	ldr	r1, [pc, #96]	; (800071c <LinkTimerBefore+0xbc>)
 80006bc:	4613      	mov	r3, r2
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4413      	add	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	440b      	add	r3, r1
 80006c6:	3314      	adds	r3, #20
 80006c8:	7bfa      	ldrb	r2, [r7, #15]
 80006ca:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80006cc:	79ba      	ldrb	r2, [r7, #6]
 80006ce:	4913      	ldr	r1, [pc, #76]	; (800071c <LinkTimerBefore+0xbc>)
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	440b      	add	r3, r1
 80006da:	3314      	adds	r3, #20
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80006e0:	e014      	b.n	800070c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80006e2:	79fa      	ldrb	r2, [r7, #7]
 80006e4:	490d      	ldr	r1, [pc, #52]	; (800071c <LinkTimerBefore+0xbc>)
 80006e6:	4613      	mov	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	440b      	add	r3, r1
 80006f0:	3315      	adds	r3, #21
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80006f6:	79ba      	ldrb	r2, [r7, #6]
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <LinkTimerBefore+0xbc>)
 80006fa:	4613      	mov	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4413      	add	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	440b      	add	r3, r1
 8000704:	3314      	adds	r3, #20
 8000706:	79fa      	ldrb	r2, [r7, #7]
 8000708:	701a      	strb	r2, [r3, #0]
  return;
 800070a:	bf00      	nop
}
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000260 	.word	0x20000260
 800071c:	200001d0 	.word	0x200001d0

08000720 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <linkTimer+0x144>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b06      	cmp	r3, #6
 8000732:	d118      	bne.n	8000766 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000734:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <linkTimer+0x144>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <linkTimer+0x148>)
 800073c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800073e:	4a49      	ldr	r2, [pc, #292]	; (8000864 <linkTimer+0x144>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000744:	79fa      	ldrb	r2, [r7, #7]
 8000746:	4949      	ldr	r1, [pc, #292]	; (800086c <linkTimer+0x14c>)
 8000748:	4613      	mov	r3, r2
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4413      	add	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	440b      	add	r3, r1
 8000752:	3315      	adds	r3, #21
 8000754:	2206      	movs	r2, #6
 8000756:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <linkTimer+0x150>)
 800075a:	f04f 32ff 	mov.w	r2, #4294967295
 800075e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	81fb      	strh	r3, [r7, #14]
 8000764:	e078      	b.n	8000858 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000766:	f000 f909 	bl	800097c <ReturnTimeElapsed>
 800076a:	4603      	mov	r3, r0
 800076c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	493e      	ldr	r1, [pc, #248]	; (800086c <linkTimer+0x14c>)
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	440b      	add	r3, r1
 800077c:	3308      	adds	r3, #8
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	89fb      	ldrh	r3, [r7, #14]
 8000782:	79fa      	ldrb	r2, [r7, #7]
 8000784:	4419      	add	r1, r3
 8000786:	4839      	ldr	r0, [pc, #228]	; (800086c <linkTimer+0x14c>)
 8000788:	4613      	mov	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	4413      	add	r3, r2
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	4403      	add	r3, r0
 8000792:	3308      	adds	r3, #8
 8000794:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000796:	79fa      	ldrb	r2, [r7, #7]
 8000798:	4934      	ldr	r1, [pc, #208]	; (800086c <linkTimer+0x14c>)
 800079a:	4613      	mov	r3, r2
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	4413      	add	r3, r2
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	440b      	add	r3, r1
 80007a4:	3308      	adds	r3, #8
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <linkTimer+0x144>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	4a2e      	ldr	r2, [pc, #184]	; (800086c <linkTimer+0x14c>)
 80007b4:	460b      	mov	r3, r1
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	440b      	add	r3, r1
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	4413      	add	r3, r2
 80007be:	3308      	adds	r3, #8
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d337      	bcc.n	8000838 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <linkTimer+0x144>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80007ce:	7b7a      	ldrb	r2, [r7, #13]
 80007d0:	4926      	ldr	r1, [pc, #152]	; (800086c <linkTimer+0x14c>)
 80007d2:	4613      	mov	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	440b      	add	r3, r1
 80007dc:	3315      	adds	r3, #21
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80007e2:	e013      	b.n	800080c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80007e4:	7b7a      	ldrb	r2, [r7, #13]
 80007e6:	4921      	ldr	r1, [pc, #132]	; (800086c <linkTimer+0x14c>)
 80007e8:	4613      	mov	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	440b      	add	r3, r1
 80007f2:	3315      	adds	r3, #21
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80007f8:	7b7a      	ldrb	r2, [r7, #13]
 80007fa:	491c      	ldr	r1, [pc, #112]	; (800086c <linkTimer+0x14c>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	440b      	add	r3, r1
 8000806:	3315      	adds	r3, #21
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800080c:	7b3b      	ldrb	r3, [r7, #12]
 800080e:	2b06      	cmp	r3, #6
 8000810:	d00b      	beq.n	800082a <linkTimer+0x10a>
 8000812:	7b3a      	ldrb	r2, [r7, #12]
 8000814:	4915      	ldr	r1, [pc, #84]	; (800086c <linkTimer+0x14c>)
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3308      	adds	r3, #8
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	429a      	cmp	r2, r3
 8000828:	d2dc      	bcs.n	80007e4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800082a:	7b7a      	ldrb	r2, [r7, #13]
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fecf 	bl	80005d4 <LinkTimerAfter>
 8000836:	e00f      	b.n	8000858 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <linkTimer+0x144>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff0c 	bl	8000660 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <linkTimer+0x144>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <linkTimer+0x148>)
 8000850:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <linkTimer+0x144>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000858:	89fb      	ldrh	r3, [r7, #14]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000260 	.word	0x20000260
 8000868:	20000261 	.word	0x20000261
 800086c:	200001d0 	.word	0x200001d0
 8000870:	20000264 	.word	0x20000264

08000874 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <UnlinkTimer+0xf8>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	429a      	cmp	r2, r3
 800088e:	d111      	bne.n	80008b4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000890:	4b36      	ldr	r3, [pc, #216]	; (800096c <UnlinkTimer+0xf8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b36      	ldr	r3, [pc, #216]	; (8000970 <UnlinkTimer+0xfc>)
 8000898:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	4935      	ldr	r1, [pc, #212]	; (8000974 <UnlinkTimer+0x100>)
 800089e:	4613      	mov	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	440b      	add	r3, r1
 80008a8:	3315      	adds	r3, #21
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <UnlinkTimer+0xf8>)
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	e03e      	b.n	8000932 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	492f      	ldr	r1, [pc, #188]	; (8000974 <UnlinkTimer+0x100>)
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	440b      	add	r3, r1
 80008c2:	3314      	adds	r3, #20
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80008c8:	79fa      	ldrb	r2, [r7, #7]
 80008ca:	492a      	ldr	r1, [pc, #168]	; (8000974 <UnlinkTimer+0x100>)
 80008cc:	4613      	mov	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	440b      	add	r3, r1
 80008d6:	3315      	adds	r3, #21
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80008dc:	79f9      	ldrb	r1, [r7, #7]
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	4824      	ldr	r0, [pc, #144]	; (8000974 <UnlinkTimer+0x100>)
 80008e2:	460b      	mov	r3, r1
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	440b      	add	r3, r1
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	4403      	add	r3, r0
 80008ec:	3315      	adds	r3, #21
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2d8      	uxtb	r0, r3
 80008f2:	4920      	ldr	r1, [pc, #128]	; (8000974 <UnlinkTimer+0x100>)
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	440b      	add	r3, r1
 80008fe:	3315      	adds	r3, #21
 8000900:	4602      	mov	r2, r0
 8000902:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	2b06      	cmp	r3, #6
 8000908:	d013      	beq.n	8000932 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800090a:	79f9      	ldrb	r1, [r7, #7]
 800090c:	7bba      	ldrb	r2, [r7, #14]
 800090e:	4819      	ldr	r0, [pc, #100]	; (8000974 <UnlinkTimer+0x100>)
 8000910:	460b      	mov	r3, r1
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	440b      	add	r3, r1
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	4403      	add	r3, r0
 800091a:	3314      	adds	r3, #20
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2d8      	uxtb	r0, r3
 8000920:	4914      	ldr	r1, [pc, #80]	; (8000974 <UnlinkTimer+0x100>)
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	440b      	add	r3, r1
 800092c:	3314      	adds	r3, #20
 800092e:	4602      	mov	r2, r0
 8000930:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	490f      	ldr	r1, [pc, #60]	; (8000974 <UnlinkTimer+0x100>)
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	440b      	add	r3, r1
 8000940:	330c      	adds	r3, #12
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <UnlinkTimer+0xf8>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b06      	cmp	r3, #6
 800094e:	d107      	bne.n	8000960 <UnlinkTimer+0xec>
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d104      	bne.n	8000960 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <UnlinkTimer+0x104>)
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	601a      	str	r2, [r3, #0]
  }

  return;
 800095e:	bf00      	nop
 8000960:	bf00      	nop
}
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	20000260 	.word	0x20000260
 8000970:	20000261 	.word	0x20000261
 8000974:	200001d0 	.word	0x200001d0
 8000978:	20000264 	.word	0x20000264

0800097c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <ReturnTimeElapsed+0x70>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098a:	d026      	beq.n	80009da <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800098c:	f7ff fe02 	bl	8000594 <ReadRtcSsrValue>
 8000990:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <ReturnTimeElapsed+0x70>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	d805      	bhi.n	80009a8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <ReturnTimeElapsed+0x70>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	e00a      	b.n	80009be <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <ReturnTimeElapsed+0x74>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <ReturnTimeElapsed+0x70>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <ReturnTimeElapsed+0x78>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	fb02 f303 	mul.w	r3, r2, r3
 80009ca:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <ReturnTimeElapsed+0x7c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	40d3      	lsrs	r3, r2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	e001      	b.n	80009de <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	b29b      	uxth	r3, r3
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000264 	.word	0x20000264
 80009f0:	200002a6 	.word	0x200002a6
 80009f4:	200002a5 	.word	0x200002a5
 80009f8:	200002a4 	.word	0x200002a4

080009fc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d108      	bne.n	8000a1e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a0c:	f7ff fdc2 	bl	8000594 <ReadRtcSsrValue>
 8000a10:	4602      	mov	r2, r0
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <RestartWakeupCounter+0xa8>)
 8000a14:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000a16:	2003      	movs	r0, #3
 8000a18:	f001 fbe1 	bl	80021de <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000a1c:	e03e      	b.n	8000a9c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d803      	bhi.n	8000a2c <RestartWakeupCounter+0x30>
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <RestartWakeupCounter+0xac>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d002      	beq.n	8000a32 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000a32:	bf00      	nop
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <RestartWakeupCounter+0xb0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0f7      	beq.n	8000a34 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <RestartWakeupCounter+0xb0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <RestartWakeupCounter+0xb0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000a58:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <RestartWakeupCounter+0xb4>)
 8000a5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a60:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000a62:	2003      	movs	r0, #3
 8000a64:	f001 fbc9 	bl	80021fa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <RestartWakeupCounter+0xb8>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	0c1b      	lsrs	r3, r3, #16
 8000a6e:	041b      	lsls	r3, r3, #16
 8000a70:	88fa      	ldrh	r2, [r7, #6]
 8000a72:	4910      	ldr	r1, [pc, #64]	; (8000ab4 <RestartWakeupCounter+0xb8>)
 8000a74:	4313      	orrs	r3, r2
 8000a76:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a78:	f7ff fd8c 	bl	8000594 <ReadRtcSsrValue>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <RestartWakeupCounter+0xa8>)
 8000a80:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <RestartWakeupCounter+0xb0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <RestartWakeupCounter+0xb0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a94:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000a96:	f3af 8000 	nop.w
  return ;
 8000a9a:	bf00      	nop
}
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000264 	.word	0x20000264
 8000aa8:	200002a4 	.word	0x200002a4
 8000aac:	200002a0 	.word	0x200002a0
 8000ab0:	58000800 	.word	0x58000800
 8000ab4:	40002800 	.word	0x40002800

08000ab8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000abe:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <RescheduleTimerList+0x124>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aca:	d108      	bne.n	8000ade <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000acc:	bf00      	nop
 8000ace:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <RescheduleTimerList+0x128>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f7      	bne.n	8000ace <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000ade:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <RescheduleTimerList+0x128>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	4b3e      	ldr	r3, [pc, #248]	; (8000be0 <RescheduleTimerList+0x128>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000af0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000af2:	4b3c      	ldr	r3, [pc, #240]	; (8000be4 <RescheduleTimerList+0x12c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000af8:	7bfa      	ldrb	r2, [r7, #15]
 8000afa:	493b      	ldr	r1, [pc, #236]	; (8000be8 <RescheduleTimerList+0x130>)
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	440b      	add	r3, r1
 8000b06:	3308      	adds	r3, #8
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000b0c:	f7ff ff36 	bl	800097c <ReturnTimeElapsed>
 8000b10:	4603      	mov	r3, r0
 8000b12:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d205      	bcs.n	8000b28 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b20:	4b32      	ldr	r3, [pc, #200]	; (8000bec <RescheduleTimerList+0x134>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e04d      	b.n	8000bc4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	4a31      	ldr	r2, [pc, #196]	; (8000bf0 <RescheduleTimerList+0x138>)
 8000b2c:	8812      	ldrh	r2, [r2, #0]
 8000b2e:	b292      	uxth	r2, r2
 8000b30:	4413      	add	r3, r2
 8000b32:	461a      	mov	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d906      	bls.n	8000b48 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <RescheduleTimerList+0x138>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000b40:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <RescheduleTimerList+0x134>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e03d      	b.n	8000bc4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <RescheduleTimerList+0x134>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b58:	e034      	b.n	8000bc4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	4922      	ldr	r1, [pc, #136]	; (8000be8 <RescheduleTimerList+0x130>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	440b      	add	r3, r1
 8000b68:	3308      	adds	r3, #8
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d20a      	bcs.n	8000b88 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	491c      	ldr	r1, [pc, #112]	; (8000be8 <RescheduleTimerList+0x130>)
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	440b      	add	r3, r1
 8000b80:	3308      	adds	r3, #8
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	e013      	b.n	8000bb0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	4917      	ldr	r1, [pc, #92]	; (8000be8 <RescheduleTimerList+0x130>)
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	440b      	add	r3, r1
 8000b96:	3308      	adds	r3, #8
 8000b98:	6819      	ldr	r1, [r3, #0]
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	7bfa      	ldrb	r2, [r7, #15]
 8000b9e:	1ac9      	subs	r1, r1, r3
 8000ba0:	4811      	ldr	r0, [pc, #68]	; (8000be8 <RescheduleTimerList+0x130>)
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4403      	add	r3, r0
 8000bac:	3308      	adds	r3, #8
 8000bae:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <RescheduleTimerList+0x130>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3315      	adds	r3, #21
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d1c7      	bne.n	8000b5a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000bca:	89bb      	ldrh	r3, [r7, #12]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff15 	bl	80009fc <RestartWakeupCounter>

  return ;
 8000bd2:	bf00      	nop
}
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40002800 	.word	0x40002800
 8000be0:	200002a0 	.word	0x200002a0
 8000be4:	20000260 	.word	0x20000260
 8000be8:	200001d0 	.word	0x200001d0
 8000bec:	20000268 	.word	0x20000268
 8000bf0:	200002a8 	.word	0x200002a8

08000bf4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8000bfe:	617b      	str	r3, [r7, #20]
  return(result);
 8000c00:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c06:	4b5e      	ldr	r3, [pc, #376]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	22ca      	movs	r2, #202	; 0xca
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c10:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2253      	movs	r2, #83	; 0x53
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000c1a:	4b59      	ldr	r3, [pc, #356]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	4b57      	ldr	r3, [pc, #348]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c2c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000c2e:	4b55      	ldr	r3, [pc, #340]	; (8000d84 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000c36:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c3a:	4953      	ldr	r1, [pc, #332]	; (8000d88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	330c      	adds	r3, #12
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d170      	bne.n	8000d32 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000c50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c54:	494c      	ldr	r1, [pc, #304]	; (8000d88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000c64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c68:	4947      	ldr	r1, [pc, #284]	; (8000d88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	3310      	adds	r3, #16
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000c7a:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d04e      	beq.n	8000d22 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000c84:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c88:	493f      	ldr	r1, [pc, #252]	; (8000d88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	330d      	adds	r3, #13
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d125      	bne.n	8000cea <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fde5 	bl	8000874 <UnlinkTimer>
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000cb4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cb8:	4933      	ldr	r1, [pc, #204]	; (8000d88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f9d0 	bl	8001074 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	22ca      	movs	r2, #202	; 0xca
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2253      	movs	r2, #83	; 0x53
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ce8:	e013      	b.n	8000d12 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f931 	bl	8000f60 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	22ca      	movs	r2, #202	; 0xca
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2253      	movs	r2, #83	; 0x53
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	69b8      	ldr	r0, [r7, #24]
 8000d1c:	f000 fa30 	bl	8001180 <HW_TS_RTC_Int_AppNot>
 8000d20:	e024      	b.n	8000d6c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000d22:	f7ff fec9 	bl	8000ab8 <RescheduleTimerList>
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	f383 8810 	msr	PRIMASK, r3
 8000d30:	e01c      	b.n	8000d6c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d32:	bf00      	nop
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f7      	beq.n	8000d34 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d58:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000d76:	bf00      	nop
}
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200002a0 	.word	0x200002a0
 8000d84:	20000260 	.word	0x20000260
 8000d88:	200001d0 	.word	0x200001d0
 8000d8c:	20000268 	.word	0x20000268
 8000d90:	58000800 	.word	0x58000800

08000d94 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000da0:	4a64      	ldr	r2, [pc, #400]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000da6:	4b63      	ldr	r3, [pc, #396]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	22ca      	movs	r2, #202	; 0xca
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
 8000db0:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2253      	movs	r2, #83	; 0x53
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000dba:	4b5f      	ldr	r3, [pc, #380]	; (8000f38 <HW_TS_Init+0x1a4>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	4a5e      	ldr	r2, [pc, #376]	; (8000f38 <HW_TS_Init+0x1a4>)
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000dc6:	4b5c      	ldr	r3, [pc, #368]	; (8000f38 <HW_TS_Init+0x1a4>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f1c3 0304 	rsb	r3, r3, #4
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HW_TS_Init+0x1a8>)
 8000dda:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000ddc:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <HW_TS_Init+0x1a4>)
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000de4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000de8:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	fa92 f2a2 	rbit	r2, r2
 8000df0:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	d101      	bne.n	8000e00 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	e003      	b.n	8000e08 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	40d3      	lsrs	r3, r2
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <HW_TS_Init+0x1ac>)
 8000e12:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000e14:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <HW_TS_Init+0x1a4>)
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	3301      	adds	r3, #1
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <HW_TS_Init+0x1b0>)
 8000e26:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000e28:	4b46      	ldr	r3, [pc, #280]	; (8000f44 <HW_TS_Init+0x1b0>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	4a44      	ldr	r2, [pc, #272]	; (8000f40 <HW_TS_Init+0x1ac>)
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	fb02 f303 	mul.w	r3, r2, r3
 8000e36:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000e3a:	4a40      	ldr	r2, [pc, #256]	; (8000f3c <HW_TS_Init+0x1a8>)
 8000e3c:	7812      	ldrb	r2, [r2, #0]
 8000e3e:	40d3      	lsrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d904      	bls.n	8000e56 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000e4c:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <HW_TS_Init+0x1b4>)
 8000e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e52:	801a      	strh	r2, [r3, #0]
 8000e54:	e003      	b.n	8000e5e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HW_TS_Init+0x1b4>)
 8000e5c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000e5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e62:	f7ff fb85 	bl	8000570 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000e66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e6a:	f7ff fb6d 	bl	8000548 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d143      	bne.n	8000efc <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <HW_TS_Init+0x1b8>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HW_TS_Init+0x1bc>)
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	77fb      	strb	r3, [r7, #31]
 8000e86:	e00c      	b.n	8000ea2 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000e88:	7ffa      	ldrb	r2, [r7, #31]
 8000e8a:	4932      	ldr	r1, [pc, #200]	; (8000f54 <HW_TS_Init+0x1c0>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	440b      	add	r3, r1
 8000e96:	330c      	adds	r3, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000e9c:	7ffb      	ldrb	r3, [r7, #31]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	77fb      	strb	r3, [r7, #31]
 8000ea2:	7ffb      	ldrb	r3, [r7, #31]
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d9ef      	bls.n	8000e88 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <HW_TS_Init+0x1c4>)
 8000eaa:	2206      	movs	r2, #6
 8000eac:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ec0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ed6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HW_TS_Init+0x1c8>)
 8000eda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ede:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f001 f98a 	bl	80021fa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	e00a      	b.n	8000f12 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f001 f966 	bl	80021de <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HW_TS_Init+0x1a0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	22ff      	movs	r2, #255	; 0xff
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2106      	movs	r1, #6
 8000f20:	2003      	movs	r0, #3
 8000f22:	f001 f922 	bl	800216a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f26:	2003      	movs	r0, #3
 8000f28:	f001 f939 	bl	800219e <HAL_NVIC_EnableIRQ>

  return;
 8000f2c:	bf00      	nop
}
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200002a0 	.word	0x200002a0
 8000f38:	40002800 	.word	0x40002800
 8000f3c:	200002a4 	.word	0x200002a4
 8000f40:	200002a5 	.word	0x200002a5
 8000f44:	200002a6 	.word	0x200002a6
 8000f48:	200002a8 	.word	0x200002a8
 8000f4c:	20000268 	.word	0x20000268
 8000f50:	20000264 	.word	0x20000264
 8000f54:	200001d0 	.word	0x200001d0
 8000f58:	20000260 	.word	0x20000260
 8000f5c:	58000800 	.word	0x58000800

08000f60 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8000f6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f70:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000f76:	2003      	movs	r0, #3
 8000f78:	f001 f91f 	bl	80021ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f7c:	4b37      	ldr	r3, [pc, #220]	; (800105c <HW_TS_Stop+0xfc>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	22ca      	movs	r2, #202	; 0xca
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <HW_TS_Stop+0xfc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2253      	movs	r2, #83	; 0x53
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	4933      	ldr	r1, [pc, #204]	; (8001060 <HW_TS_Stop+0x100>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	440b      	add	r3, r1
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d148      	bne.n	800103a <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fc61 	bl	8000874 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <HW_TS_Stop+0x104>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fb8:	7cfb      	ldrb	r3, [r7, #19]
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d135      	bne.n	800102a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <HW_TS_Stop+0x108>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d108      	bne.n	8000fde <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000fcc:	bf00      	nop
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <HW_TS_Stop+0xfc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f7      	bne.n	8000fce <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <HW_TS_Stop+0xfc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HW_TS_Stop+0xfc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ff0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ff2:	bf00      	nop
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HW_TS_Stop+0xfc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f7      	beq.n	8000ff4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HW_TS_Stop+0xfc>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HW_TS_Stop+0xfc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001018:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <HW_TS_Stop+0x10c>)
 800101c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001020:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001022:	2003      	movs	r0, #3
 8001024:	f001 f8e9 	bl	80021fa <HAL_NVIC_ClearPendingIRQ>
 8001028:	e007      	b.n	800103a <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HW_TS_Stop+0x110>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	7cfa      	ldrb	r2, [r7, #19]
 8001032:	429a      	cmp	r2, r3
 8001034:	d001      	beq.n	800103a <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001036:	f7ff fd3f 	bl	8000ab8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <HW_TS_Stop+0xfc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001044:	2003      	movs	r0, #3
 8001046:	f001 f8aa 	bl	800219e <HAL_NVIC_EnableIRQ>
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001054:	bf00      	nop
}
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200002a0 	.word	0x200002a0
 8001060:	200001d0 	.word	0x200001d0
 8001064:	20000260 	.word	0x20000260
 8001068:	40002800 	.word	0x40002800
 800106c:	58000800 	.word	0x58000800
 8001070:	20000261 	.word	0x20000261

08001074 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001080:	79fa      	ldrb	r2, [r7, #7]
 8001082:	493b      	ldr	r1, [pc, #236]	; (8001170 <HW_TS_Start+0xfc>)
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	330c      	adds	r3, #12
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d103      	bne.n	80010a0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff60 	bl	8000f60 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010a0:	f3ef 8310 	mrs	r3, PRIMASK
 80010a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80010a6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80010aa:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80010ac:	2003      	movs	r0, #3
 80010ae:	f001 f884 	bl	80021ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HW_TS_Start+0x100>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	22ca      	movs	r2, #202	; 0xca
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HW_TS_Start+0x100>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2253      	movs	r2, #83	; 0x53
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	4929      	ldr	r1, [pc, #164]	; (8001170 <HW_TS_Start+0xfc>)
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	440b      	add	r3, r1
 80010d4:	330c      	adds	r3, #12
 80010d6:	2202      	movs	r2, #2
 80010d8:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	4924      	ldr	r1, [pc, #144]	; (8001170 <HW_TS_Start+0xfc>)
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	440b      	add	r3, r1
 80010e8:	3308      	adds	r3, #8
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	491f      	ldr	r1, [pc, #124]	; (8001170 <HW_TS_Start+0xfc>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	3304      	adds	r3, #4
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fb0b 	bl	8000720 <linkTimer>
 800110a:	4603      	mov	r3, r0
 800110c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HW_TS_Start+0x104>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HW_TS_Start+0x108>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	7c7a      	ldrb	r2, [r7, #17]
 800111c:	429a      	cmp	r2, r3
 800111e:	d002      	beq.n	8001126 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001120:	f7ff fcca 	bl	8000ab8 <RescheduleTimerList>
 8001124:	e013      	b.n	800114e <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	4911      	ldr	r1, [pc, #68]	; (8001170 <HW_TS_Start+0xfc>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	3308      	adds	r3, #8
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	8a7b      	ldrh	r3, [r7, #18]
 800113a:	79fa      	ldrb	r2, [r7, #7]
 800113c:	1ac9      	subs	r1, r1, r3
 800113e:	480c      	ldr	r0, [pc, #48]	; (8001170 <HW_TS_Start+0xfc>)
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4403      	add	r3, r0
 800114a:	3308      	adds	r3, #8
 800114c:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HW_TS_Start+0x100>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	22ff      	movs	r2, #255	; 0xff
 8001156:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001158:	2003      	movs	r0, #3
 800115a:	f001 f820 	bl	800219e <HAL_NVIC_EnableIRQ>
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001168:	bf00      	nop
}
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001d0 	.word	0x200001d0
 8001174:	200002a0 	.word	0x200002a0
 8001178:	20000260 	.word	0x20000260
 800117c:	20000261 	.word	0x20000261

08001180 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	460b      	mov	r3, r1
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4798      	blx	r3

  return;
 8001192:	bf00      	nop
}
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <LL_AHB2_GRP1_EnableClock>:
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4013      	ands	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011f0:	68fb      	ldr	r3, [r7, #12]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C1_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C1_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C1_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C1_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C1_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C1_Init+0x74>)
 800123c:	f001 f998 	bl	8002570 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 f995 	bl	8001574 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C1_Init+0x74>)
 800124e:	f001 fe03 	bl	8002e58 <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 f98c 	bl	8001574 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C1_Init+0x74>)
 8001260:	f001 fe45 	bl	8002eee <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 f983 	bl	8001574 <Error_Handler>
  }

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20004d84 	.word	0x20004d84
 8001278:	40005400 	.word	0x40005400
 800127c:	00707cbb 	.word	0x00707cbb

08001280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_I2C_MspInit+0x68>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d11e      	bne.n	80012e0 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2002      	movs	r0, #2
 80012a4:	f7ff ff79 	bl	800119a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a8:	23c0      	movs	r3, #192	; 0xc0
 80012aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b8:	2304      	movs	r3, #4
 80012ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <HAL_I2C_MspInit+0x6c>)
 80012c4:	f000 ffa8 	bl	8002218 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012cc:	f7ff ff7e 	bl	80011cc <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2105      	movs	r1, #5
 80012d4:	201e      	movs	r0, #30
 80012d6:	f000 ff48 	bl	800216a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012da:	201e      	movs	r0, #30
 80012dc:	f000 ff5f 	bl	800219e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40005400 	.word	0x40005400
 80012ec:	48000400 	.word	0x48000400

080012f0 <toggleLed>:
 *      Author: patrick
 */

#include "led.h"

void toggleLed(uint8_t red, uint8_t green, uint8_t blue){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	460b      	mov	r3, r1
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	4613      	mov	r3, r2
 8001300:	717b      	strb	r3, [r7, #5]
	if(red){
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <toggleLed+0x24>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2102      	movs	r1, #2
 800130c:	4815      	ldr	r0, [pc, #84]	; (8001364 <toggleLed+0x74>)
 800130e:	f001 f8f3 	bl	80024f8 <HAL_GPIO_WritePin>
 8001312:	e004      	b.n	800131e <toggleLed+0x2e>
	}
	else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2102      	movs	r1, #2
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <toggleLed+0x74>)
 800131a:	f001 f8ed 	bl	80024f8 <HAL_GPIO_WritePin>
	}

	if(blue){
 800131e:	797b      	ldrb	r3, [r7, #5]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <toggleLed+0x42>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2110      	movs	r1, #16
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f001 f8e4 	bl	80024f8 <HAL_GPIO_WritePin>
 8001330:	e005      	b.n	800133e <toggleLed+0x4e>
		}
		else{
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	2110      	movs	r1, #16
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f001 f8dd 	bl	80024f8 <HAL_GPIO_WritePin>
		}

	if(green){
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <toggleLed+0x60>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2101      	movs	r1, #1
 8001348:	4806      	ldr	r0, [pc, #24]	; (8001364 <toggleLed+0x74>)
 800134a:	f001 f8d5 	bl	80024f8 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
		}
}
 800134e:	e004      	b.n	800135a <toggleLed+0x6a>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	2101      	movs	r1, #1
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <toggleLed+0x74>)
 8001356:	f001 f8cf 	bl	80024f8 <HAL_GPIO_WritePin>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	48000400 	.word	0x48000400

08001368 <LL_RCC_LSE_SetDriveCapability>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001378:	f023 0218 	bic.w	r2, r3, #24
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001382:	4313      	orrs	r3, r2
 8001384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <main+0x40>)
 800139a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800139e:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f000 fd4a 	bl	8001e38 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80013a4:	f000 fa03 	bl	80017ae <_Z12Reset_Devicev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a8:	f000 f816 	bl	80013d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 80013ac:	f000 fa2a 	bl	8001804 <_Z9Init_Extiv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f7ff f88a 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013b4:	f7ff ff24 	bl	8001200 <MX_I2C1_Init>
  MX_RF_Init();
 80013b8:	f000 fa30 	bl	800181c <MX_RF_Init>
  MX_RTC_Init();
 80013bc:	f000 fa60 	bl	8001880 <MX_RTC_Init>
  MX_USB_Device_Init();
 80013c0:	f00e fc90 	bl	800fce4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
//  myMain();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80013c4:	f009 fc5e 	bl	800ac84 <osKernelInitialize>
  MX_FREERTOS_Init();
 80013c8:	f7ff f836 	bl	8000438 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 80013cc:	f009 fc8e 	bl	800acec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <main+0x3c>
 80013d2:	bf00      	nop
 80013d4:	58004000 	.word	0x58004000

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0ae      	sub	sp, #184	; 0xb8
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013e2:	2248      	movs	r2, #72	; 0x48
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00f fa17 	bl	801081a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2250      	movs	r2, #80	; 0x50
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00f fa07 	bl	801081a <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800141a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f023 0303 	bic.w	r3, r3, #3
 8001426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001430:	f002 fce2 	bl	8003df8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff ff97 	bl	8001368 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143a:	4b44      	ldr	r3, [pc, #272]	; (800154c <SystemClock_Config+0x174>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001442:	4a42      	ldr	r2, [pc, #264]	; (800154c <SystemClock_Config+0x174>)
 8001444:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b40      	ldr	r3, [pc, #256]	; (800154c <SystemClock_Config+0x174>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001456:	2327      	movs	r3, #39	; 0x27
 8001458:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800145a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001460:	2301      	movs	r3, #1
 8001462:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001468:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800146a:	2301      	movs	r3, #1
 800146c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001488:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800148c:	4618      	mov	r0, r3
 800148e:	f003 f863 	bl	8004558 <HAL_RCC_OscConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	bf14      	ite	ne
 8001498:	2301      	movne	r3, #1
 800149a:	2300      	moveq	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80014a2:	f000 f867 	bl	8001574 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80014a6:	236f      	movs	r3, #111	; 0x6f
 80014a8:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014aa:	2302      	movs	r3, #2
 80014ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014c6:	2101      	movs	r1, #1
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fbd1 	bl	8004c70 <HAL_RCC_ClockConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80014de:	f000 f849 	bl	8001574 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80014e2:	f643 1304 	movw	r3, #14596	; 0x3904
 80014e6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80014e8:	2318      	movs	r3, #24
 80014ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80014ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80014f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014f6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80014f8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80014fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001502:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001504:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800150a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800151c:	2300      	movs	r3, #0
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001520:	2310      	movs	r3, #16
 8001522:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f004 f80c 	bl	8005544 <HAL_RCCEx_PeriphCLKConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x168>
  {
    Error_Handler();
 800153c:	f000 f81a 	bl	8001574 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001540:	f004 f975 	bl	800582e <HAL_RCCEx_EnableMSIPLLMode>
}
 8001544:	bf00      	nop
 8001546:	37b8      	adds	r7, #184	; 0xb8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	58000400 	.word	0x58000400

08001550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001562:	f000 fc89 	bl	8001e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40012c00 	.word	0x40012c00

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157a:	e7fe      	b.n	800157a <Error_Handler+0x6>

0800157c <LL_EXTI_DisableIT_0_31>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <LL_EXTI_DisableIT_0_31+0x28>)
 8001586:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	43db      	mvns	r3, r3
 800158e:	4905      	ldr	r1, [pc, #20]	; (80015a4 <LL_EXTI_DisableIT_0_31+0x28>)
 8001590:	4013      	ands	r3, r2
 8001592:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	58000800 	.word	0x58000800

080015a8 <LL_EXTI_DisableIT_32_63>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <LL_EXTI_DisableIT_32_63+0x28>)
 80015b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4905      	ldr	r1, [pc, #20]	; (80015d0 <LL_EXTI_DisableIT_32_63+0x28>)
 80015bc:	4013      	ands	r3, r2
 80015be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	58000800 	.word	0x58000800

080015d4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80015d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800162c:	d101      	bne.n	8001632 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001652:	d101      	bne.n	8001658 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_AHB3_GRP1_EnableClock>:
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800166c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001678:	4313      	orrs	r3, r2
 800167a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800167c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001688:	68fb      	ldr	r3, [r7, #12]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	041b      	lsls	r3, r3, #16
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	605a      	str	r2, [r3, #4]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	605a      	str	r2, [r3, #4]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	615a      	str	r2, [r3, #20]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	615a      	str	r2, [r3, #20]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	609a      	str	r2, [r3, #8]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_Z6myMainv>:

struct ADC_DATA adc_data;

//uint16_t adc_data[4];

int myMain(void){
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0

#ifdef SOLAR_SENSOR_NODE
	#ifndef SOLAR_SENSOR_NODE_I2C_DISABLE

		HAL_Delay(500);
 800175e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001762:	f000 fbb5 	bl	8001ed0 <HAL_Delay>
		powerMeasSetup();
 8001766:	f000 f92f 	bl	80019c8 <powerMeasSetup>
		HAL_Delay(100);
 800176a:	2064      	movs	r0, #100	; 0x64
 800176c:	f000 fbb0 	bl	8001ed0 <HAL_Delay>
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
//			HAL_Delay(500);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
		  }
#endif
}
 8001770:	bf00      	nop
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}

08001776 <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800177a:	f7ff ff4d 	bl	8001618 <LL_RCC_IsActiveFlag_PINRST>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <_Z18Reset_BackupDomainv+0x1c>
 8001784:	f7ff ff5b 	bl	800163e <LL_RCC_IsActiveFlag_SFTRST>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <_Z18Reset_BackupDomainv+0x1c>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <_Z18Reset_BackupDomainv+0x1e>
 8001792:	2300      	movs	r3, #0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001798:	f002 fb2e 	bl	8003df8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800179c:	f002 fb2c 	bl	8003df8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80017a0:	f7ff ff18 	bl	80015d4 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80017a4:	f7ff ff27 	bl	80015f6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
}
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80017b2:	f7ff ffe0 	bl	8001776 <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 80017b6:	f000 f803 	bl	80017c0 <_Z10Reset_IPCCv>
#endif

  return;
 80017ba:	bf00      	nop
}
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80017c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80017c8:	f7ff ff4c 	bl	8001664 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80017cc:	213f      	movs	r1, #63	; 0x3f
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <_Z10Reset_IPCCv+0x40>)
 80017d0:	f7ff ffa7 	bl	8001722 <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80017d4:	213f      	movs	r1, #63	; 0x3f
 80017d6:	480a      	ldr	r0, [pc, #40]	; (8001800 <_Z10Reset_IPCCv+0x40>)
 80017d8:	f7ff ffb1 	bl	800173e <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80017dc:	213f      	movs	r1, #63	; 0x3f
 80017de:	4808      	ldr	r0, [pc, #32]	; (8001800 <_Z10Reset_IPCCv+0x40>)
 80017e0:	f7ff ff59 	bl	8001696 <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80017e4:	213f      	movs	r1, #63	; 0x3f
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <_Z10Reset_IPCCv+0x40>)
 80017e8:	f7ff ff78 	bl	80016dc <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80017ec:	213f      	movs	r1, #63	; 0x3f
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <_Z10Reset_IPCCv+0x40>)
 80017f0:	f7ff ff63 	bl	80016ba <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80017f4:	213f      	movs	r1, #63	; 0x3f
 80017f6:	4802      	ldr	r0, [pc, #8]	; (8001800 <_Z10Reset_IPCCv+0x40>)
 80017f8:	f7ff ff82 	bl	8001700 <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80017fc:	bf00      	nop
}
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	58000c00 	.word	0x58000c00

08001804 <_Z9Init_Extiv>:

void Init_Exti( void )
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff feb6 	bl	800157c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001810:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001814:	f7ff fec8 	bl	80015a8 <LL_EXTI_DisableIT_32_63>

  return;
 8001818:	bf00      	nop
}
 800181a:	bd80      	pop	{r7, pc}

0800181c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_RCC_EnableRTC>:
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800182e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_APB1_GRP1_EnableClock>:
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800185a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001870:	68fb      	ldr	r3, [r7, #12]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_RTC_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_RTC_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_RTC_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_RTC_Init+0x4c>)
 8001892:	220f      	movs	r2, #15
 8001894:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <MX_RTC_Init+0x4c>)
 8001898:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800189c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_RTC_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_RTC_Init+0x4c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_RTC_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_RTC_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_RTC_Init+0x4c>)
 80018b8:	f004 f8d0 	bl	8005a5c <HAL_RTC_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80018c2:	f7ff fe57 	bl	8001574 <Error_Handler>
  }

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20004dd0 	.word	0x20004dd0
 80018d0:	40002800 	.word	0x40002800

080018d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_RTC_MspInit+0x28>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d105      	bne.n	80018f2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018e6:	f7ff ffa0 	bl	800182a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80018ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018ee:	f7ff ffad 	bl	800184c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40002800 	.word	0x40002800

08001900 <measMsgReceivedFromNode>:
volatile struct SerialMsg serialMsg = {
		.endOfLine="end\r\n"
};

char end_of_line[13] = "end\r\n";
void measMsgReceivedFromNode(struct MeasMsg* msg){
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	// send over UART if USB UART active
#if USB_UART_ACTIVE
	// TODO correct for proper angle
	position[0] = 0;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <measMsgReceivedFromNode+0x48>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
	position[1] = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <measMsgReceivedFromNode+0x48>)
 8001910:	2200      	movs	r2, #0
 8001912:	705a      	strb	r2, [r3, #1]

//	CDC_Transmit_FS(position, sizeof(position));
	taskENTER_CRITICAL();
 8001914:	f00c fec2 	bl	800e69c <vPortEnterCritical>
	memcpy((struct MeasMsg*) &serialMsg.measMsg, msg, sizeof(struct MeasMsg));
 8001918:	2214      	movs	r2, #20
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <measMsgReceivedFromNode+0x4c>)
 800191e:	f00e ff71 	bl	8010804 <memcpy>
	CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(struct SerialMsg));
 8001922:	2124      	movs	r1, #36	; 0x24
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <measMsgReceivedFromNode+0x4c>)
 8001926:	f00e fa9b 	bl	800fe60 <CDC_Transmit_FS>
	osDelay(1);
 800192a:	2001      	movs	r0, #1
 800192c:	f009 fbb0 	bl	800b090 <osDelay>
	taskEXIT_CRITICAL();
 8001930:	f00c fee2 	bl	800e6f8 <vPortExitCritical>

	// TODO check if power rating in table is lower than current one
	//		if so, replace and record current angle measurements

	// TODO if all expected nodes have replied, move to next Spotlight position
	osThreadFlagsSet (defaultTaskHandle, CAL_THREAD_FLAG);
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <measMsgReceivedFromNode+0x50>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2103      	movs	r1, #3
 800193a:	4618      	mov	r0, r3
 800193c:	f009 fab2 	bl	800aea4 <osThreadFlagsSet>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20004e08 	.word	0x20004e08
 800194c:	20000004 	.word	0x20000004
 8001950:	2000029c 	.word	0x2000029c

08001954 <sendPowerMeasurement>:

#ifdef SOLAR_SENSOR_NODE
void sendPowerMeasurement(otIp6Address peerAddr, int32_t angle_1, int32_t angle_2){
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af04      	add	r7, sp, #16
 800195a:	463c      	mov	r4, r7
 800195c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#ifndef SOLAR_SENSOR_NODE_I2C_DISABLE
	measMsg.angle_1 = angle_1;
 8001960:	4a16      	ldr	r2, [pc, #88]	; (80019bc <sendPowerMeasurement+0x68>)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	6053      	str	r3, [r2, #4]
	measMsg.angle_2 = angle_2;
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <sendPowerMeasurement+0x68>)
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	6093      	str	r3, [r2, #8]
	measMsg.power = getPower();
 800196c:	f000 f844 	bl	80019f8 <getPower>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <sendPowerMeasurement+0x68>)
 8001976:	819a      	strh	r2, [r3, #12]
	measMsg.current = getCurrent();
 8001978:	f000 f864 	bl	8001a44 <getCurrent>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <sendPowerMeasurement+0x68>)
 8001982:	81da      	strh	r2, [r3, #14]
	measMsg.shuntVoltage = getShuntVoltage();
 8001984:	f000 f8aa 	bl	8001adc <getShuntVoltage>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <sendPowerMeasurement+0x68>)
 800198e:	821a      	strh	r2, [r3, #16]
	measMsg.busVoltage = getBusVoltage();
 8001990:	f000 f87e 	bl	8001a90 <getBusVoltage>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <sendPowerMeasurement+0x68>)
 800199a:	825a      	strh	r2, [r3, #18]
#endif
	APP_THREAD_SendCoapMsg(&measMsg, sizeof(struct MeasMsg),
 800199c:	2301      	movs	r3, #1
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	2303      	movs	r3, #3
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2300      	movs	r3, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <sendPowerMeasurement+0x6c>)
 80019aa:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <sendPowerMeasurement+0x70>)
 80019ac:	2114      	movs	r1, #20
 80019ae:	4803      	ldr	r0, [pc, #12]	; (80019bc <sendPowerMeasurement+0x68>)
 80019b0:	f00d fc40 	bl	800f234 <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeSpotResource,
			NO_ACK, OT_COAP_CODE_PUT, 1U);
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	20004df4 	.word	0x20004df4
 80019c0:	08010d50 	.word	0x08010d50
 80019c4:	20004eb0 	.word	0x20004eb0

080019c8 <powerMeasSetup>:

void powerMeasSetup(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af02      	add	r7, sp, #8
	  uint8_t packet[3];
	  packet[0]= 0x05;
 80019ce:	2305      	movs	r3, #5
 80019d0:	713b      	strb	r3, [r7, #4]
	  packet[0]= 0x66;
 80019d2:	2366      	movs	r3, #102	; 0x66
 80019d4:	713b      	strb	r3, [r7, #4]
	  packet[0]= 0xD0;
 80019d6:	23d0      	movs	r3, #208	; 0xd0
 80019d8:	713b      	strb	r3, [r7, #4]
	  HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, packet, 3, 100);
 80019da:	1d3a      	adds	r2, r7, #4
 80019dc:	2364      	movs	r3, #100	; 0x64
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2303      	movs	r3, #3
 80019e2:	2188      	movs	r1, #136	; 0x88
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <powerMeasSetup+0x2c>)
 80019e6:	f000 fe53 	bl	8002690 <HAL_I2C_Master_Transmit>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20004d84 	.word	0x20004d84

080019f8 <getPower>:

uint16_t getPower(){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af02      	add	r7, sp, #8

  uint8_t packet = 0x03;
 80019fe:	2303      	movs	r3, #3
 8001a00:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100);
 8001a02:	1d7a      	adds	r2, r7, #5
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	2188      	movs	r1, #136	; 0x88
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <getPower+0x48>)
 8001a0e:	f000 fe3f 	bl	8002690 <HAL_I2C_Master_Transmit>


  // read 1 byte, from address 0
	  uint8_t receiveBuffer[2];
  HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100);
 8001a12:	463a      	mov	r2, r7
 8001a14:	2364      	movs	r3, #100	; 0x64
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	2188      	movs	r1, #136	; 0x88
 8001a1c:	4808      	ldr	r0, [pc, #32]	; (8001a40 <getPower+0x48>)
 8001a1e:	f000 ff2b 	bl	8002878 <HAL_I2C_Master_Receive>

  uint16_t measurement;
  measurement = receiveBuffer[0] << 8;
 8001a22:	783b      	ldrb	r3, [r7, #0]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	80fb      	strh	r3, [r7, #6]
  measurement = measurement | receiveBuffer[1];
 8001a2a:	787b      	ldrb	r3, [r7, #1]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	80fb      	strh	r3, [r7, #6]

  return measurement;
 8001a34:	88fb      	ldrh	r3, [r7, #6]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20004d84 	.word	0x20004d84

08001a44 <getCurrent>:

uint16_t getCurrent(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af02      	add	r7, sp, #8
	uint8_t packet = 0x04;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100);
 8001a4e:	1d7a      	adds	r2, r7, #5
 8001a50:	2364      	movs	r3, #100	; 0x64
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2301      	movs	r3, #1
 8001a56:	2188      	movs	r1, #136	; 0x88
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <getCurrent+0x48>)
 8001a5a:	f000 fe19 	bl	8002690 <HAL_I2C_Master_Transmit>

  // read 1 byte, from address 0
	  uint8_t receiveBuffer[2];
  HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100);
 8001a5e:	463a      	mov	r2, r7
 8001a60:	2364      	movs	r3, #100	; 0x64
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2302      	movs	r3, #2
 8001a66:	2188      	movs	r1, #136	; 0x88
 8001a68:	4808      	ldr	r0, [pc, #32]	; (8001a8c <getCurrent+0x48>)
 8001a6a:	f000 ff05 	bl	8002878 <HAL_I2C_Master_Receive>

  uint16_t measurement;
  measurement = receiveBuffer[0] << 8;
 8001a6e:	783b      	ldrb	r3, [r7, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	80fb      	strh	r3, [r7, #6]
  measurement = measurement | receiveBuffer[1];
 8001a76:	787b      	ldrb	r3, [r7, #1]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	80fb      	strh	r3, [r7, #6]

  return measurement;
 8001a80:	88fb      	ldrh	r3, [r7, #6]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20004d84 	.word	0x20004d84

08001a90 <getBusVoltage>:

uint16_t getBusVoltage(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af02      	add	r7, sp, #8
	uint8_t packet = 0x02;
 8001a96:	2302      	movs	r3, #2
 8001a98:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100);
 8001a9a:	1d7a      	adds	r2, r7, #5
 8001a9c:	2364      	movs	r3, #100	; 0x64
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	2188      	movs	r1, #136	; 0x88
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <getBusVoltage+0x48>)
 8001aa6:	f000 fdf3 	bl	8002690 <HAL_I2C_Master_Transmit>

  // read 1 byte, from address 0
	  uint8_t receiveBuffer[2];
  HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100);
 8001aaa:	463a      	mov	r2, r7
 8001aac:	2364      	movs	r3, #100	; 0x64
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	2188      	movs	r1, #136	; 0x88
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <getBusVoltage+0x48>)
 8001ab6:	f000 fedf 	bl	8002878 <HAL_I2C_Master_Receive>

  uint16_t measurement;
  measurement = receiveBuffer[0] << 8;
 8001aba:	783b      	ldrb	r3, [r7, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	80fb      	strh	r3, [r7, #6]
  measurement = measurement | receiveBuffer[1];
 8001ac2:	787b      	ldrb	r3, [r7, #1]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	80fb      	strh	r3, [r7, #6]

  return measurement;
 8001acc:	88fb      	ldrh	r3, [r7, #6]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20004d84 	.word	0x20004d84

08001adc <getShuntVoltage>:

uint16_t getShuntVoltage(){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af02      	add	r7, sp, #8
	uint8_t packet = 0x01;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100);
 8001ae6:	1d7a      	adds	r2, r7, #5
 8001ae8:	2364      	movs	r3, #100	; 0x64
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2301      	movs	r3, #1
 8001aee:	2188      	movs	r1, #136	; 0x88
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <getShuntVoltage+0x48>)
 8001af2:	f000 fdcd 	bl	8002690 <HAL_I2C_Master_Transmit>

  // read 1 byte, from address 0
	  uint8_t receiveBuffer[2];
  HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100);
 8001af6:	463a      	mov	r2, r7
 8001af8:	2364      	movs	r3, #100	; 0x64
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2302      	movs	r3, #2
 8001afe:	2188      	movs	r1, #136	; 0x88
 8001b00:	4808      	ldr	r0, [pc, #32]	; (8001b24 <getShuntVoltage+0x48>)
 8001b02:	f000 feb9 	bl	8002878 <HAL_I2C_Master_Receive>

  uint16_t measurement;
  measurement = receiveBuffer[0] << 8;
 8001b06:	783b      	ldrb	r3, [r7, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	80fb      	strh	r3, [r7, #6]
  measurement = measurement | receiveBuffer[1];
 8001b0e:	787b      	ldrb	r3, [r7, #1]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	80fb      	strh	r3, [r7, #6]

  return measurement;
 8001b18:	88fb      	ldrh	r3, [r7, #6]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20004d84 	.word	0x20004d84

08001b28 <LL_AHB3_GRP1_EnableClock>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001b5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b62:	f7ff ffe1 	bl	8001b28 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	210f      	movs	r1, #15
 8001b6a:	f06f 0001 	mvn.w	r0, #1
 8001b6e:	f000 fafc 	bl	800216a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2105      	movs	r1, #5
 8001b76:	202e      	movs	r0, #46	; 0x2e
 8001b78:	f000 faf7 	bl	800216a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001b7c:	202e      	movs	r0, #46	; 0x2e
 8001b7e:	f000 fb0e 	bl	800219e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	210f      	movs	r1, #15
 8001b86:	202c      	movs	r0, #44	; 0x2c
 8001b88:	f000 faef 	bl	800216a <HAL_NVIC_SetPriority>
   HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	210f      	movs	r1, #15
 8001b90:	202d      	movs	r0, #45	; 0x2d
 8001b92:	f000 faea 	bl	800216a <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	2019      	movs	r0, #25
 8001be2:	f000 fac2 	bl	800216a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001be6:	2019      	movs	r0, #25
 8001be8:	f000 fad9 	bl	800219e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001bf0:	f7ff ffd3 	bl	8001b9a <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bf4:	f107 0208 	add.w	r2, r7, #8
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fa0a 	bl	8005018 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c04:	f003 f9f2 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8001c08:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_InitTick+0x8c>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0c9b      	lsrs	r3, r3, #18
 8001c14:	3b01      	subs	r3, #1
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_InitTick+0x90>)
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_InitTick+0x94>)
 8001c1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_InitTick+0x90>)
 8001c20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c26:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <HAL_InitTick+0x90>)
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_InitTick+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_InitTick+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <HAL_InitTick+0x90>)
 8001c3a:	f003 fffd 	bl	8005c38 <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d104      	bne.n	8001c4e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_InitTick+0x90>)
 8001c46:	f004 f859 	bl	8005cfc <HAL_TIM_Base_Start_IT>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	20004e0c 	.word	0x20004e0c
 8001c60:	40012c00 	.word	0x40012c00

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <NMI_Handler+0x4>

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <USB_LP_IRQHandler+0x10>)
 8001c96:	f001 fa53 	bl	8003140 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200063b4 	.word	0x200063b4

08001ca4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001caa:	f004 f875 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20004e0c 	.word	0x20004e0c

08001cb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <I2C1_EV_IRQHandler+0x10>)
 8001cbe:	f000 fed1 	bl	8002a64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20004d84 	.word	0x20004d84

08001ccc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001cd0:	f000 fc2a 	bl	8002528 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8001cdc:	f7fe ff8a 	bl	8000bf4 <HW_TS_RTC_Wakeup_Handler>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001ce8:	f00d fe7c 	bl	800f9e4 <HW_IPCC_Tx_Handler>
  return;
 8001cec:	bf00      	nop
}
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001cf4:	f00d fe1c 	bl	800f930 <HW_IPCC_Rx_Handler>
  return;
 8001cf8:	bf00      	nop
}
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8001cfc:	b40c      	push	{r2, r3}
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	460a      	mov	r2, r1
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	b002      	add	sp, #8
 8001d1a:	4770      	bx	lr

08001d1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001d20:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <SystemInit+0xa0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <SystemInit+0xa0>)
 8001d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <SystemInit+0xa0>)
 8001d2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001d4e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <SystemInit+0xa4>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d6c:	f023 0305 	bic.w	r3, r3, #5
 8001d70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <SystemInit+0xa8>)
 8001d8e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <SystemInit+0xa8>)
 8001d96:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00
 8001dc0:	faf6fefb 	.word	0xfaf6fefb
 8001dc4:	22041000 	.word	0x22041000

08001dc8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001dc8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dcc:	3304      	adds	r3, #4

08001dce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001dd2:	d3f9      	bcc.n	8001dc8 <CopyDataInit>
  bx lr
 8001dd4:	4770      	bx	lr

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001dd6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001dd8:	3004      	adds	r0, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001dda:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>
  bx lr
 8001dde:	4770      	bx	lr

08001de0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001de2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001de4:	f7ff ff9a 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001de8:	480b      	ldr	r0, [pc, #44]	; (8001e18 <LoopForever+0x8>)
 8001dea:	490c      	ldr	r1, [pc, #48]	; (8001e1c <LoopForever+0xc>)
 8001dec:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <LoopForever+0x10>)
 8001dee:	2300      	movs	r3, #0
 8001df0:	f7ff ffed 	bl	8001dce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001df4:	480b      	ldr	r0, [pc, #44]	; (8001e24 <LoopForever+0x14>)
 8001df6:	490c      	ldr	r1, [pc, #48]	; (8001e28 <LoopForever+0x18>)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f7ff ffee 	bl	8001dda <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001dfe:	480b      	ldr	r0, [pc, #44]	; (8001e2c <LoopForever+0x1c>)
 8001e00:	490b      	ldr	r1, [pc, #44]	; (8001e30 <LoopForever+0x20>)
 8001e02:	2300      	movs	r3, #0
 8001e04:	f7ff ffe9 	bl	8001dda <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e08:	f00e fcd8 	bl	80107bc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001e0c:	f7ff fac2 	bl	8001394 <main>

08001e10 <LoopForever>:

LoopForever:
  b LoopForever
 8001e10:	e7fe      	b.n	8001e10 <LoopForever>
 8001e12:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001e14:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	200001d0 	.word	0x200001d0
 8001e20:	08010d68 	.word	0x08010d68
  INIT_BSS _sbss, _ebss
 8001e24:	20000280 	.word	0x20000280
 8001e28:	20006628 	.word	0x20006628
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001e2c:	200300e0 	.word	0x200300e0
 8001e30:	20030b57 	.word	0x20030b57

08001e34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e34:	e7fe      	b.n	8001e34 <ADC1_IRQHandler>
	...

08001e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_Init+0x3c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <HAL_Init+0x3c>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4e:	2003      	movs	r0, #3
 8001e50:	f000 f980 	bl	8002154 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff feb9 	bl	8001bcc <HAL_InitTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	e001      	b.n	8001e6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e66:	f7ff fe78 	bl	8001b5a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	58004000 	.word	0x58004000

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000030 	.word	0x20000030
 8001e9c:	20004e58 	.word	0x20004e58

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20004e58 	.word	0x20004e58

08001eb8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetTickPrio+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000002c 	.word	0x2000002c

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffe2 	bl	8001ea0 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_Delay+0x40>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffd2 	bl	8001ea0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
    {
    }
  }
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000030 	.word	0x20000030

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db10      	blt.n	8001fe8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4909      	ldr	r1, [pc, #36]	; (8001ff4 <__NVIC_DisableIRQ+0x40>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	3320      	adds	r3, #32
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fe0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fe4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0c      	blt.n	8002024 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	; (8002030 <__NVIC_SetPendingIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	3340      	adds	r3, #64	; 0x40
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db0c      	blt.n	8002060 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4907      	ldr	r1, [pc, #28]	; (800206c <__NVIC_ClearPendingIRQ+0x38>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2001      	movs	r0, #1
 8002056:	fa00 f202 	lsl.w	r2, r0, r2
 800205a:	3360      	adds	r3, #96	; 0x60
 800205c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002130:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <__NVIC_SystemReset+0x20>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <__NVIC_SystemReset+0x20>)
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_SystemReset+0x24>)
 8002140:	4313      	orrs	r3, r2
 8002142:	60cb      	str	r3, [r1, #12]
 8002144:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <__NVIC_SystemReset+0x1c>
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	05fa0004 	.word	0x05fa0004

08002154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff fed9 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002178:	f7ff fef0 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 800217c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff ff9e 	bl	80020c4 <NVIC_EncodePriority>
 8002188:	4602      	mov	r2, r0
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff6d 	bl	8002070 <__NVIC_SetPriority>
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fee3 	bl	8001f78 <__NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fef3 	bl	8001fb4 <__NVIC_DisableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80021da:	f7ff ffa7 	bl	800212c <__NVIC_SystemReset>

080021de <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff03 	bl	8001ff8 <__NVIC_SetPendingIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff13 	bl	8002034 <__NVIC_ClearPendingIRQ>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e14c      	b.n	80024c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 813e 	beq.w	80024bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d00b      	beq.n	8002260 <HAL_GPIO_Init+0x48>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d007      	beq.n	8002260 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002254:	2b11      	cmp	r3, #17
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b12      	cmp	r3, #18
 800225e:	d130      	bne.n	80022c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002296:	2201      	movs	r2, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 0201 	and.w	r2, r3, #1
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0xea>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b12      	cmp	r3, #18
 8002300:	d123      	bne.n	800234a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	6939      	ldr	r1, [r7, #16]
 8002346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8098 	beq.w	80024bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800238c:	4a54      	ldr	r2, [pc, #336]	; (80024e0 <HAL_GPIO_Init+0x2c8>)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023b6:	d019      	beq.n	80023ec <HAL_GPIO_Init+0x1d4>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a4a      	ldr	r2, [pc, #296]	; (80024e4 <HAL_GPIO_Init+0x2cc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_GPIO_Init+0x1d0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a49      	ldr	r2, [pc, #292]	; (80024e8 <HAL_GPIO_Init+0x2d0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00d      	beq.n	80023e4 <HAL_GPIO_Init+0x1cc>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a48      	ldr	r2, [pc, #288]	; (80024ec <HAL_GPIO_Init+0x2d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_Init+0x1c8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a47      	ldr	r2, [pc, #284]	; (80024f0 <HAL_GPIO_Init+0x2d8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_GPIO_Init+0x1c4>
 80023d8:	2304      	movs	r3, #4
 80023da:	e008      	b.n	80023ee <HAL_GPIO_Init+0x1d6>
 80023dc:	2307      	movs	r3, #7
 80023de:	e006      	b.n	80023ee <HAL_GPIO_Init+0x1d6>
 80023e0:	2303      	movs	r3, #3
 80023e2:	e004      	b.n	80023ee <HAL_GPIO_Init+0x1d6>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e002      	b.n	80023ee <HAL_GPIO_Init+0x1d6>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_GPIO_Init+0x1d6>
 80023ec:	2300      	movs	r3, #0
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	f002 0203 	and.w	r2, r2, #3
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	4093      	lsls	r3, r2
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023fe:	4938      	ldr	r1, [pc, #224]	; (80024e0 <HAL_GPIO_Init+0x2c8>)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 800240e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002432:	4a30      	ldr	r2, [pc, #192]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800243a:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 800243c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002460:	4a24      	ldr	r2, [pc, #144]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002468:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	43db      	mvns	r3, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b6:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <HAL_GPIO_Init+0x2dc>)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3301      	adds	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f47f aeab 	bne.w	8002228 <HAL_GPIO_Init+0x10>
  }
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40010000 	.word	0x40010000
 80024e4:	48000400 	.word	0x48000400
 80024e8:	48000800 	.word	0x48000800
 80024ec:	48000c00 	.word	0x48000c00
 80024f0:	48001000 	.word	0x48001000
 80024f4:	58000800 	.word	0x58000800

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002514:	e002      	b.n	800251c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_HSEM_IRQHandler+0x30>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_HSEM_IRQHandler+0x30>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	43db      	mvns	r3, r3
 800253c:	4906      	ldr	r1, [pc, #24]	; (8002558 <HAL_HSEM_IRQHandler+0x30>)
 800253e:	4013      	ands	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <HAL_HSEM_IRQHandler+0x30>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f807 	bl	800255c <HAL_HSEM_FreeCallback>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	58001500 	.word	0x58001500

0800255c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e081      	b.n	8002686 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fe72 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	; 0x24
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d107      	bne.n	80025ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	e006      	b.n	80025f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d104      	bne.n	800260a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800262c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	ea42 0103 	orr.w	r1, r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	021a      	lsls	r2, r3, #8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69d9      	ldr	r1, [r3, #28]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1a      	ldr	r2, [r3, #32]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	461a      	mov	r2, r3
 800269c:	460b      	mov	r3, r1
 800269e:	817b      	strh	r3, [r7, #10]
 80026a0:	4613      	mov	r3, r2
 80026a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	f040 80da 	bne.w	8002866 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_I2C_Master_Transmit+0x30>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0d3      	b.n	8002868 <HAL_I2C_Master_Transmit+0x1d8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026c8:	f7ff fbea 	bl	8001ea0 <HAL_GetTick>
 80026cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2319      	movs	r3, #25
 80026d4:	2201      	movs	r2, #1
 80026d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fa00 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0be      	b.n	8002868 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2221      	movs	r2, #33	; 0x21
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2210      	movs	r2, #16
 80026f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	893a      	ldrh	r2, [r7, #8]
 800270a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	2bff      	cmp	r3, #255	; 0xff
 800271a:	d90e      	bls.n	800273a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	22ff      	movs	r2, #255	; 0xff
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	b2da      	uxtb	r2, r3
 8002728:	8979      	ldrh	r1, [r7, #10]
 800272a:	4b51      	ldr	r3, [pc, #324]	; (8002870 <HAL_I2C_Master_Transmit+0x1e0>)
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fb62 	bl	8002dfc <I2C_TransferConfig>
 8002738:	e06c      	b.n	8002814 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	b2da      	uxtb	r2, r3
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	4b48      	ldr	r3, [pc, #288]	; (8002870 <HAL_I2C_Master_Transmit+0x1e0>)
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fb51 	bl	8002dfc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800275a:	e05b      	b.n	8002814 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	6a39      	ldr	r1, [r7, #32]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f9fd 	bl	8002b60 <I2C_WaitOnTXISFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e07b      	b.n	8002868 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d034      	beq.n	8002814 <HAL_I2C_Master_Transmit+0x184>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d130      	bne.n	8002814 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	2200      	movs	r2, #0
 80027ba:	2180      	movs	r1, #128	; 0x80
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f98f 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e04d      	b.n	8002868 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d90e      	bls.n	80027f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	2300      	movs	r3, #0
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fb05 	bl	8002dfc <I2C_TransferConfig>
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	2300      	movs	r3, #0
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 faf4 	bl	8002dfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d19e      	bne.n	800275c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	6a39      	ldr	r1, [r7, #32]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f9dc 	bl	8002be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e01a      	b.n	8002868 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2220      	movs	r2, #32
 8002838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_I2C_Master_Transmit+0x1e4>)
 8002846:	400b      	ands	r3, r1
 8002848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	80002000 	.word	0x80002000
 8002874:	fe00e800 	.word	0xfe00e800

08002878 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	460b      	mov	r3, r1
 8002886:	817b      	strh	r3, [r7, #10]
 8002888:	4613      	mov	r3, r2
 800288a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b20      	cmp	r3, #32
 8002896:	f040 80db 	bne.w	8002a50 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_I2C_Master_Receive+0x30>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e0d4      	b.n	8002a52 <HAL_I2C_Master_Receive+0x1da>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028b0:	f7ff faf6 	bl	8001ea0 <HAL_GetTick>
 80028b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2319      	movs	r3, #25
 80028bc:	2201      	movs	r2, #1
 80028be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f90c 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0bf      	b.n	8002a52 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2222      	movs	r2, #34	; 0x22
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2210      	movs	r2, #16
 80028de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	893a      	ldrh	r2, [r7, #8]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2bff      	cmp	r3, #255	; 0xff
 8002902:	d90e      	bls.n	8002922 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	22ff      	movs	r2, #255	; 0xff
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	b2da      	uxtb	r2, r3
 8002910:	8979      	ldrh	r1, [r7, #10]
 8002912:	4b52      	ldr	r3, [pc, #328]	; (8002a5c <HAL_I2C_Master_Receive+0x1e4>)
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fa6e 	bl	8002dfc <I2C_TransferConfig>
 8002920:	e06d      	b.n	80029fe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	b2da      	uxtb	r2, r3
 8002932:	8979      	ldrh	r1, [r7, #10]
 8002934:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <HAL_I2C_Master_Receive+0x1e4>)
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fa5d 	bl	8002dfc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002942:	e05c      	b.n	80029fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	6a39      	ldr	r1, [r7, #32]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f985 	bl	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e07c      	b.n	8002a52 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d034      	beq.n	80029fe <HAL_I2C_Master_Receive+0x186>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	d130      	bne.n	80029fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	2200      	movs	r2, #0
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f89a 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e04d      	b.n	8002a52 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2bff      	cmp	r3, #255	; 0xff
 80029be:	d90e      	bls.n	80029de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	22ff      	movs	r2, #255	; 0xff
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fa10 	bl	8002dfc <I2C_TransferConfig>
 80029dc:	e00f      	b.n	80029fe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	8979      	ldrh	r1, [r7, #10]
 80029f0:	2300      	movs	r3, #0
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f9ff 	bl	8002dfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d19d      	bne.n	8002944 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6a39      	ldr	r1, [r7, #32]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f8e7 	bl	8002be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e01a      	b.n	8002a52 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2220      	movs	r2, #32
 8002a22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <HAL_I2C_Master_Receive+0x1e8>)
 8002a30:	400b      	ands	r3, r1
 8002a32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	80002400 	.word	0x80002400
 8002a60:	fe00e800 	.word	0xfe00e800

08002a64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	68f9      	ldr	r1, [r7, #12]
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
  }
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d103      	bne.n	8002ab6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d007      	beq.n	8002ad4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	619a      	str	r2, [r3, #24]
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af0:	e022      	b.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d01e      	beq.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7ff f9d1 	bl	8001ea0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d113      	bne.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e00f      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4013      	ands	r3, r2
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d0cd      	beq.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b6c:	e02c      	b.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f8dc 	bl	8002d30 <I2C_IsAcknowledgeFailed>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e02a      	b.n	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d01e      	beq.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7ff f989 	bl	8001ea0 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d113      	bne.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e007      	b.n	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d1cb      	bne.n	8002b6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bec:	e028      	b.n	8002c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f89c 	bl	8002d30 <I2C_IsAcknowledgeFailed>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e026      	b.n	8002c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7ff f94d 	bl	8001ea0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e007      	b.n	8002c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d1cf      	bne.n	8002bee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c64:	e055      	b.n	8002d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f860 	bl	8002d30 <I2C_IsAcknowledgeFailed>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e053      	b.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d129      	bne.n	8002cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d105      	bne.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e03f      	b.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e022      	b.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cdc:	f7ff f8e0 	bl	8001ea0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d302      	bcc.n	8002cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e007      	b.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d1a2      	bne.n	8002c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	fe00e800 	.word	0xfe00e800

08002d30 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d151      	bne.n	8002dee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d4a:	e022      	b.n	8002d92 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d01e      	beq.n	8002d92 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7ff f8a4 	bl	8001ea0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d302      	bcc.n	8002d6a <I2C_IsAcknowledgeFailed+0x3a>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d113      	bne.n	8002d92 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e02e      	b.n	8002df0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d1d5      	bne.n	8002d4c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2210      	movs	r2, #16
 8002da6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2220      	movs	r2, #32
 8002dae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff fe71 	bl	8002a98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f043 0204 	orr.w	r2, r3, #4
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	fe00e800 	.word	0xfe00e800

08002dfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	0d5b      	lsrs	r3, r3, #21
 8002e18:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <I2C_TransferConfig+0x58>)
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	43db      	mvns	r3, r3
 8002e22:	ea02 0103 	and.w	r1, r2, r3
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e2c:	7a7b      	ldrb	r3, [r7, #9]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	03ff63ff 	.word	0x03ff63ff

08002e58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d138      	bne.n	8002ee0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e032      	b.n	8002ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	; 0x24
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d139      	bne.n	8002f78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e033      	b.n	8002f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2224      	movs	r2, #36	; 0x24
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f88:	b08b      	sub	sp, #44	; 0x2c
 8002f8a:	af06      	add	r7, sp, #24
 8002f8c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0ad      	b.n	80030f4 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d106      	bne.n	8002fb2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f00d f8cf 	bl	8010150 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 f8cd 	bl	800615e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e035      	b.n	8003036 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	015b      	lsls	r3, r3, #5
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3329      	adds	r3, #41	; 0x29
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	015b      	lsls	r3, r3, #5
 8002fde:	4413      	add	r3, r2
 8002fe0:	3328      	adds	r3, #40	; 0x28
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	b291      	uxth	r1, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	015b      	lsls	r3, r3, #5
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3336      	adds	r3, #54	; 0x36
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	4413      	add	r3, r2
 8003000:	332b      	adds	r3, #43	; 0x2b
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	015b      	lsls	r3, r3, #5
 800300c:	4413      	add	r3, r2
 800300e:	3338      	adds	r3, #56	; 0x38
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	015b      	lsls	r3, r3, #5
 800301a:	4413      	add	r3, r2
 800301c:	333c      	adds	r3, #60	; 0x3c
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	3302      	adds	r3, #2
 8003028:	015b      	lsls	r3, r3, #5
 800302a:	4413      	add	r3, r2
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	3301      	adds	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	7bfa      	ldrb	r2, [r7, #15]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	d3c4      	bcc.n	8002fca <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	e031      	b.n	80030aa <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	015b      	lsls	r3, r3, #5
 800304c:	4413      	add	r3, r2
 800304e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	4413      	add	r3, r2
 800305e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	015b      	lsls	r3, r3, #5
 800306c:	4413      	add	r3, r2
 800306e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	4413      	add	r3, r2
 800307e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	015b      	lsls	r3, r3, #5
 800308c:	4413      	add	r3, r2
 800308e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	330a      	adds	r3, #10
 800309c:	015b      	lsls	r3, r3, #5
 800309e:	4413      	add	r3, r2
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	3301      	adds	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d3c8      	bcc.n	8003046 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	687e      	ldr	r6, [r7, #4]
 80030bc:	466d      	mov	r5, sp
 80030be:	f106 0410 	add.w	r4, r6, #16
 80030c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	602b      	str	r3, [r5, #0]
 80030ca:	1d33      	adds	r3, r6, #4
 80030cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	f003 f860 	bl	8006194 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d102      	bne.n	80030f2 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fe59 	bl	8003da4 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_PCD_Start+0x16>
 800310e:	2302      	movs	r3, #2
 8003110:	e012      	b.n	8003138 <HAL_PCD_Start+0x3c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f004 fa30 	bl	8007584 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f002 ffff 	bl	800612c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f004 fa30 	bl	80075b2 <USB_ReadInterrupts>
 8003152:	4603      	mov	r3, r0
 8003154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315c:	d102      	bne.n	8003164 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fb33 	bl	80037ca <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f004 fa22 	bl	80075b2 <USB_ReadInterrupts>
 800316e:	4603      	mov	r3, r0
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d112      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003182:	b29a      	uxth	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318c:	b292      	uxth	r2, r2
 800318e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f00d f863 	bl	801025e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003198:	2100      	movs	r1, #0
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f91e 	bl	80033dc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 fa04 	bl	80075b2 <USB_ReadInterrupts>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b4:	d10b      	bne.n	80031ce <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031c8:	b292      	uxth	r2, r2
 80031ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 f9ed 	bl	80075b2 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e2:	d10b      	bne.n	80031fc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f6:	b292      	uxth	r2, r2
 80031f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f004 f9d6 	bl	80075b2 <USB_ReadInterrupts>
 8003206:	4603      	mov	r3, r0
 8003208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003210:	d133      	bne.n	800327a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0204 	bic.w	r2, r2, #4
 8003224:	b292      	uxth	r2, r2
 8003226:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0208 	bic.w	r2, r2, #8
 800323c:	b292      	uxth	r2, r2
 800323e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003254:	2100      	movs	r1, #0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f00d f9f0 	bl	801063c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f00d f837 	bl	80102d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800326a:	b29a      	uxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003274:	b292      	uxth	r2, r2
 8003276:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f004 f997 	bl	80075b2 <USB_ReadInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328e:	d126      	bne.n	80032de <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0208 	orr.w	r2, r2, #8
 80032a2:	b292      	uxth	r2, r2
 80032a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ba:	b292      	uxth	r2, r2
 80032bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0204 	orr.w	r2, r2, #4
 80032d2:	b292      	uxth	r2, r2
 80032d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f00c ffdf 	bl	801029c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 f965 	bl	80075b2 <USB_ReadInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ee:	2b80      	cmp	r3, #128	; 0x80
 80032f0:	d13f      	bne.n	8003372 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003304:	b292      	uxth	r2, r2
 8003306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003310:	2b00      	cmp	r3, #0
 8003312:	d12b      	bne.n	800336c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0204 	orr.w	r2, r2, #4
 8003326:	b292      	uxth	r2, r2
 8003328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003334:	b29a      	uxth	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	b292      	uxth	r2, r2
 8003340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003354:	b29b      	uxth	r3, r3
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003362:	2101      	movs	r1, #1
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f00d f969 	bl	801063c <HAL_PCDEx_LPM_Callback>
 800336a:	e002      	b.n	8003372 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f00c ff95 	bl	801029c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f004 f91b 	bl	80075b2 <USB_ReadInterrupts>
 800337c:	4603      	mov	r3, r0
 800337e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003386:	d10e      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800339a:	b292      	uxth	r2, r2
 800339c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f00c ff4e 	bl	8010242 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f004 f901 	bl	80075b2 <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ba:	d10b      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ce:	b292      	uxth	r2, r2
 80033d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_PCD_SetAddress+0x1a>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e013      	b.n	800341e <HAL_PCD_SetAddress+0x42>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f004 f8a4 	bl	800755c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	4608      	mov	r0, r1
 8003430:	4611      	mov	r1, r2
 8003432:	461a      	mov	r2, r3
 8003434:	4603      	mov	r3, r0
 8003436:	70fb      	strb	r3, [r7, #3]
 8003438:	460b      	mov	r3, r1
 800343a:	803b      	strh	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003448:	2b00      	cmp	r3, #0
 800344a:	da0b      	bge.n	8003464 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	015b      	lsls	r3, r3, #5
 8003454:	3328      	adds	r3, #40	; 0x28
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	705a      	strb	r2, [r3, #1]
 8003462:	e00b      	b.n	800347c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	015b      	lsls	r3, r3, #5
 800346c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003488:	883a      	ldrh	r2, [r7, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	78ba      	ldrb	r2, [r7, #2]
 8003492:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	785b      	ldrb	r3, [r3, #1]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d004      	beq.n	80034a6 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034a6:	78bb      	ldrb	r3, [r7, #2]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d102      	bne.n	80034b2 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_PCD_EP_Open+0x9a>
 80034bc:	2302      	movs	r3, #2
 80034be:	e00e      	b.n	80034de <HAL_PCD_EP_Open+0xb8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68f9      	ldr	r1, [r7, #12]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 fe84 	bl	80061dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80034dc:	7afb      	ldrb	r3, [r7, #11]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	da0b      	bge.n	8003512 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	015b      	lsls	r3, r3, #5
 8003502:	3328      	adds	r3, #40	; 0x28
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	705a      	strb	r2, [r3, #1]
 8003510:	e00b      	b.n	800352a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	015b      	lsls	r3, r3, #5
 800351a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	b2da      	uxtb	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_PCD_EP_Close+0x5e>
 8003540:	2302      	movs	r3, #2
 8003542:	e00e      	b.n	8003562 <HAL_PCD_EP_Close+0x7c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	4618      	mov	r0, r3
 8003554:	f003 f9f0 	bl	8006938 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	460b      	mov	r3, r1
 8003578:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	015b      	lsls	r3, r3, #5
 8003582:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a4:	7afb      	ldrb	r3, [r7, #11]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035b0:	7afb      	ldrb	r3, [r7, #11]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6979      	ldr	r1, [r7, #20]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 fba6 	bl	8006d12 <USB_EPStartXfer>
 80035c6:	e005      	b.n	80035d4 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6979      	ldr	r1, [r7, #20]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 fb9f 	bl	8006d12 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	330a      	adds	r3, #10
 80035f4:	015b      	lsls	r3, r3, #5
 80035f6:	4413      	add	r3, r2
 80035f8:	3304      	adds	r3, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	460b      	mov	r3, r1
 8003616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003618:	7afb      	ldrb	r3, [r7, #11]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	015b      	lsls	r3, r3, #5
 8003620:	3328      	adds	r3, #40	; 0x28
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2201      	movs	r2, #1
 800363e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003640:	7afb      	ldrb	r3, [r7, #11]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	b2da      	uxtb	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800364c:	7afb      	ldrb	r3, [r7, #11]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6979      	ldr	r1, [r7, #20]
 800365c:	4618      	mov	r0, r3
 800365e:	f003 fb58 	bl	8006d12 <USB_EPStartXfer>
 8003662:	e005      	b.n	8003670 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6979      	ldr	r1, [r7, #20]
 800366a:	4618      	mov	r0, r3
 800366c:	f003 fb51 	bl	8006d12 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 0207 	and.w	r2, r3, #7
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d901      	bls.n	8003698 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e046      	b.n	8003726 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800369c:	2b00      	cmp	r3, #0
 800369e:	da0b      	bge.n	80036b8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	015b      	lsls	r3, r3, #5
 80036a8:	3328      	adds	r3, #40	; 0x28
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	705a      	strb	r2, [r3, #1]
 80036b6:	e009      	b.n	80036cc <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	015b      	lsls	r3, r3, #5
 80036bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4413      	add	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_PCD_EP_SetStall+0x72>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e01c      	b.n	8003726 <HAL_PCD_EP_SetStall+0xac>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68f9      	ldr	r1, [r7, #12]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 fe2f 	bl	800735e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	2b00      	cmp	r3, #0
 8003708:	d108      	bne.n	800371c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003714:	4619      	mov	r1, r3
 8003716:	4610      	mov	r0, r2
 8003718:	f003 ff5b 	bl	80075d2 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d901      	bls.n	800374c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e03a      	b.n	80037c2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800374c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003750:	2b00      	cmp	r3, #0
 8003752:	da0b      	bge.n	800376c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	015b      	lsls	r3, r3, #5
 800375c:	3328      	adds	r3, #40	; 0x28
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	705a      	strb	r2, [r3, #1]
 800376a:	e00b      	b.n	8003784 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	015b      	lsls	r3, r3, #5
 8003774:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_PCD_EP_ClrStall+0x76>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e00e      	b.n	80037c2 <HAL_PCD_EP_ClrStall+0x94>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68f9      	ldr	r1, [r7, #12]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f003 fe24 	bl	8007400 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b08e      	sub	sp, #56	; 0x38
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037d2:	e29c      	b.n	8003d0e <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80037de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80037ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 8152 	bne.w	8003a98 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d150      	bne.n	80038a0 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	81fb      	strh	r3, [r7, #14]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	89fb      	ldrh	r3, [r7, #14]
 8003816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800381e:	b29b      	uxth	r3, r3
 8003820:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3328      	adds	r3, #40	; 0x28
 8003826:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003830:	b29b      	uxth	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	4413      	add	r3, r2
 8003842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	441a      	add	r2, r3
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800385e:	2100      	movs	r1, #0
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f00c fcd7 	bl	8010214 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 824d 	beq.w	8003d0e <PCD_EP_ISR_Handler+0x544>
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 8248 	bne.w	8003d0e <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800388a:	b2da      	uxtb	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	b292      	uxth	r2, r2
 8003892:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800389e:	e236      	b.n	8003d0e <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80038b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d032      	beq.n	8003920 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f003 feb9 	bl	800766c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29a      	uxth	r2, r3
 8003902:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003906:	4013      	ands	r3, r2
 8003908:	823b      	strh	r3, [r7, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	8a3a      	ldrh	r2, [r7, #16]
 8003910:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003914:	b292      	uxth	r2, r2
 8003916:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f00c fc51 	bl	80101c0 <HAL_PCD_SetupStageCallback>
 800391e:	e1f6      	b.n	8003d0e <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003920:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003924:	2b00      	cmp	r3, #0
 8003926:	f280 81f2 	bge.w	8003d0e <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29a      	uxth	r2, r3
 8003932:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003936:	4013      	ands	r3, r2
 8003938:	83fb      	strh	r3, [r7, #30]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	8bfa      	ldrh	r2, [r7, #30]
 8003940:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003944:	b292      	uxth	r2, r2
 8003946:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003950:	b29b      	uxth	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	4413      	add	r3, r2
 8003962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d019      	beq.n	80039ac <PCD_EP_ISR_Handler+0x1e2>
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	6959      	ldr	r1, [r3, #20]
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003990:	b29b      	uxth	r3, r3
 8003992:	f003 fe6b 	bl	800766c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	441a      	add	r2, r3
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80039a4:	2100      	movs	r1, #0
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f00c fc1c 	bl	80101e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	4413      	add	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d112      	bne.n	80039fa <PCD_EP_ISR_Handler+0x230>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039de:	b29a      	uxth	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	801a      	strh	r2, [r3, #0]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	801a      	strh	r2, [r3, #0]
 80039f8:	e02f      	b.n	8003a5a <PCD_EP_ISR_Handler+0x290>
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b3e      	cmp	r3, #62	; 0x3e
 8003a00:	d813      	bhi.n	8003a2a <PCD_EP_ISR_Handler+0x260>
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <PCD_EP_ISR_Handler+0x252>
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	3301      	adds	r3, #1
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	029b      	lsls	r3, r3, #10
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	e017      	b.n	8003a5a <PCD_EP_ISR_Handler+0x290>
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	633b      	str	r3, [r7, #48]	; 0x30
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <PCD_EP_ISR_Handler+0x27a>
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	3b01      	subs	r3, #1
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	827b      	strh	r3, [r7, #18]
 8003a6c:	8a7b      	ldrh	r3, [r7, #18]
 8003a6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a72:	827b      	strh	r3, [r7, #18]
 8003a74:	8a7b      	ldrh	r3, [r7, #18]
 8003a76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a7a:	827b      	strh	r3, [r7, #18]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	8a7b      	ldrh	r3, [r7, #18]
 8003a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	8013      	strh	r3, [r2, #0]
 8003a96:	e13a      	b.n	8003d0e <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003aaa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f280 80d6 	bge.w	8003c60 <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003aca:	4013      	ands	r3, r2
 8003acc:	853b      	strh	r3, [r7, #40]	; 0x28
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ae6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003aea:	015b      	lsls	r3, r3, #5
 8003aec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	7b1b      	ldrb	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11f      	bne.n	8003b3e <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b22:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8003b24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d075      	beq.n	8003c16 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	6959      	ldr	r1, [r3, #20]
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	88da      	ldrh	r2, [r3, #6]
 8003b36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b38:	f003 fd98 	bl	800766c <USB_ReadPMA>
 8003b3c:	e06b      	b.n	8003c16 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b58:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	441a      	add	r2, r3
 8003b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01f      	beq.n	8003bd8 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bbc:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8003bbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d028      	beq.n	8003c16 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	6959      	ldr	r1, [r3, #20]
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	891a      	ldrh	r2, [r3, #8]
 8003bd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bd2:	f003 fd4b 	bl	800766c <USB_ReadPMA>
 8003bd6:	e01e      	b.n	8003c16 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfc:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8003bfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	6959      	ldr	r1, [r3, #20]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	895a      	ldrh	r2, [r3, #10]
 8003c10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c12:	f003 fd2b 	bl	800766c <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c1c:	441a      	add	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c28:	441a      	add	r2, r3
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <PCD_EP_ISR_Handler+0x476>
 8003c36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d206      	bcs.n	8003c4e <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f00c facc 	bl	80101e4 <HAL_PCD_DataOutStageCallback>
 8003c4c:	e008      	b.n	8003c60 <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	7819      	ldrb	r1, [r3, #0]
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fc85 	bl	800356a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d051      	beq.n	8003d0e <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c6e:	015b      	lsls	r3, r3, #5
 8003c70:	3328      	adds	r3, #40	; 0x28
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	843b      	strh	r3, [r7, #32]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	8c3b      	ldrh	r3, [r7, #32]
 8003ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	441a      	add	r2, r3
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f00c fa8d 	bl	8010214 <HAL_PCD_DataInStageCallback>
 8003cfa:	e008      	b.n	8003d0e <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	7819      	ldrb	r1, [r3, #0]
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fc7d 	bl	8003608 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	b21b      	sxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f6ff ad5a 	blt.w	80037d4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3738      	adds	r7, #56	; 0x38
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b087      	sub	sp, #28
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	817b      	strh	r3, [r7, #10]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d3c:	897b      	ldrh	r3, [r7, #10]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d48:	897b      	ldrh	r3, [r7, #10]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	015b      	lsls	r3, r3, #5
 8003d50:	3328      	adds	r3, #40	; 0x28
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e006      	b.n	8003d68 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	015b      	lsls	r3, r3, #5
 8003d5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d68:	893b      	ldrh	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	80da      	strh	r2, [r3, #6]
 8003d7c:	e00b      	b.n	8003d96 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2201      	movs	r2, #1
 8003d82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f043 0302 	orr.w	r3, r3, #2
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	6013      	str	r3, [r2, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	58000400 	.word	0x58000400

08003e18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	58000400 	.word	0x58000400

08003e34 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e42:	6053      	str	r3, [r2, #4]
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	58000400 	.word	0x58000400

08003e54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e66:	d101      	bne.n	8003e6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_RCC_HSE_Enable>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_HSE_Disable>:
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_RCC_HSE_IsReady>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ec6:	d101      	bne.n	8003ecc <LL_RCC_HSE_IsReady+0x18>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <LL_RCC_HSE_IsReady+0x1a>
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_RCC_HSI_Enable>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <LL_RCC_HSI_Disable>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f08:	6013      	str	r3, [r2, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_RCC_HSI_IsReady>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d101      	bne.n	8003f2c <LL_RCC_HSI_IsReady+0x18>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <LL_RCC_HSI_IsReady+0x1a>
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	061b      	lsls	r3, r3, #24
 8003f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <LL_RCC_HSI48_Enable>:
{
 8003f62:	b480      	push	{r7}
 8003f64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f7a:	bf00      	nop
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_RCC_HSI48_Disable>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <LL_RCC_HSI48_IsReady>:
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d101      	bne.n	8003fbe <LL_RCC_HSI48_IsReady+0x18>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <LL_RCC_HSI48_IsReady+0x1a>
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_RCC_LSE_Enable>:
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fe2:	bf00      	nop
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_RCC_LSE_Disable>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <LL_RCC_LSE_EnableBypass>:
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004026:	bf00      	nop
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_RCC_LSE_DisableBypass>:
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <LL_RCC_LSE_IsReady>:
{
 8004052:	b480      	push	{r7}
 8004054:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d101      	bne.n	800406a <LL_RCC_LSE_IsReady+0x18>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <LL_RCC_LSE_IsReady+0x1a>
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <LL_RCC_LSI1_Enable>:
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800408e:	bf00      	nop
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_RCC_LSI1_Disable>:
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <LL_RCC_LSI1_IsReady>:
{
 80040ba:	b480      	push	{r7}
 80040bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80040be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d101      	bne.n	80040d2 <LL_RCC_LSI1_IsReady+0x18>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <LL_RCC_LSI1_IsReady+0x1a>
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_RCC_LSI2_Enable>:
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_LSI2_Disable>:
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004110:	f023 0304 	bic.w	r3, r3, #4
 8004114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_RCC_LSI2_IsReady>:
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b08      	cmp	r3, #8
 8004134:	d101      	bne.n	800413a <LL_RCC_LSI2_IsReady+0x18>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <LL_RCC_LSI2_IsReady+0x1a>
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <LL_RCC_LSI2_SetTrimming>:
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800414e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004156:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_RCC_MSI_Enable>:
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_RCC_MSI_Disable>:
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	6013      	str	r3, [r2, #0]
}
 80041a6:	bf00      	nop
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_RCC_MSI_IsReady>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d101      	bne.n	80041c6 <LL_RCC_MSI_IsReady+0x16>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <LL_RCC_MSI_IsReady+0x18>
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_RCC_MSI_SetRange>:
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80041da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_RCC_MSI_GetRange>:
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800420a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2bb0      	cmp	r3, #176	; 0xb0
 8004210:	d901      	bls.n	8004216 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004212:	23b0      	movs	r3, #176	; 0xb0
 8004214:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004216:	687b      	ldr	r3, [r7, #4]
}
 8004218:	4618      	mov	r0, r3
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800422c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <LL_RCC_SetSysClkSource>:
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f023 0203 	bic.w	r2, r3, #3
 8004260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_RCC_GetSysClkSource>:
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <LL_RCC_SetAHBPrescaler>:
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_RCC_SetAHB4Prescaler>:
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80042ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042f2:	f023 020f 	bic.w	r2, r3, #15
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_RCC_SetAPB1Prescaler>:
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_RCC_SetAPB2Prescaler>:
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800434a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_RCC_GetAHBPrescaler>:
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_C2_RCC_GetAHBPrescaler>:
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004380:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_RCC_GetAHB4Prescaler>:
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_RCC_GetAPB1Prescaler>:
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <LL_RCC_GetAPB2Prescaler>:
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80043ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_RCC_PLL_Enable>:
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f0:	6013      	str	r3, [r2, #0]
}
 80043f2:	bf00      	nop
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_RCC_PLL_Disable>:
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800440a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440e:	6013      	str	r3, [r2, #0]
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <LL_RCC_PLL_IsReady>:
{
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800442c:	d101      	bne.n	8004432 <LL_RCC_PLL_IsReady+0x18>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <LL_RCC_PLL_IsReady+0x1a>
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <LL_RCC_PLL_GetN>:
{
 800443e:	b480      	push	{r7}
 8004440:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_RCC_PLL_GetR>:
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004466:	4618      	mov	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_RCC_PLL_GetDivider>:
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800447e:	4618      	mov	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <LL_RCC_PLL_GetMainSource>:
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800448c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0303 	and.w	r3, r3, #3
}
 8004496:	4618      	mov	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <LL_RCC_IsActiveFlag_HPRE>:
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d101      	bne.n	80044b8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80044c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d8:	d101      	bne.n	80044de <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80044ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d101      	bne.n	8004504 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004522:	d101      	bne.n	8004528 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004542:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004546:	d101      	bne.n	800454c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b08d      	sub	sp, #52	; 0x34
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e37e      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8092 	beq.w	800469c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004578:	f7ff fe7d 	bl	8004276 <LL_RCC_GetSysClkSource>
 800457c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800457e:	f7ff ff83 	bl	8004488 <LL_RCC_PLL_GetMainSource>
 8004582:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_RCC_OscConfig+0x3e>
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d14c      	bne.n	800462a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	2b01      	cmp	r3, #1
 8004594:	d149      	bne.n	800462a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004596:	f7ff fe0b 	bl	80041b0 <LL_RCC_MSI_IsReady>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_OscConfig+0x54>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e35d      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80045b0:	f7ff fe23 	bl	80041fa <LL_RCC_MSI_GetRange>
 80045b4:	4603      	mov	r3, r0
 80045b6:	429c      	cmp	r4, r3
 80045b8:	d914      	bls.n	80045e4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fd5c 	bl	800507c <RCC_SetFlashLatencyFromMSIRange>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e34c      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fdfd 	bl	80041d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fe21 	bl	8004224 <LL_RCC_MSI_SetCalibTrimming>
 80045e2:	e013      	b.n	800460c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fdf2 	bl	80041d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fe16 	bl	8004224 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fd3d 	bl	800507c <RCC_SetFlashLatencyFromMSIRange>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e32d      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800460c:	f000 fcda 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8004610:	4602      	mov	r2, r0
 8004612:	4bb3      	ldr	r3, [pc, #716]	; (80048e0 <HAL_RCC_OscConfig+0x388>)
 8004614:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004616:	4bb3      	ldr	r3, [pc, #716]	; (80048e4 <HAL_RCC_OscConfig+0x38c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fad6 	bl	8001bcc <HAL_InitTick>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d039      	beq.n	800469a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e31e      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01e      	beq.n	8004670 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004632:	f7ff fd9f 	bl	8004174 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004636:	f7fd fc33 	bl	8001ea0 <HAL_GetTick>
 800463a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800463e:	f7fd fc2f 	bl	8001ea0 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e30b      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004650:	f7ff fdae 	bl	80041b0 <LL_RCC_MSI_IsReady>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f1      	beq.n	800463e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fdb7 	bl	80041d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fddb 	bl	8004224 <LL_RCC_MSI_SetCalibTrimming>
 800466e:	e015      	b.n	800469c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004670:	f7ff fd8f 	bl	8004192 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004674:	f7fd fc14 	bl	8001ea0 <HAL_GetTick>
 8004678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800467c:	f7fd fc10 	bl	8001ea0 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e2ec      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800468e:	f7ff fd8f 	bl	80041b0 <LL_RCC_MSI_IsReady>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f1      	bne.n	800467c <HAL_RCC_OscConfig+0x124>
 8004698:	e000      	b.n	800469c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800469a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d04e      	beq.n	8004746 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a8:	f7ff fde5 	bl	8004276 <LL_RCC_GetSysClkSource>
 80046ac:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ae:	f7ff feeb 	bl	8004488 <LL_RCC_PLL_GetMainSource>
 80046b2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x16e>
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d10d      	bne.n	80046dc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d10a      	bne.n	80046dc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c6:	f7ff fbf5 	bl	8003eb4 <LL_RCC_HSE_IsReady>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d039      	beq.n	8004744 <HAL_RCC_OscConfig+0x1ec>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d135      	bne.n	8004744 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e2c5      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d102      	bne.n	80046ec <HAL_RCC_OscConfig+0x194>
 80046e6:	f7ff fbc7 	bl	8003e78 <LL_RCC_HSE_Enable>
 80046ea:	e001      	b.n	80046f0 <HAL_RCC_OscConfig+0x198>
 80046ec:	f7ff fbd3 	bl	8003e96 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d012      	beq.n	800471e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fd fbd2 	bl	8001ea0 <HAL_GetTick>
 80046fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004700:	f7fd fbce 	bl	8001ea0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e2aa      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004712:	f7ff fbcf 	bl	8003eb4 <LL_RCC_HSE_IsReady>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f1      	beq.n	8004700 <HAL_RCC_OscConfig+0x1a8>
 800471c:	e013      	b.n	8004746 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7fd fbbf 	bl	8001ea0 <HAL_GetTick>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004726:	f7fd fbbb 	bl	8001ea0 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b64      	cmp	r3, #100	; 0x64
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e297      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004738:	f7ff fbbc 	bl	8003eb4 <LL_RCC_HSE_IsReady>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f1      	bne.n	8004726 <HAL_RCC_OscConfig+0x1ce>
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d051      	beq.n	80047f6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004752:	f7ff fd90 	bl	8004276 <LL_RCC_GetSysClkSource>
 8004756:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004758:	f7ff fe96 	bl	8004488 <LL_RCC_PLL_GetMainSource>
 800475c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d005      	beq.n	8004770 <HAL_RCC_OscConfig+0x218>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d113      	bne.n	8004792 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d110      	bne.n	8004792 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004770:	f7ff fbd0 	bl	8003f14 <LL_RCC_HSI_IsReady>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_RCC_OscConfig+0x22e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e270      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fbd4 	bl	8003f38 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004790:	e031      	b.n	80047f6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d019      	beq.n	80047ce <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479a:	f7ff fb9d 	bl	8003ed8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7fd fb7f 	bl	8001ea0 <HAL_GetTick>
 80047a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a6:	f7fd fb7b 	bl	8001ea0 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e257      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80047b8:	f7ff fbac 	bl	8003f14 <LL_RCC_HSI_IsReady>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f1      	beq.n	80047a6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fbb6 	bl	8003f38 <LL_RCC_HSI_SetCalibTrimming>
 80047cc:	e013      	b.n	80047f6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ce:	f7ff fb92 	bl	8003ef6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd fb65 	bl	8001ea0 <HAL_GetTick>
 80047d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047da:	f7fd fb61 	bl	8001ea0 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e23d      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80047ec:	f7ff fb92 	bl	8003f14 <LL_RCC_HSI_IsReady>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f1      	bne.n	80047da <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80a3 	beq.w	8004956 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d076      	beq.n	8004906 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	d046      	beq.n	80048b2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004824:	f7ff fc49 	bl	80040ba <LL_RCC_LSI1_IsReady>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d113      	bne.n	8004856 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800482e:	f7ff fc22 	bl	8004076 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004832:	f7fd fb35 	bl	8001ea0 <HAL_GetTick>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800483a:	f7fd fb31 	bl	8001ea0 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e20d      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800484c:	f7ff fc35 	bl	80040ba <LL_RCC_LSI1_IsReady>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f1      	beq.n	800483a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004856:	f7ff fc42 	bl	80040de <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485a:	f7fd fb21 	bl	8001ea0 <HAL_GetTick>
 800485e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004862:	f7fd fb1d 	bl	8001ea0 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b03      	cmp	r3, #3
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e1f9      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004874:	f7ff fc55 	bl	8004122 <LL_RCC_LSI2_IsReady>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f1      	beq.n	8004862 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fc5f 	bl	8004146 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004888:	f7ff fc06 	bl	8004098 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fd fb08 	bl	8001ea0 <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004894:	f7fd fb04 	bl	8001ea0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1e0      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80048a6:	f7ff fc08 	bl	80040ba <LL_RCC_LSI1_IsReady>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f1      	bne.n	8004894 <HAL_RCC_OscConfig+0x33c>
 80048b0:	e051      	b.n	8004956 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80048b2:	f7ff fbe0 	bl	8004076 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fd faf3 	bl	8001ea0 <HAL_GetTick>
 80048ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048be:	f7fd faef 	bl	8001ea0 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e1cb      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048d0:	f7ff fbf3 	bl	80040ba <LL_RCC_LSI1_IsReady>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f1      	beq.n	80048be <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80048da:	f7ff fc11 	bl	8004100 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80048de:	e00c      	b.n	80048fa <HAL_RCC_OscConfig+0x3a2>
 80048e0:	20000028 	.word	0x20000028
 80048e4:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048e8:	f7fd fada 	bl	8001ea0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e1b6      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80048fa:	f7ff fc12 	bl	8004122 <LL_RCC_LSI2_IsReady>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f1      	bne.n	80048e8 <HAL_RCC_OscConfig+0x390>
 8004904:	e027      	b.n	8004956 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004906:	f7ff fbfb 	bl	8004100 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fd fac9 	bl	8001ea0 <HAL_GetTick>
 800490e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004912:	f7fd fac5 	bl	8001ea0 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b03      	cmp	r3, #3
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e1a1      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004924:	f7ff fbfd 	bl	8004122 <LL_RCC_LSI2_IsReady>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f1      	bne.n	8004912 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800492e:	f7ff fbb3 	bl	8004098 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004932:	f7fd fab5 	bl	8001ea0 <HAL_GetTick>
 8004936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800493a:	f7fd fab1 	bl	8001ea0 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e18d      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800494c:	f7ff fbb5 	bl	80040ba <LL_RCC_LSI1_IsReady>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f1      	bne.n	800493a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d05b      	beq.n	8004a1a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004962:	4bb5      	ldr	r3, [pc, #724]	; (8004c38 <HAL_RCC_OscConfig+0x6e0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d114      	bne.n	8004998 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800496e:	f7ff fa43 	bl	8003df8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004972:	f7fd fa95 	bl	8001ea0 <HAL_GetTick>
 8004976:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497a:	f7fd fa91 	bl	8001ea0 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e16d      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498c:	4baa      	ldr	r3, [pc, #680]	; (8004c38 <HAL_RCC_OscConfig+0x6e0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d102      	bne.n	80049a6 <HAL_RCC_OscConfig+0x44e>
 80049a0:	f7ff fb13 	bl	8003fca <LL_RCC_LSE_Enable>
 80049a4:	e00c      	b.n	80049c0 <HAL_RCC_OscConfig+0x468>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d104      	bne.n	80049b8 <HAL_RCC_OscConfig+0x460>
 80049ae:	f7ff fb2e 	bl	800400e <LL_RCC_LSE_EnableBypass>
 80049b2:	f7ff fb0a 	bl	8003fca <LL_RCC_LSE_Enable>
 80049b6:	e003      	b.n	80049c0 <HAL_RCC_OscConfig+0x468>
 80049b8:	f7ff fb18 	bl	8003fec <LL_RCC_LSE_Disable>
 80049bc:	f7ff fb38 	bl	8004030 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d014      	beq.n	80049f2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fd fa6a 	bl	8001ea0 <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fd fa66 	bl	8001ea0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e140      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80049e6:	f7ff fb34 	bl	8004052 <LL_RCC_LSE_IsReady>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0ef      	beq.n	80049d0 <HAL_RCC_OscConfig+0x478>
 80049f0:	e013      	b.n	8004a1a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f2:	f7fd fa55 	bl	8001ea0 <HAL_GetTick>
 80049f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fa:	f7fd fa51 	bl	8001ea0 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e12b      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a10:	f7ff fb1f 	bl	8004052 <LL_RCC_LSE_IsReady>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1ef      	bne.n	80049fa <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02c      	beq.n	8004a80 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d014      	beq.n	8004a58 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a2e:	f7ff fa98 	bl	8003f62 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a32:	f7fd fa35 	bl	8001ea0 <HAL_GetTick>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a3a:	f7fd fa31 	bl	8001ea0 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e10d      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a4c:	f7ff faab 	bl	8003fa6 <LL_RCC_HSI48_IsReady>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f1      	beq.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
 8004a56:	e013      	b.n	8004a80 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a58:	f7ff fa94 	bl	8003f84 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fd fa20 	bl	8001ea0 <HAL_GetTick>
 8004a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a64:	f7fd fa1c 	bl	8001ea0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0f8      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a76:	f7ff fa96 	bl	8003fa6 <LL_RCC_HSI48_IsReady>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f1      	bne.n	8004a64 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80ee 	beq.w	8004c66 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8a:	f7ff fbf4 	bl	8004276 <LL_RCC_GetSysClkSource>
 8004a8e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	f040 80af 	bne.w	8004c00 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 0203 	and.w	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d123      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d11c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	0a1b      	lsrs	r3, r3, #8
 8004ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d114      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d10d      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d106      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d05d      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b0c      	cmp	r3, #12
 8004afc:	d058      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0ab      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b10:	f7ff fc74 	bl	80043fc <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b14:	f7fd f9c4 	bl	8001ea0 <HAL_GetTick>
 8004b18:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fd f9c0 	bl	8001ea0 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e09c      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1ef      	bne.n	8004b1c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	4b3e      	ldr	r3, [pc, #248]	; (8004c3c <HAL_RCC_OscConfig+0x6e4>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b4e:	4311      	orrs	r1, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b54:	0212      	lsls	r2, r2, #8
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b5c:	4311      	orrs	r1, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b72:	f7ff fc34 	bl	80043de <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b84:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b86:	f7fd f98b 	bl	8001ea0 <HAL_GetTick>
 8004b8a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8e:	f7fd f987 	bl	8001ea0 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e063      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0ef      	beq.n	8004b8e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bae:	e05a      	b.n	8004c66 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e059      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d151      	bne.n	8004c66 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bc2:	f7ff fc0c 	bl	80043de <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bd6:	f7fd f963 	bl	8001ea0 <HAL_GetTick>
 8004bda:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fd f95f 	bl	8001ea0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e03b      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ef      	beq.n	8004bde <HAL_RCC_OscConfig+0x686>
 8004bfe:	e032      	b.n	8004c66 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b0c      	cmp	r3, #12
 8004c04:	d02d      	beq.n	8004c62 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c06:	f7ff fbf9 	bl	80043fc <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c14:	f023 0303 	bic.w	r3, r3, #3
 8004c18:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c24:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fd f937 	bl	8001ea0 <HAL_GetTick>
 8004c32:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c34:	e00d      	b.n	8004c52 <HAL_RCC_OscConfig+0x6fa>
 8004c36:	bf00      	nop
 8004c38:	58000400 	.word	0x58000400
 8004c3c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fd f92e 	bl	8001ea0 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e00a      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1ef      	bne.n	8004c40 <HAL_RCC_OscConfig+0x6e8>
 8004c60:	e001      	b.n	8004c66 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3734      	adds	r7, #52	; 0x34
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd90      	pop	{r4, r7, pc}

08004c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e12d      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c84:	4b98      	ldr	r3, [pc, #608]	; (8004ee8 <HAL_RCC_ClockConfig+0x278>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d91b      	bls.n	8004cca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b95      	ldr	r3, [pc, #596]	; (8004ee8 <HAL_RCC_ClockConfig+0x278>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 0207 	bic.w	r2, r3, #7
 8004c9a:	4993      	ldr	r1, [pc, #588]	; (8004ee8 <HAL_RCC_ClockConfig+0x278>)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca2:	f7fd f8fd 	bl	8001ea0 <HAL_GetTick>
 8004ca6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004caa:	f7fd f8f9 	bl	8001ea0 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e111      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbc:	4b8a      	ldr	r3, [pc, #552]	; (8004ee8 <HAL_RCC_ClockConfig+0x278>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d1ef      	bne.n	8004caa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fad7 	bl	800428e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ce0:	f7fd f8de 	bl	8001ea0 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ce8:	f7fd f8da 	bl	8001ea0 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0f2      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cfa:	f7ff fbd1 	bl	80044a0 <LL_RCC_IsActiveFlag_HPRE>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f1      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d016      	beq.n	8004d3e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff face 	bl	80042b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d1a:	f7fd f8c1 	bl	8001ea0 <HAL_GetTick>
 8004d1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d22:	f7fd f8bd 	bl	8001ea0 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e0d5      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d34:	f7ff fbc6 	bl	80044c4 <LL_RCC_IsActiveFlag_C2HPRE>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f1      	beq.n	8004d22 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d016      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fac7 	bl	80042e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d54:	f7fd f8a4 	bl	8001ea0 <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d5c:	f7fd f8a0 	bl	8001ea0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e0b8      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d6e:	f7ff fbbc 	bl	80044ea <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f1      	beq.n	8004d5c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d016      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fac1 	bl	8004310 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d8e:	f7fd f887 	bl	8001ea0 <HAL_GetTick>
 8004d92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d96:	f7fd f883 	bl	8001ea0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e09b      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004da8:	f7ff fbb2 	bl	8004510 <LL_RCC_IsActiveFlag_PPRE1>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f1      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d017      	beq.n	8004dee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fab7 	bl	8004338 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004dca:	f7fd f869 	bl	8001ea0 <HAL_GetTick>
 8004dce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dd2:	f7fd f865 	bl	8001ea0 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e07d      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004de4:	f7ff fba6 	bl	8004534 <LL_RCC_IsActiveFlag_PPRE2>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f1      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d043      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d106      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e02:	f7ff f857 	bl	8003eb4 <LL_RCC_HSE_IsReady>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d11e      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e067      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d106      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004e18:	f7ff faff 	bl	800441a <LL_RCC_PLL_IsReady>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d113      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e05c      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004e2e:	f7ff f9bf 	bl	80041b0 <LL_RCC_MSI_IsReady>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d108      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e051      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e3c:	f7ff f86a 	bl	8003f14 <LL_RCC_HSI_IsReady>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e04a      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff f9fd 	bl	800424e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e54:	f7fd f824 	bl	8001ea0 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5c:	f7fd f820 	bl	8001ea0 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e036      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	f7ff fa00 	bl	8004276 <LL_RCC_GetSysClkSource>
 8004e76:	4602      	mov	r2, r0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d1ec      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e82:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <HAL_RCC_ClockConfig+0x278>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d21b      	bcs.n	8004ec8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e90:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <HAL_RCC_ClockConfig+0x278>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f023 0207 	bic.w	r2, r3, #7
 8004e98:	4913      	ldr	r1, [pc, #76]	; (8004ee8 <HAL_RCC_ClockConfig+0x278>)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea0:	f7fc fffe 	bl	8001ea0 <HAL_GetTick>
 8004ea4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ea8:	f7fc fffa 	bl	8001ea0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e012      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <HAL_RCC_ClockConfig+0x278>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d1ef      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ec8:	f000 f87c 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <HAL_RCC_ClockConfig+0x27c>)
 8004ed0:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004ed2:	f7fc fff1 	bl	8001eb8 <HAL_GetTickPrio>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fc fe77 	bl	8001bcc <HAL_InitTick>
 8004ede:	4603      	mov	r3, r0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	58004000 	.word	0x58004000
 8004eec:	20000028 	.word	0x20000028

08004ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef6:	f7ff f9be 	bl	8004276 <LL_RCC_GetSysClkSource>
 8004efa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f02:	f7ff f97a 	bl	80041fa <LL_RCC_MSI_GetRange>
 8004f06:	4603      	mov	r3, r0
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	4a2a      	ldr	r2, [pc, #168]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e04a      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f1e:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e044      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d10a      	bne.n	8004f40 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f2a:	f7fe ff93 	bl	8003e54 <LL_RCC_HSE_IsEnabledDiv2>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d102      	bne.n	8004f3a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e039      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f3a:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e036      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004f40:	f7ff faa2 	bl	8004488 <LL_RCC_PLL_GetMainSource>
 8004f44:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d002      	beq.n	8004f52 <HAL_RCC_GetSysClockFreq+0x62>
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0x68>
 8004f50:	e00d      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f52:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f54:	60bb      	str	r3, [r7, #8]
        break;
 8004f56:	e015      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f58:	f7fe ff7c 	bl	8003e54 <LL_RCC_HSE_IsEnabledDiv2>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f64:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f66:	e00d      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f6a:	60bb      	str	r3, [r7, #8]
        break;
 8004f6c:	e00a      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f6e:	f7ff f944 	bl	80041fa <LL_RCC_MSI_GetRange>
 8004f72:	4603      	mov	r3, r0
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	4a0f      	ldr	r2, [pc, #60]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f80:	60bb      	str	r3, [r7, #8]
        break;
 8004f82:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004f84:	f7ff fa5b 	bl	800443e <LL_RCC_PLL_GetN>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	fb03 f402 	mul.w	r4, r3, r2
 8004f90:	f7ff fa6e 	bl	8004470 <LL_RCC_PLL_GetDivider>
 8004f94:	4603      	mov	r3, r0
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	3301      	adds	r3, #1
 8004f9a:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f9e:	f7ff fa5b 	bl	8004458 <LL_RCC_PLL_GetR>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	0f5b      	lsrs	r3, r3, #29
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	fbb4 f3f3 	udiv	r3, r4, r3
 8004fac:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004fae:	68fb      	ldr	r3, [r7, #12]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd90      	pop	{r4, r7, pc}
 8004fb8:	08010cb4 	.word	0x08010cb4
 8004fbc:	00f42400 	.word	0x00f42400
 8004fc0:	01e84800 	.word	0x01e84800

08004fc4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc4:	b598      	push	{r3, r4, r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004fc8:	f7ff ff92 	bl	8004ef0 <HAL_RCC_GetSysClockFreq>
 8004fcc:	4604      	mov	r4, r0
 8004fce:	f7ff f9c7 	bl	8004360 <LL_RCC_GetAHBPrescaler>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	4a03      	ldr	r2, [pc, #12]	; (8004fe8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd98      	pop	{r3, r4, r7, pc}
 8004fe8:	08010c54 	.word	0x08010c54

08004fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fec:	b598      	push	{r3, r4, r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004ff0:	f7ff ffe8 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	f7ff f9e6 	bl	80043c6 <LL_RCC_GetAPB2Prescaler>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	0adb      	lsrs	r3, r3, #11
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	4a04      	ldr	r2, [pc, #16]	; (8005014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd98      	pop	{r3, r4, r7, pc}
 8005014:	08010c94 	.word	0x08010c94

08005018 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	226f      	movs	r2, #111	; 0x6f
 8005026:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005028:	f7ff f925 	bl	8004276 <LL_RCC_GetSysClkSource>
 800502c:	4602      	mov	r2, r0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005032:	f7ff f995 	bl	8004360 <LL_RCC_GetAHBPrescaler>
 8005036:	4602      	mov	r2, r0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800503c:	f7ff f9b7 	bl	80043ae <LL_RCC_GetAPB1Prescaler>
 8005040:	4602      	mov	r2, r0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005046:	f7ff f9be 	bl	80043c6 <LL_RCC_GetAPB2Prescaler>
 800504a:	4602      	mov	r2, r0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005050:	f7ff f992 	bl	8004378 <LL_C2_RCC_GetAHBPrescaler>
 8005054:	4602      	mov	r2, r0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800505a:	f7ff f99a 	bl	8004392 <LL_RCC_GetAHB4Prescaler>
 800505e:	4602      	mov	r2, r0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005064:	4b04      	ldr	r3, [pc, #16]	; (8005078 <HAL_RCC_GetClockConfig+0x60>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0207 	and.w	r2, r3, #7
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	601a      	str	r2, [r3, #0]
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	58004000 	.word	0x58004000

0800507c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2bb0      	cmp	r3, #176	; 0xb0
 8005088:	d903      	bls.n	8005092 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e007      	b.n	80050a2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800509c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80050a2:	f7ff f976 	bl	8004392 <LL_RCC_GetAHB4Prescaler>
 80050a6:	4603      	mov	r3, r0
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	4a0d      	ldr	r2, [pc, #52]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80050b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a0a      	ldr	r2, [pc, #40]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	0c9c      	lsrs	r4, r3, #18
 80050c6:	f7fe fea7 	bl	8003e18 <HAL_PWREx_GetVoltageRange>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4619      	mov	r1, r3
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 f80c 	bl	80050ec <RCC_SetFlashLatency>
 80050d4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd90      	pop	{r4, r7, pc}
 80050de:	bf00      	nop
 80050e0:	08010cb4 	.word	0x08010cb4
 80050e4:	08010c54 	.word	0x08010c54
 80050e8:	431bde83 	.word	0x431bde83

080050ec <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b093      	sub	sp, #76	; 0x4c
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80050f6:	4b39      	ldr	r3, [pc, #228]	; (80051dc <RCC_SetFlashLatency+0xf0>)
 80050f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80050fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005102:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <RCC_SetFlashLatency+0xf4>)
 8005104:	f107 031c 	add.w	r3, r7, #28
 8005108:	ca07      	ldmia	r2, {r0, r1, r2}
 800510a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800510e:	4b35      	ldr	r3, [pc, #212]	; (80051e4 <RCC_SetFlashLatency+0xf8>)
 8005110:	f107 040c 	add.w	r4, r7, #12
 8005114:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005116:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800511a:	2300      	movs	r3, #0
 800511c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005124:	d11c      	bne.n	8005160 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005126:	2300      	movs	r3, #0
 8005128:	643b      	str	r3, [r7, #64]	; 0x40
 800512a:	e015      	b.n	8005158 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800512c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005134:	4413      	add	r3, r2
 8005136:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d808      	bhi.n	8005152 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005148:	4413      	add	r3, r2
 800514a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800514e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005150:	e022      	b.n	8005198 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005154:	3301      	adds	r3, #1
 8005156:	643b      	str	r3, [r7, #64]	; 0x40
 8005158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515a:	2b03      	cmp	r3, #3
 800515c:	d9e6      	bls.n	800512c <RCC_SetFlashLatency+0x40>
 800515e:	e01b      	b.n	8005198 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005160:	2300      	movs	r3, #0
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005164:	e015      	b.n	8005192 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800516e:	4413      	add	r3, r2
 8005170:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d808      	bhi.n	800518c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800517a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005182:	4413      	add	r3, r2
 8005184:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005188:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800518a:	e005      	b.n	8005198 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518e:	3301      	adds	r3, #1
 8005190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005194:	2b02      	cmp	r3, #2
 8005196:	d9e6      	bls.n	8005166 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005198:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <RCC_SetFlashLatency+0xfc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 0207 	bic.w	r2, r3, #7
 80051a0:	4911      	ldr	r1, [pc, #68]	; (80051e8 <RCC_SetFlashLatency+0xfc>)
 80051a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a4:	4313      	orrs	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051a8:	f7fc fe7a 	bl	8001ea0 <HAL_GetTick>
 80051ac:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80051ae:	e008      	b.n	80051c2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80051b0:	f7fc fe76 	bl	8001ea0 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e007      	b.n	80051d2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <RCC_SetFlashLatency+0xfc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d1ef      	bne.n	80051b0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	374c      	adds	r7, #76	; 0x4c
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}
 80051da:	bf00      	nop
 80051dc:	080108cc 	.word	0x080108cc
 80051e0:	080108dc 	.word	0x080108dc
 80051e4:	080108e8 	.word	0x080108e8
 80051e8:	58004000 	.word	0x58004000

080051ec <LL_RCC_LSE_IsEnabled>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80051f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <LL_RCC_LSE_IsEnabled+0x18>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <LL_RCC_LSE_IsEnabled+0x1a>
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_RCC_LSE_IsReady>:
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d101      	bne.n	8005228 <LL_RCC_LSE_IsReady+0x18>
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <LL_RCC_LSE_IsReady+0x1a>
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <LL_RCC_MSI_EnablePLLMode>:
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005242:	f043 0304 	orr.w	r3, r3, #4
 8005246:	6013      	str	r3, [r2, #0]
}
 8005248:	bf00      	nop
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <LL_RCC_SetRFWKPClockSource>:
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800525a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005262:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <LL_RCC_SetSMPSClockSource>:
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f023 0203 	bic.w	r2, r3, #3
 8005290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4313      	orrs	r3, r2
 8005298:	624b      	str	r3, [r1, #36]	; 0x24
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_SetSMPSPrescaler>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4313      	orrs	r3, r2
 80052c0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <LL_RCC_SetUSARTClockSource>:
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	f023 0203 	bic.w	r2, r3, #3
 80052e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_RCC_SetLPUARTClockSource>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800530e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <LL_RCC_SetI2CClockSource>:
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005332:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800533e:	43db      	mvns	r3, r3
 8005340:	401a      	ands	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800534a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <LL_RCC_SetLPTIMClockSource>:
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	43db      	mvns	r3, r3
 8005378:	401a      	ands	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <LL_RCC_SetSAIClockSource>:
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800539c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <LL_RCC_SetRNGClockSource>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80053d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <LL_RCC_SetCLK48ClockSource>:
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80053f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <LL_RCC_SetUSBClockSource>:
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ffe3 	bl	80053ec <LL_RCC_SetCLK48ClockSource>
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <LL_RCC_SetADCClockSource>:
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <LL_RCC_SetRTCClockSource>:
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800546e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <LL_RCC_GetRTCClockSource>:
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005496:	4618      	mov	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <LL_RCC_ForceBackupDomainReset>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80054c2:	b480      	push	{r7}
 80054c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054da:	bf00      	nop
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <LL_RCC_PLLSAI1_Enable>:
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80054e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054f6:	6013      	str	r3, [r2, #0]
}
 80054f8:	bf00      	nop
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <LL_RCC_PLLSAI1_Disable>:
{
 8005502:	b480      	push	{r7}
 8005504:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005510:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005514:	6013      	str	r3, [r2, #0]
}
 8005516:	bf00      	nop
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LL_RCC_PLLSAI1_IsReady>:
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800552e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005532:	d101      	bne.n	8005538 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800554c:	2300      	movs	r3, #0
 800554e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005550:	2300      	movs	r3, #0
 8005552:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d033      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005568:	d00c      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800556a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556e:	d802      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d010      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005574:	e017      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800557a:	d017      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 800557c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005580:	d016      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005582:	e010      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800558e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005592:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005594:	e00d      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3304      	adds	r3, #4
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f94d 	bl	800583a <RCCEx_PLLSAI1_ConfigNP>
 80055a0:	4603      	mov	r3, r0
 80055a2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055a4:	e005      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	77fb      	strb	r3, [r7, #31]
        break;
 80055aa:	e002      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80055b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b2:	7ffb      	ldrb	r3, [r7, #31]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff fee9 	bl	8005394 <LL_RCC_SetSAIClockSource>
 80055c2:	e001      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c4:	7ffb      	ldrb	r3, [r7, #31]
 80055c6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d046      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80055d4:	f7ff ff57 	bl	8005486 <LL_RCC_GetRTCClockSource>
 80055d8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d03c      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80055e4:	f7fe fc08 	bl	8003df8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d105      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff ff31 	bl	800545a <LL_RCC_SetRTCClockSource>
 80055f8:	e02e      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005604:	f7ff ff4c 	bl	80054a0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005608:	f7ff ff5b 	bl	80054c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800561a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005624:	f7ff fde2 	bl	80051ec <LL_RCC_LSE_IsEnabled>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d114      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800562e:	f7fc fc37 	bl	8001ea0 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005634:	e00b      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fc fc33 	bl	8001ea0 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	4293      	cmp	r3, r2
 8005646:	d902      	bls.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	77fb      	strb	r3, [r7, #31]
              break;
 800564c:	e004      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800564e:	f7ff fddf 	bl	8005210 <LL_RCC_LSE_IsReady>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d1ee      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005658:	7ffb      	ldrb	r3, [r7, #31]
 800565a:	77bb      	strb	r3, [r7, #30]
 800565c:	e001      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	7ffb      	ldrb	r3, [r7, #31]
 8005660:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fe2b 	bl	80052ce <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fe36 	bl	80052fa <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fe5e 	bl	8005360 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fe53 	bl	8005360 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fe2b 	bl	8005326 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fe20 	bl	8005326 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d022      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fe8e 	bl	8005418 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005704:	d107      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005710:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005714:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800571e:	d10b      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3304      	adds	r3, #4
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f8e3 	bl	80058f0 <RCCEx_PLLSAI1_ConfigNQ>
 800572a:	4603      	mov	r3, r0
 800572c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800572e:	7ffb      	ldrb	r3, [r7, #31]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8005734:	7ffb      	ldrb	r3, [r7, #31]
 8005736:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005740:	2b00      	cmp	r3, #0
 8005742:	d02b      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574c:	d008      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005756:	d003      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fe2b 	bl	80053c0 <LL_RCC_SetRNGClockSource>
 800576a:	e00a      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	2000      	movs	r0, #0
 8005778:	f7ff fe22 	bl	80053c0 <LL_RCC_SetRNGClockSource>
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fe35 	bl	80053ec <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800578a:	d107      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800578c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800579a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d022      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fe3e 	bl	800542e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ba:	d107      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ca:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d4:	d10b      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f8e3 	bl	80059a6 <RCCEx_PLLSAI1_ConfigNR>
 80057e0:	4603      	mov	r3, r0
 80057e2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80057e4:	7ffb      	ldrb	r3, [r7, #31]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80057ea:	7ffb      	ldrb	r3, [r7, #31]
 80057ec:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fd27 	bl	8005252 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fd46 	bl	80052a6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fd2d 	bl	800527e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005824:	7fbb      	ldrb	r3, [r7, #30]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005832:	f7ff fcff 	bl	8005234 <LL_RCC_MSI_EnablePLLMode>
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}

0800583a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005846:	f7ff fe5c 	bl	8005502 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800584a:	f7fc fb29 	bl	8001ea0 <HAL_GetTick>
 800584e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005850:	e009      	b.n	8005866 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005852:	f7fc fb25 	bl	8001ea0 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d902      	bls.n	8005866 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	73fb      	strb	r3, [r7, #15]
      break;
 8005864:	e004      	b.n	8005870 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005866:	f7ff fe5b 	bl	8005520 <LL_RCC_PLLSAI1_IsReady>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1f0      	bne.n	8005852 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d137      	bne.n	80058e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800588a:	4313      	orrs	r3, r2
 800588c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800588e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058a0:	4313      	orrs	r3, r2
 80058a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058a4:	f7ff fe1e 	bl	80054e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a8:	f7fc fafa 	bl	8001ea0 <HAL_GetTick>
 80058ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058ae:	e009      	b.n	80058c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058b0:	f7fc faf6 	bl	8001ea0 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d902      	bls.n	80058c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	73fb      	strb	r3, [r7, #15]
        break;
 80058c2:	e004      	b.n	80058ce <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058c4:	f7ff fe2c 	bl	8005520 <LL_RCC_PLLSAI1_IsReady>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d1f0      	bne.n	80058b0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058e2:	4313      	orrs	r3, r2
 80058e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80058fc:	f7ff fe01 	bl	8005502 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005900:	f7fc face 	bl	8001ea0 <HAL_GetTick>
 8005904:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005906:	e009      	b.n	800591c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005908:	f7fc faca 	bl	8001ea0 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d902      	bls.n	800591c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	73fb      	strb	r3, [r7, #15]
      break;
 800591a:	e004      	b.n	8005926 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800591c:	f7ff fe00 	bl	8005520 <LL_RCC_PLLSAI1_IsReady>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d137      	bne.n	800599c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800592c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005940:	4313      	orrs	r3, r2
 8005942:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005956:	4313      	orrs	r3, r2
 8005958:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800595a:	f7ff fdc3 	bl	80054e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595e:	f7fc fa9f 	bl	8001ea0 <HAL_GetTick>
 8005962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005964:	e009      	b.n	800597a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005966:	f7fc fa9b 	bl	8001ea0 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d902      	bls.n	800597a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	73fb      	strb	r3, [r7, #15]
        break;
 8005978:	e004      	b.n	8005984 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800597a:	f7ff fdd1 	bl	8005520 <LL_RCC_PLLSAI1_IsReady>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d1f0      	bne.n	8005966 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d108      	bne.n	800599c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005998:	4313      	orrs	r3, r2
 800599a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80059b2:	f7ff fda6 	bl	8005502 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059b6:	f7fc fa73 	bl	8001ea0 <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059bc:	e009      	b.n	80059d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059be:	f7fc fa6f 	bl	8001ea0 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d902      	bls.n	80059d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	73fb      	strb	r3, [r7, #15]
      break;
 80059d0:	e004      	b.n	80059dc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059d2:	f7ff fda5 	bl	8005520 <LL_RCC_PLLSAI1_IsReady>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f0      	bne.n	80059be <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d137      	bne.n	8005a52 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059f6:	4313      	orrs	r3, r2
 80059f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80059fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a10:	f7ff fd68 	bl	80054e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a14:	f7fc fa44 	bl	8001ea0 <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a1a:	e009      	b.n	8005a30 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a1c:	f7fc fa40 	bl	8001ea0 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d902      	bls.n	8005a30 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a2e:	e004      	b.n	8005a3a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a30:	f7ff fd76 	bl	8005520 <LL_RCC_PLLSAI1_IsReady>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d1f0      	bne.n	8005a1c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d108      	bne.n	8005a52 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e090      	b.n	8005b90 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fb ff26 	bl	80018d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	22ca      	movs	r2, #202	; 0xca
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2253      	movs	r2, #83	; 0x53
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f89f 	bl	8005be4 <RTC_EnterInitMode>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d009      	beq.n	8005ac0 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2204      	movs	r2, #4
 8005ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e067      	b.n	8005b90 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6899      	ldr	r1, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6919      	ldr	r1, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	041a      	lsls	r2, r3, #16
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b1e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0203 	bic.w	r2, r2, #3
 8005b2e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69da      	ldr	r2, [r3, #28]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d113      	bne.n	8005b7e <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f81e 	bl	8005b98 <HAL_RTC_WaitForSynchro>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00d      	beq.n	8005b7e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	22ff      	movs	r2, #255	; 0xff
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e008      	b.n	8005b90 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	22ff      	movs	r2, #255	; 0xff
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
  }
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005bb0:	f7fc f976 	bl	8001ea0 <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bb6:	e009      	b.n	8005bcc <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bb8:	f7fc f972 	bl	8001ea0 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bc6:	d901      	bls.n	8005bcc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e007      	b.n	8005bdc <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0ee      	beq.n	8005bb8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d119      	bne.n	8005c2e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005c02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c04:	f7fc f94c 	bl	8001ea0 <HAL_GetTick>
 8005c08:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c0a:	e009      	b.n	8005c20 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c0c:	f7fc f948 	bl	8001ea0 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c1a:	d901      	bls.n	8005c20 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e007      	b.n	8005c30 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0ee      	beq.n	8005c0c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e049      	b.n	8005cde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f841 	bl	8005ce6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	f000 f9d6 	bl	8006028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d001      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e036      	b.n	8005d82 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a17      	ldr	r2, [pc, #92]	; (8005d90 <HAL_TIM_Base_Start_IT+0x94>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x44>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d115      	bne.n	8005d6c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <HAL_TIM_Base_Start_IT+0x98>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b06      	cmp	r3, #6
 8005d50:	d015      	beq.n	8005d7e <HAL_TIM_Base_Start_IT+0x82>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d58:	d011      	beq.n	8005d7e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0201 	orr.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6a:	e008      	b.n	8005d7e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e000      	b.n	8005d80 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	00010007 	.word	0x00010007

08005d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d122      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d11b      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0202 	mvn.w	r2, #2
 8005dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f905 	bl	8005fea <HAL_TIM_IC_CaptureCallback>
 8005de0:	e005      	b.n	8005dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f8f7 	bl	8005fd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f908 	bl	8005ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d122      	bne.n	8005e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d11b      	bne.n	8005e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0204 	mvn.w	r2, #4
 8005e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8db 	bl	8005fea <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f8cd 	bl	8005fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f8de 	bl	8005ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0208 	mvn.w	r2, #8
 8005e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2204      	movs	r2, #4
 8005e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f8b1 	bl	8005fea <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f8a3 	bl	8005fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8b4 	bl	8005ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b10      	cmp	r3, #16
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0210 	mvn.w	r2, #16
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f887 	bl	8005fea <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f879 	bl	8005fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f88a 	bl	8005ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d10e      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d107      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0201 	mvn.w	r2, #1
 8005f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fb fb1a 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f26:	2b80      	cmp	r3, #128	; 0x80
 8005f28:	d10e      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f34:	2b80      	cmp	r3, #128	; 0x80
 8005f36:	d107      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f8de 	bl	8006104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f56:	d10e      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f8d1 	bl	8006118 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b40      	cmp	r3, #64	; 0x40
 8005f82:	d10e      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b40      	cmp	r3, #64	; 0x40
 8005f90:	d107      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f838 	bl	8006012 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d10e      	bne.n	8005fce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d107      	bne.n	8005fce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f06f 0220 	mvn.w	r2, #32
 8005fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f891 	bl	80060f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <TIM_Base_SetConfig+0xbc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d003      	beq.n	8006048 <TIM_Base_SetConfig+0x20>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006046:	d108      	bne.n	800605a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a21      	ldr	r2, [pc, #132]	; (80060e4 <TIM_Base_SetConfig+0xbc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00b      	beq.n	800607a <TIM_Base_SetConfig+0x52>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006068:	d007      	beq.n	800607a <TIM_Base_SetConfig+0x52>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <TIM_Base_SetConfig+0xc0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d003      	beq.n	800607a <TIM_Base_SetConfig+0x52>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <TIM_Base_SetConfig+0xc4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d108      	bne.n	800608c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a0c      	ldr	r2, [pc, #48]	; (80060e4 <TIM_Base_SetConfig+0xbc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_Base_SetConfig+0xa0>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a0b      	ldr	r2, [pc, #44]	; (80060e8 <TIM_Base_SetConfig+0xc0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0xa0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a0a      	ldr	r2, [pc, #40]	; (80060ec <TIM_Base_SetConfig+0xc4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d103      	bne.n	80060d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	615a      	str	r2, [r3, #20]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800

080060f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006134:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006138:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	b29b      	uxth	r3, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	b29a      	uxth	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006166:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800616a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	b29b      	uxth	r3, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	b29b      	uxth	r3, r3
 800617c:	4013      	ands	r3, r2
 800617e:	b29a      	uxth	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006194:	b084      	sub	sp, #16
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	f107 0014 	add.w	r0, r7, #20
 80061a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff ffb0 	bl	800612c <USB_EnableGlobalInt>

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061d8:	b004      	add	sp, #16
 80061da:	4770      	bx	lr

080061dc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061dc:	b480      	push	{r7}
 80061de:	b09d      	sub	sp, #116	; 0x74
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80061fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006202:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	78db      	ldrb	r3, [r3, #3]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d81f      	bhi.n	800624e <USB_ActivateEndpoint+0x72>
 800620e:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <USB_ActivateEndpoint+0x38>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006225 	.word	0x08006225
 8006218:	08006241 	.word	0x08006241
 800621c:	08006257 	.word	0x08006257
 8006220:	08006233 	.word	0x08006233
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006224:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800622c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006230:	e012      	b.n	8006258 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006232:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006236:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800623a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800623e:	e00b      	b.n	8006258 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006240:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006244:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006248:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800624c:	e004      	b.n	8006258 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006254:	e000      	b.n	8006258 <USB_ActivateEndpoint+0x7c>
      break;
 8006256:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	b21b      	sxth	r3, r3
 800628a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	b21a      	sxth	r2, r3
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	b21b      	sxth	r3, r3
 800629a:	4313      	orrs	r3, r2
 800629c:	b21b      	sxth	r3, r3
 800629e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	441a      	add	r2, r3
 80062ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80062b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	7b1b      	ldrb	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f040 8149 	bne.w	8006560 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 8084 	beq.w	80063e0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	4413      	add	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	00da      	lsls	r2, r3, #3
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	88db      	ldrh	r3, [r3, #6]
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	b29b      	uxth	r3, r3
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	827b      	strh	r3, [r7, #18]
 800631a:	8a7b      	ldrh	r3, [r7, #18]
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01b      	beq.n	800635c <USB_ActivateEndpoint+0x180>
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	823b      	strh	r3, [r7, #16]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	441a      	add	r2, r3
 8006346:	8a3b      	ldrh	r3, [r7, #16]
 8006348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006354:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006358:	b29b      	uxth	r3, r3
 800635a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	78db      	ldrb	r3, [r3, #3]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d020      	beq.n	80063a6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637a:	81bb      	strh	r3, [r7, #12]
 800637c:	89bb      	ldrh	r3, [r7, #12]
 800637e:	f083 0320 	eor.w	r3, r3, #32
 8006382:	81bb      	strh	r3, [r7, #12]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	441a      	add	r2, r3
 800638e:	89bb      	ldrh	r3, [r7, #12]
 8006390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	8013      	strh	r3, [r2, #0]
 80063a4:	e2bf      	b.n	8006926 <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063bc:	81fb      	strh	r3, [r7, #14]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	89fb      	ldrh	r3, [r7, #14]
 80063ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063da:	b29b      	uxth	r3, r3
 80063dc:	8013      	strh	r3, [r2, #0]
 80063de:	e2a2      	b.n	8006926 <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	633b      	str	r3, [r7, #48]	; 0x30
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	4413      	add	r3, r2
 80063f2:	633b      	str	r3, [r7, #48]	; 0x30
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	00da      	lsls	r2, r3, #3
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	4413      	add	r3, r2
 80063fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	88db      	ldrh	r3, [r3, #6]
 8006408:	085b      	lsrs	r3, r3, #1
 800640a:	b29b      	uxth	r3, r3
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800641e:	b29b      	uxth	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	4413      	add	r3, r2
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	00da      	lsls	r2, r3, #3
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	4413      	add	r3, r2
 8006432:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d112      	bne.n	8006466 <USB_ActivateEndpoint+0x28a>
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800644a:	b29a      	uxth	r2, r3
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645e:	b29a      	uxth	r2, r3
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	e02f      	b.n	80064c6 <USB_ActivateEndpoint+0x2ea>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b3e      	cmp	r3, #62	; 0x3e
 800646c:	d813      	bhi.n	8006496 <USB_ActivateEndpoint+0x2ba>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	66bb      	str	r3, [r7, #104]	; 0x68
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <USB_ActivateEndpoint+0x2ac>
 8006482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006484:	3301      	adds	r3, #1
 8006486:	66bb      	str	r3, [r7, #104]	; 0x68
 8006488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800648a:	b29b      	uxth	r3, r3
 800648c:	029b      	lsls	r3, r3, #10
 800648e:	b29a      	uxth	r2, r3
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	e017      	b.n	80064c6 <USB_ActivateEndpoint+0x2ea>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	66bb      	str	r3, [r7, #104]	; 0x68
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <USB_ActivateEndpoint+0x2d4>
 80064aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ac:	3b01      	subs	r3, #1
 80064ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80064b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80064d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01b      	beq.n	8006516 <USB_ActivateEndpoint+0x33a>
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f4:	843b      	strh	r3, [r7, #32]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	441a      	add	r2, r3
 8006500:	8c3b      	ldrh	r3, [r7, #32]
 8006502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800650a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800650e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006512:	b29b      	uxth	r3, r3
 8006514:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652c:	83fb      	strh	r3, [r7, #30]
 800652e:	8bfb      	ldrh	r3, [r7, #30]
 8006530:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006534:	83fb      	strh	r3, [r7, #30]
 8006536:	8bfb      	ldrh	r3, [r7, #30]
 8006538:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800653c:	83fb      	strh	r3, [r7, #30]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	8bfb      	ldrh	r3, [r7, #30]
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]
 800655e:	e1e2      	b.n	8006926 <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006576:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	441a      	add	r2, r3
 8006584:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006590:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006598:	b29b      	uxth	r3, r3
 800659a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	663b      	str	r3, [r7, #96]	; 0x60
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ac:	4413      	add	r3, r2
 80065ae:	663b      	str	r3, [r7, #96]	; 0x60
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	00da      	lsls	r2, r3, #3
 80065b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	891b      	ldrh	r3, [r3, #8]
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065e0:	4413      	add	r3, r2
 80065e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	00da      	lsls	r2, r3, #3
 80065ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ec:	4413      	add	r3, r2
 80065ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065f2:	657b      	str	r3, [r7, #84]	; 0x54
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	895b      	ldrh	r3, [r3, #10]
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006602:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 80b1 	bne.w	8006770 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800661e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01d      	beq.n	8006666 <USB_ActivateEndpoint+0x48a>
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006640:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800665a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800665e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006674:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d01b      	beq.n	80066b6 <USB_ActivateEndpoint+0x4da>
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006694:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80066a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066cc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	441a      	add	r2, r3
 80066d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	873b      	strh	r3, [r7, #56]	; 0x38
 8006706:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800670c:	873b      	strh	r3, [r7, #56]	; 0x38
 800670e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006710:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006714:	873b      	strh	r3, [r7, #56]	; 0x38
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800675a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	b29b      	uxth	r3, r3
 800676c:	8013      	strh	r3, [r2, #0]
 800676e:	e0da      	b.n	8006926 <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006780:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01d      	beq.n	80067c8 <USB_ActivateEndpoint+0x5ec>
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	441a      	add	r2, r3
 80067b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80067b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80067d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01d      	beq.n	8006820 <USB_ActivateEndpoint+0x644>
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	441a      	add	r2, r3
 8006808:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800680c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800681c:	b29b      	uxth	r3, r3
 800681e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006836:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	441a      	add	r2, r3
 8006844:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006858:	b29b      	uxth	r3, r3
 800685a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	78db      	ldrb	r3, [r3, #3]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d024      	beq.n	80068ae <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800687e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006882:	f083 0320 	eor.w	r3, r3, #32
 8006886:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	441a      	add	r2, r3
 8006894:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8013      	strh	r3, [r2, #0]
 80068ac:	e01d      	b.n	80068ea <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006900:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	441a      	add	r2, r3
 800690e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800691e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006922:	b29b      	uxth	r3, r3
 8006924:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006926:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800692a:	4618      	mov	r0, r3
 800692c:	3774      	adds	r7, #116	; 0x74
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop

08006938 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006938:	b480      	push	{r7}
 800693a:	b08d      	sub	sp, #52	; 0x34
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	7b1b      	ldrb	r3, [r3, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f040 808e 	bne.w	8006a68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d044      	beq.n	80069de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	81bb      	strh	r3, [r7, #12]
 8006962:	89bb      	ldrh	r3, [r7, #12]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01b      	beq.n	80069a4 <USB_DeactivateEndpoint+0x6c>
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006982:	817b      	strh	r3, [r7, #10]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	441a      	add	r2, r3
 800698e:	897b      	ldrh	r3, [r7, #10]
 8006990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ba:	813b      	strh	r3, [r7, #8]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	893b      	ldrh	r3, [r7, #8]
 80069c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]
 80069dc:	e192      	b.n	8006d04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	827b      	strh	r3, [r7, #18]
 80069ec:	8a7b      	ldrh	r3, [r7, #18]
 80069ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d01b      	beq.n	8006a2e <USB_DeactivateEndpoint+0xf6>
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	823b      	strh	r3, [r7, #16]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	441a      	add	r2, r3
 8006a18:	8a3b      	ldrh	r3, [r7, #16]
 8006a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a44:	81fb      	strh	r3, [r7, #14]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	441a      	add	r2, r3
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	8013      	strh	r3, [r2, #0]
 8006a66:	e14d      	b.n	8006d04 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f040 80a5 	bne.w	8006bbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	843b      	strh	r3, [r7, #32]
 8006a80:	8c3b      	ldrh	r3, [r7, #32]
 8006a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01b      	beq.n	8006ac2 <USB_DeactivateEndpoint+0x18a>
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa0:	83fb      	strh	r3, [r7, #30]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	8bfb      	ldrh	r3, [r7, #30]
 8006aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	83bb      	strh	r3, [r7, #28]
 8006ad0:	8bbb      	ldrh	r3, [r7, #28]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01b      	beq.n	8006b12 <USB_DeactivateEndpoint+0x1da>
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af0:	837b      	strh	r3, [r7, #26]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	441a      	add	r2, r3
 8006afc:	8b7b      	ldrh	r3, [r7, #26]
 8006afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b28:	833b      	strh	r3, [r7, #24]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	441a      	add	r2, r3
 8006b34:	8b3b      	ldrh	r3, [r7, #24]
 8006b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	82fb      	strh	r3, [r7, #22]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	8afb      	ldrh	r3, [r7, #22]
 8006b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b98:	82bb      	strh	r3, [r7, #20]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	441a      	add	r2, r3
 8006ba4:	8abb      	ldrh	r3, [r7, #20]
 8006ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	8013      	strh	r3, [r2, #0]
 8006bba:	e0a3      	b.n	8006d04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006bca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01b      	beq.n	8006c0c <USB_DeactivateEndpoint+0x2d4>
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	441a      	add	r2, r3
 8006bf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01b      	beq.n	8006c5c <USB_DeactivateEndpoint+0x324>
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	441a      	add	r2, r3
 8006c46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	441a      	add	r2, r3
 8006c7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006caa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce2:	847b      	strh	r3, [r7, #34]	; 0x22
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	441a      	add	r2, r3
 8006cee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3734      	adds	r7, #52	; 0x34
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b0a0      	sub	sp, #128	; 0x80
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f040 81a1 	bne.w	8007068 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d909      	bls.n	8006d46 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	619a      	str	r2, [r3, #24]
 8006d44:	e005      	b.n	8006d52 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	7b1b      	ldrb	r3, [r3, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d11f      	bne.n	8006d9a <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6959      	ldr	r1, [r3, #20]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	88da      	ldrh	r2, [r3, #6]
 8006d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fc3f 	bl	80075ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	00da      	lsls	r2, r3, #3
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e141      	b.n	800701e <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d076      	beq.n	8006e9e <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d153      	bne.n	8006e64 <USB_EPStartXfer+0x152>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	61fb      	str	r3, [r7, #28]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	00da      	lsls	r2, r3, #3
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d112      	bne.n	8006e0c <USB_EPStartXfer+0xfa>
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	801a      	strh	r2, [r3, #0]
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	801a      	strh	r2, [r3, #0]
 8006e0a:	e043      	b.n	8006e94 <USB_EPStartXfer+0x182>
 8006e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e10:	d811      	bhi.n	8006e36 <USB_EPStartXfer+0x124>
 8006e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	677b      	str	r3, [r7, #116]	; 0x74
 8006e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <USB_EPStartXfer+0x116>
 8006e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e24:	3301      	adds	r3, #1
 8006e26:	677b      	str	r3, [r7, #116]	; 0x74
 8006e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	029b      	lsls	r3, r3, #10
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	e02e      	b.n	8006e94 <USB_EPStartXfer+0x182>
 8006e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	677b      	str	r3, [r7, #116]	; 0x74
 8006e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e3e:	f003 031f 	and.w	r3, r3, #31
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d102      	bne.n	8006e4c <USB_EPStartXfer+0x13a>
 8006e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	677b      	str	r3, [r7, #116]	; 0x74
 8006e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	029b      	lsls	r3, r3, #10
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	e017      	b.n	8006e94 <USB_EPStartXfer+0x182>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d113      	bne.n	8006e94 <USB_EPStartXfer+0x182>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	4413      	add	r3, r2
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	00da      	lsls	r2, r3, #3
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	4413      	add	r3, r2
 8006e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e8a:	623b      	str	r3, [r7, #32]
 8006e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	895b      	ldrh	r3, [r3, #10]
 8006e98:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8006e9c:	e075      	b.n	8006f8a <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d153      	bne.n	8006f4e <USB_EPStartXfer+0x23c>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	4413      	add	r3, r2
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	00da      	lsls	r2, r3, #3
 8006ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d112      	bne.n	8006ef6 <USB_EPStartXfer+0x1e4>
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	801a      	strh	r2, [r3, #0]
 8006ef4:	e045      	b.n	8006f82 <USB_EPStartXfer+0x270>
 8006ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8006efa:	d811      	bhi.n	8006f20 <USB_EPStartXfer+0x20e>
 8006efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006efe:	085b      	lsrs	r3, r3, #1
 8006f00:	673b      	str	r3, [r7, #112]	; 0x70
 8006f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <USB_EPStartXfer+0x200>
 8006f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f0e:	3301      	adds	r3, #1
 8006f10:	673b      	str	r3, [r7, #112]	; 0x70
 8006f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	029b      	lsls	r3, r3, #10
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	e030      	b.n	8006f82 <USB_EPStartXfer+0x270>
 8006f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	673b      	str	r3, [r7, #112]	; 0x70
 8006f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <USB_EPStartXfer+0x224>
 8006f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f32:	3b01      	subs	r3, #1
 8006f34:	673b      	str	r3, [r7, #112]	; 0x70
 8006f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	029b      	lsls	r3, r3, #10
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e019      	b.n	8006f82 <USB_EPStartXfer+0x270>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	785b      	ldrb	r3, [r3, #1]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d115      	bne.n	8006f82 <USB_EPStartXfer+0x270>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f66:	4413      	add	r3, r2
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	00da      	lsls	r2, r3, #3
 8006f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f72:	4413      	add	r3, r2
 8006f74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f78:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	891b      	ldrh	r3, [r3, #8]
 8006f86:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6959      	ldr	r1, [r3, #20]
 8006f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fb27 	bl	80075ea <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d11c      	bne.n	8006fde <USB_EPStartXfer+0x2cc>
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	82bb      	strh	r3, [r7, #20]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	441a      	add	r2, r3
 8006fc6:	8abb      	ldrh	r3, [r7, #20]
 8006fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	8013      	strh	r3, [r2, #0]
 8006fdc:	e01f      	b.n	800701e <USB_EPStartXfer+0x30c>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d11b      	bne.n	800701e <USB_EPStartXfer+0x30c>
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffc:	82fb      	strh	r3, [r7, #22]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	441a      	add	r2, r3
 8007008:	8afb      	ldrh	r3, [r7, #22]
 800700a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701a:	b29b      	uxth	r3, r3
 800701c:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007034:	817b      	strh	r3, [r7, #10]
 8007036:	897b      	ldrh	r3, [r7, #10]
 8007038:	f083 0310 	eor.w	r3, r3, #16
 800703c:	817b      	strh	r3, [r7, #10]
 800703e:	897b      	ldrh	r3, [r7, #10]
 8007040:	f083 0320 	eor.w	r3, r3, #32
 8007044:	817b      	strh	r3, [r7, #10]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	441a      	add	r2, r3
 8007050:	897b      	ldrh	r3, [r7, #10]
 8007052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]
 8007066:	e175      	b.n	8007354 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d909      	bls.n	8007088 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007080:	1ad2      	subs	r2, r2, r3
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	619a      	str	r2, [r3, #24]
 8007086:	e005      	b.n	8007094 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2200      	movs	r2, #0
 8007092:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	7b1b      	ldrb	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d153      	bne.n	8007144 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	643b      	str	r3, [r7, #64]	; 0x40
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ac:	4413      	add	r3, r2
 80070ae:	643b      	str	r3, [r7, #64]	; 0x40
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	00da      	lsls	r2, r3, #3
 80070b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b8:	4413      	add	r3, r2
 80070ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d112      	bne.n	80070ec <USB_EPStartXfer+0x3da>
 80070c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	e10f      	b.n	800730c <USB_EPStartXfer+0x5fa>
 80070ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ee:	2b3e      	cmp	r3, #62	; 0x3e
 80070f0:	d811      	bhi.n	8007116 <USB_EPStartXfer+0x404>
 80070f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <USB_EPStartXfer+0x3f6>
 8007102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007104:	3301      	adds	r3, #1
 8007106:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710a:	b29b      	uxth	r3, r3
 800710c:	029b      	lsls	r3, r3, #10
 800710e:	b29a      	uxth	r2, r3
 8007110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	e0fa      	b.n	800730c <USB_EPStartXfer+0x5fa>
 8007116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800711c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <USB_EPStartXfer+0x41a>
 8007126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007128:	3b01      	subs	r3, #1
 800712a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800712c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712e:	b29b      	uxth	r3, r3
 8007130:	029b      	lsls	r3, r3, #10
 8007132:	b29b      	uxth	r3, r3
 8007134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713c:	b29a      	uxth	r2, r3
 800713e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	e0e3      	b.n	800730c <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d153      	bne.n	80071f4 <USB_EPStartXfer+0x4e2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800715c:	4413      	add	r3, r2
 800715e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	00da      	lsls	r2, r3, #3
 8007166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007168:	4413      	add	r3, r2
 800716a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800716e:	657b      	str	r3, [r7, #84]	; 0x54
 8007170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007172:	2b00      	cmp	r3, #0
 8007174:	d112      	bne.n	800719c <USB_EPStartXfer+0x48a>
 8007176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007180:	b29a      	uxth	r2, r3
 8007182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007184:	801a      	strh	r2, [r3, #0]
 8007186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007194:	b29a      	uxth	r2, r3
 8007196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	e045      	b.n	8007228 <USB_EPStartXfer+0x516>
 800719c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800719e:	2b3e      	cmp	r3, #62	; 0x3e
 80071a0:	d811      	bhi.n	80071c6 <USB_EPStartXfer+0x4b4>
 80071a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <USB_EPStartXfer+0x4a6>
 80071b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071b4:	3301      	adds	r3, #1
 80071b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	029b      	lsls	r3, r3, #10
 80071be:	b29a      	uxth	r2, r3
 80071c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	e030      	b.n	8007228 <USB_EPStartXfer+0x516>
 80071c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80071cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d102      	bne.n	80071dc <USB_EPStartXfer+0x4ca>
 80071d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071d8:	3b01      	subs	r3, #1
 80071da:	66bb      	str	r3, [r7, #104]	; 0x68
 80071dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071de:	b29b      	uxth	r3, r3
 80071e0:	029b      	lsls	r3, r3, #10
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	e019      	b.n	8007228 <USB_EPStartXfer+0x516>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d115      	bne.n	8007228 <USB_EPStartXfer+0x516>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	663b      	str	r3, [r7, #96]	; 0x60
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007206:	b29b      	uxth	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800720c:	4413      	add	r3, r2
 800720e:	663b      	str	r3, [r7, #96]	; 0x60
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	00da      	lsls	r2, r3, #3
 8007216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007218:	4413      	add	r3, r2
 800721a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800721e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007222:	b29a      	uxth	r2, r3
 8007224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	653b      	str	r3, [r7, #80]	; 0x50
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d153      	bne.n	80072dc <USB_EPStartXfer+0x5ca>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	64bb      	str	r3, [r7, #72]	; 0x48
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007244:	4413      	add	r3, r2
 8007246:	64bb      	str	r3, [r7, #72]	; 0x48
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	00da      	lsls	r2, r3, #3
 800724e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007250:	4413      	add	r3, r2
 8007252:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007256:	647b      	str	r3, [r7, #68]	; 0x44
 8007258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800725a:	2b00      	cmp	r3, #0
 800725c:	d112      	bne.n	8007284 <USB_EPStartXfer+0x572>
 800725e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007268:	b29a      	uxth	r2, r3
 800726a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800727c:	b29a      	uxth	r2, r3
 800727e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	e043      	b.n	800730c <USB_EPStartXfer+0x5fa>
 8007284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007286:	2b3e      	cmp	r3, #62	; 0x3e
 8007288:	d811      	bhi.n	80072ae <USB_EPStartXfer+0x59c>
 800728a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	667b      	str	r3, [r7, #100]	; 0x64
 8007290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <USB_EPStartXfer+0x58e>
 800729a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729c:	3301      	adds	r3, #1
 800729e:	667b      	str	r3, [r7, #100]	; 0x64
 80072a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	029b      	lsls	r3, r3, #10
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	e02e      	b.n	800730c <USB_EPStartXfer+0x5fa>
 80072ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	667b      	str	r3, [r7, #100]	; 0x64
 80072b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b6:	f003 031f 	and.w	r3, r3, #31
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d102      	bne.n	80072c4 <USB_EPStartXfer+0x5b2>
 80072be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c0:	3b01      	subs	r3, #1
 80072c2:	667b      	str	r3, [r7, #100]	; 0x64
 80072c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	029b      	lsls	r3, r3, #10
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	e017      	b.n	800730c <USB_EPStartXfer+0x5fa>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d113      	bne.n	800730c <USB_EPStartXfer+0x5fa>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f0:	4413      	add	r3, r2
 80072f2:	653b      	str	r3, [r7, #80]	; 0x50
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	00da      	lsls	r2, r3, #3
 80072fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072fc:	4413      	add	r3, r2
 80072fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007306:	b29a      	uxth	r2, r3
 8007308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007324:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007326:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800732a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800732c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800732e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007332:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	441a      	add	r2, r3
 800733e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007350:	b29b      	uxth	r3, r3
 8007352:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3780      	adds	r7, #128	; 0x80
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d020      	beq.n	80073b2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007386:	81bb      	strh	r3, [r7, #12]
 8007388:	89bb      	ldrh	r3, [r7, #12]
 800738a:	f083 0310 	eor.w	r3, r3, #16
 800738e:	81bb      	strh	r3, [r7, #12]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	441a      	add	r2, r3
 800739a:	89bb      	ldrh	r3, [r7, #12]
 800739c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	8013      	strh	r3, [r2, #0]
 80073b0:	e01f      	b.n	80073f2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c8:	81fb      	strh	r3, [r7, #14]
 80073ca:	89fb      	ldrh	r3, [r7, #14]
 80073cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073d0:	81fb      	strh	r3, [r7, #14]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	441a      	add	r2, r3
 80073dc:	89fb      	ldrh	r3, [r7, #14]
 80073de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	7b1b      	ldrb	r3, [r3, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f040 809d 	bne.w	800754e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	785b      	ldrb	r3, [r3, #1]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d04c      	beq.n	80074b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	823b      	strh	r3, [r7, #16]
 800742a:	8a3b      	ldrh	r3, [r7, #16]
 800742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01b      	beq.n	800746c <USB_EPClearStall+0x6c>
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744a:	81fb      	strh	r3, [r7, #14]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	441a      	add	r2, r3
 8007456:	89fb      	ldrh	r3, [r7, #14]
 8007458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007464:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007468:	b29b      	uxth	r3, r3
 800746a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	78db      	ldrb	r3, [r3, #3]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d06c      	beq.n	800754e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748a:	81bb      	strh	r3, [r7, #12]
 800748c:	89bb      	ldrh	r3, [r7, #12]
 800748e:	f083 0320 	eor.w	r3, r3, #32
 8007492:	81bb      	strh	r3, [r7, #12]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	441a      	add	r2, r3
 800749e:	89bb      	ldrh	r3, [r7, #12]
 80074a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	8013      	strh	r3, [r2, #0]
 80074b4:	e04b      	b.n	800754e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	82fb      	strh	r3, [r7, #22]
 80074c4:	8afb      	ldrh	r3, [r7, #22]
 80074c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01b      	beq.n	8007506 <USB_EPClearStall+0x106>
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e4:	82bb      	strh	r3, [r7, #20]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	441a      	add	r2, r3
 80074f0:	8abb      	ldrh	r3, [r7, #20]
 80074f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007502:	b29b      	uxth	r3, r3
 8007504:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751c:	827b      	strh	r3, [r7, #18]
 800751e:	8a7b      	ldrh	r3, [r7, #18]
 8007520:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007524:	827b      	strh	r3, [r7, #18]
 8007526:	8a7b      	ldrh	r3, [r7, #18]
 8007528:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800752c:	827b      	strh	r3, [r7, #18]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	441a      	add	r2, r3
 8007538:	8a7b      	ldrh	r3, [r7, #18]
 800753a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754a:	b29b      	uxth	r3, r3
 800754c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2280      	movs	r2, #128	; 0x80
 8007572:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007592:	b29b      	uxth	r3, r3
 8007594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80075c4:	68fb      	ldr	r3, [r7, #12]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b08d      	sub	sp, #52	; 0x34
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	4611      	mov	r1, r2
 80075f6:	461a      	mov	r2, r3
 80075f8:	460b      	mov	r3, r1
 80075fa:	80fb      	strh	r3, [r7, #6]
 80075fc:	4613      	mov	r3, r2
 80075fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007600:	88bb      	ldrh	r3, [r7, #4]
 8007602:	3301      	adds	r3, #1
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007620:	e01b      	b.n	800765a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	3301      	adds	r3, #1
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	b29b      	uxth	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	b29a      	uxth	r2, r3
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	3302      	adds	r3, #2
 800764c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	3301      	adds	r3, #1
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	3b01      	subs	r3, #1
 8007658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e0      	bne.n	8007622 <USB_WritePMA+0x38>
  }
}
 8007660:	bf00      	nop
 8007662:	3734      	adds	r7, #52	; 0x34
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800766c:	b480      	push	{r7}
 800766e:	b08b      	sub	sp, #44	; 0x2c
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4611      	mov	r1, r2
 8007678:	461a      	mov	r2, r3
 800767a:	460b      	mov	r3, r1
 800767c:	80fb      	strh	r3, [r7, #6]
 800767e:	4613      	mov	r3, r2
 8007680:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007682:	88bb      	ldrh	r3, [r7, #4]
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	b29b      	uxth	r3, r3
 8007688:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007692:	88fa      	ldrh	r2, [r7, #6]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800769c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
 80076a2:	e018      	b.n	80076d6 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	3302      	adds	r3, #2
 80076b0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	3301      	adds	r3, #1
 80076be:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	0a1b      	lsrs	r3, r3, #8
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	3301      	adds	r3, #1
 80076ce:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	3b01      	subs	r3, #1
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e3      	bne.n	80076a4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80076dc:	88bb      	ldrh	r3, [r7, #4]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	701a      	strb	r2, [r3, #0]
  }
}
 80076f8:	bf00      	nop
 80076fa:	372c      	adds	r7, #44	; 0x2c
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007710:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007714:	f008 ffc8 	bl	80106a8 <USBD_static_malloc>
 8007718:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d105      	bne.n	800772c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007728:	2302      	movs	r3, #2
 800772a:	e066      	b.n	80077fa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7c1b      	ldrb	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d119      	bne.n	8007770 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800773c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007740:	2202      	movs	r2, #2
 8007742:	2181      	movs	r1, #129	; 0x81
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f008 fe5c 	bl	8010402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007754:	2202      	movs	r2, #2
 8007756:	2101      	movs	r1, #1
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f008 fe52 	bl	8010402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2210      	movs	r2, #16
 800776a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800776e:	e016      	b.n	800779e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007770:	2340      	movs	r3, #64	; 0x40
 8007772:	2202      	movs	r2, #2
 8007774:	2181      	movs	r1, #129	; 0x81
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f008 fe43 	bl	8010402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007782:	2340      	movs	r3, #64	; 0x40
 8007784:	2202      	movs	r2, #2
 8007786:	2101      	movs	r1, #1
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f008 fe3a 	bl	8010402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2210      	movs	r2, #16
 800779a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800779e:	2308      	movs	r3, #8
 80077a0:	2203      	movs	r2, #3
 80077a2:	2182      	movs	r1, #130	; 0x82
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f008 fe2c 	bl	8010402 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7c1b      	ldrb	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077de:	2101      	movs	r1, #1
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f008 fef7 	bl	80105d4 <USBD_LL_PrepareReceive>
 80077e6:	e007      	b.n	80077f8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077ee:	2340      	movs	r3, #64	; 0x40
 80077f0:	2101      	movs	r1, #1
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f008 feee 	bl	80105d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800780e:	2181      	movs	r1, #129	; 0x81
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f008 fe1c 	bl	801044e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800781c:	2101      	movs	r1, #1
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f008 fe15 	bl	801044e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800782c:	2182      	movs	r1, #130	; 0x82
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f008 fe0d 	bl	801044e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00e      	beq.n	800786c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800785e:	4618      	mov	r0, r3
 8007860:	f008 ff30 	bl	80106c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007888:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800789c:	2303      	movs	r3, #3
 800789e:	e0af      	b.n	8007a00 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d03f      	beq.n	800792c <USBD_CDC_Setup+0xb4>
 80078ac:	2b20      	cmp	r3, #32
 80078ae:	f040 809f 	bne.w	80079f0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	88db      	ldrh	r3, [r3, #6]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d02e      	beq.n	8007918 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	b25b      	sxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da16      	bge.n	80078f2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80078d0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	88d2      	ldrh	r2, [r2, #6]
 80078d6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	88db      	ldrh	r3, [r3, #6]
 80078dc:	2b07      	cmp	r3, #7
 80078de:	bf28      	it	cs
 80078e0:	2307      	movcs	r3, #7
 80078e2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	89fa      	ldrh	r2, [r7, #14]
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 fabe 	bl	8008e6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80078f0:	e085      	b.n	80079fe <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	785a      	ldrb	r2, [r3, #1]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	88db      	ldrh	r3, [r3, #6]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007908:	6939      	ldr	r1, [r7, #16]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	88db      	ldrh	r3, [r3, #6]
 800790e:	461a      	mov	r2, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 fad7 	bl	8008ec4 <USBD_CtlPrepareRx>
      break;
 8007916:	e072      	b.n	80079fe <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	7850      	ldrb	r0, [r2, #1]
 8007924:	2200      	movs	r2, #0
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	4798      	blx	r3
      break;
 800792a:	e068      	b.n	80079fe <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	2b0b      	cmp	r3, #11
 8007932:	d852      	bhi.n	80079da <USBD_CDC_Setup+0x162>
 8007934:	a201      	add	r2, pc, #4	; (adr r2, 800793c <USBD_CDC_Setup+0xc4>)
 8007936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793a:	bf00      	nop
 800793c:	0800796d 	.word	0x0800796d
 8007940:	080079e9 	.word	0x080079e9
 8007944:	080079db 	.word	0x080079db
 8007948:	080079db 	.word	0x080079db
 800794c:	080079db 	.word	0x080079db
 8007950:	080079db 	.word	0x080079db
 8007954:	080079db 	.word	0x080079db
 8007958:	080079db 	.word	0x080079db
 800795c:	080079db 	.word	0x080079db
 8007960:	080079db 	.word	0x080079db
 8007964:	08007997 	.word	0x08007997
 8007968:	080079c1 	.word	0x080079c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b03      	cmp	r3, #3
 8007976:	d107      	bne.n	8007988 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007978:	f107 030a 	add.w	r3, r7, #10
 800797c:	2202      	movs	r2, #2
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 fa73 	bl	8008e6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007986:	e032      	b.n	80079ee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f9fd 	bl	8008d8a <USBD_CtlError>
            ret = USBD_FAIL;
 8007990:	2303      	movs	r3, #3
 8007992:	75fb      	strb	r3, [r7, #23]
          break;
 8007994:	e02b      	b.n	80079ee <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d107      	bne.n	80079b2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80079a2:	f107 030d 	add.w	r3, r7, #13
 80079a6:	2201      	movs	r2, #1
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fa5e 	bl	8008e6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079b0:	e01d      	b.n	80079ee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 f9e8 	bl	8008d8a <USBD_CtlError>
            ret = USBD_FAIL;
 80079ba:	2303      	movs	r3, #3
 80079bc:	75fb      	strb	r3, [r7, #23]
          break;
 80079be:	e016      	b.n	80079ee <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d00f      	beq.n	80079ec <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 f9db 	bl	8008d8a <USBD_CtlError>
            ret = USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80079d8:	e008      	b.n	80079ec <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 f9d4 	bl	8008d8a <USBD_CtlError>
          ret = USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	75fb      	strb	r3, [r7, #23]
          break;
 80079e6:	e002      	b.n	80079ee <USBD_CDC_Setup+0x176>
          break;
 80079e8:	bf00      	nop
 80079ea:	e008      	b.n	80079fe <USBD_CDC_Setup+0x186>
          break;
 80079ec:	bf00      	nop
      }
      break;
 80079ee:	e006      	b.n	80079fe <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f9c9 	bl	8008d8a <USBD_CtlError>
      ret = USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	75fb      	strb	r3, [r7, #23]
      break;
 80079fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e04c      	b.n	8007ac4 <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007a32:	78fa      	ldrb	r2, [r7, #3]
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	3318      	adds	r3, #24
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d026      	beq.n	8007a96 <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	440b      	add	r3, r1
 8007a56:	3318      	adds	r3, #24
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	68f9      	ldr	r1, [r7, #12]
 8007a5e:	0152      	lsls	r2, r2, #5
 8007a60:	440a      	add	r2, r1
 8007a62:	3238      	adds	r2, #56	; 0x38
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a6a:	fb02 f201 	mul.w	r2, r2, r1
 8007a6e:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d110      	bne.n	8007a96 <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	440b      	add	r3, r1
 8007a82:	3318      	adds	r3, #24
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a88:	78f9      	ldrb	r1, [r7, #3]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f008 fd7f 	bl	8010592 <USBD_LL_Transmit>
 8007a94:	e015      	b.n	8007ac2 <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00b      	beq.n	8007ac2 <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007abe:	78fa      	ldrb	r2, [r7, #3]
 8007ac0:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ade:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e015      	b.n	8007b1a <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f008 fd8f 	bl	8010616 <USBD_LL_GetRxDataSize>
 8007af8:	4602      	mov	r2, r0
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b14:	4611      	mov	r1, r2
 8007b16:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e01b      	b.n	8007b74 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d015      	beq.n	8007b72 <USBD_CDC_EP0_RxReady+0x50>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b4c:	2bff      	cmp	r3, #255	; 0xff
 8007b4e:	d010      	beq.n	8007b72 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007b5e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b66:	b292      	uxth	r2, r2
 8007b68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	22ff      	movs	r2, #255	; 0xff
 8007b6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2243      	movs	r2, #67	; 0x43
 8007b88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007b8a:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	200000bc 	.word	0x200000bc

08007b9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2243      	movs	r2, #67	; 0x43
 8007ba8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007baa:	4b03      	ldr	r3, [pc, #12]	; (8007bb8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	20000078 	.word	0x20000078

08007bbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2243      	movs	r2, #67	; 0x43
 8007bc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007bca:	4b03      	ldr	r3, [pc, #12]	; (8007bd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	20000100 	.word	0x20000100

08007bdc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	220a      	movs	r2, #10
 8007be8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007bea:	4b03      	ldr	r3, [pc, #12]	; (8007bf8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	20000034 	.word	0x20000034

08007bfc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e004      	b.n	8007c1a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b087      	sub	sp, #28
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c38:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e008      	b.n	8007c56 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e004      	b.n	8007c88 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ca2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e01a      	b.n	8007cec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d114      	bne.n	8007cea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cde:	2181      	movs	r1, #129	; 0x81
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f008 fc56 	bl	8010592 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e016      	b.n	8007d40 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7c1b      	ldrb	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d24:	2101      	movs	r1, #1
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f008 fc54 	bl	80105d4 <USBD_LL_PrepareReceive>
 8007d2c:	e007      	b.n	8007d3e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d34:	2340      	movs	r3, #64	; 0x40
 8007d36:	2101      	movs	r1, #1
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f008 fc4b 	bl	80105d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e01f      	b.n	8007da0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	79fa      	ldrb	r2, [r7, #7]
 8007d92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f008 fab7 	bl	8010308 <USBD_LL_Init>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e016      	b.n	8007dee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	f107 020e 	add.w	r2, r7, #14
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	4602      	mov	r2, r0
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f008 fae4 	bl	80103cc <USBD_LL_Start>
 8007e04:	4603      	mov	r3, r0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e30:	2303      	movs	r3, #3
 8007e32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d009      	beq.n	8007e52 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d007      	beq.n	8007e82 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	78fa      	ldrb	r2, [r7, #3]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
  }

  return USBD_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 ff39 	bl	8008d16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d00e      	beq.n	8007ee6 <USBD_LL_SetupStage+0x5a>
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d302      	bcc.n	8007ed2 <USBD_LL_SetupStage+0x46>
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d014      	beq.n	8007efa <USBD_LL_SetupStage+0x6e>
 8007ed0:	e01d      	b.n	8007f0e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f9ee 	bl	80082bc <USBD_StdDevReq>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee4:	e020      	b.n	8007f28 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa52 	bl	8008398 <USBD_StdItfReq>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef8:	e016      	b.n	8007f28 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa8f 	bl	8008426 <USBD_StdEPReq>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f0c:	e00c      	b.n	8007f28 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f008 fab5 	bl	801048c <USBD_LL_StallEP>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
      break;
 8007f26:	bf00      	nop
  }

  return ret;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b086      	sub	sp, #24
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d138      	bne.n	8007fb8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d14a      	bne.n	8007fee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d913      	bls.n	8007f8c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	1ad2      	subs	r2, r2, r3
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	bf28      	it	cs
 8007f7e:	4613      	movcs	r3, r2
 8007f80:	461a      	mov	r2, r3
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 ffba 	bl	8008efe <USBD_CtlContinueRx>
 8007f8a:	e030      	b.n	8007fee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d10b      	bne.n	8007fb0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 ffb5 	bl	8008f20 <USBD_CtlSendStatus>
 8007fb6:	e01a      	b.n	8007fee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d114      	bne.n	8007fee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00e      	beq.n	8007fee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	7afa      	ldrb	r2, [r7, #11]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	4798      	blx	r3
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	e000      	b.n	8007ff0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	460b      	mov	r3, r1
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008006:	7afb      	ldrb	r3, [r7, #11]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d16b      	bne.n	80080e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3314      	adds	r3, #20
 8008010:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008018:	2b02      	cmp	r3, #2
 800801a:	d156      	bne.n	80080ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	429a      	cmp	r2, r3
 8008026:	d914      	bls.n	8008052 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	1ad2      	subs	r2, r2, r3
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	461a      	mov	r2, r3
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 ff2f 	bl	8008ea2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008044:	2300      	movs	r3, #0
 8008046:	2200      	movs	r2, #0
 8008048:	2100      	movs	r1, #0
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f008 fac2 	bl	80105d4 <USBD_LL_PrepareReceive>
 8008050:	e03b      	b.n	80080ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	429a      	cmp	r2, r3
 800805c:	d11c      	bne.n	8008098 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008066:	429a      	cmp	r2, r3
 8008068:	d316      	bcc.n	8008098 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008074:	429a      	cmp	r2, r3
 8008076:	d20f      	bcs.n	8008098 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008078:	2200      	movs	r2, #0
 800807a:	2100      	movs	r1, #0
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 ff10 	bl	8008ea2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800808a:	2300      	movs	r3, #0
 800808c:	2200      	movs	r2, #0
 800808e:	2100      	movs	r1, #0
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f008 fa9f 	bl	80105d4 <USBD_LL_PrepareReceive>
 8008096:	e018      	b.n	80080ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d10b      	bne.n	80080bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080bc:	2180      	movs	r1, #128	; 0x80
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f008 f9e4 	bl	801048c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 ff3e 	bl	8008f46 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d122      	bne.n	800811a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f7ff fe9a 	bl	8007e0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80080e2:	e01a      	b.n	800811a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d114      	bne.n	800811a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00e      	beq.n	800811a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	7afa      	ldrb	r2, [r7, #11]
 8008106:	4611      	mov	r1, r2
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	4798      	blx	r3
 800810c:	4603      	mov	r3, r0
 800810e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	e000      	b.n	800811c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008154:	2303      	movs	r3, #3
 8008156:	e02f      	b.n	80081b8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00f      	beq.n	8008182 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6852      	ldr	r2, [r2, #4]
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	4611      	mov	r1, r2
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008182:	2340      	movs	r3, #64	; 0x40
 8008184:	2200      	movs	r2, #0
 8008186:	2100      	movs	r1, #0
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f008 f93a 	bl	8010402 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2240      	movs	r2, #64	; 0x40
 800819a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800819e:	2340      	movs	r3, #64	; 0x40
 80081a0:	2200      	movs	r2, #0
 80081a2:	2180      	movs	r1, #128	; 0x80
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f008 f92c 	bl	8010402 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2240      	movs	r2, #64	; 0x40
 80081b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2204      	movs	r2, #4
 80081fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b04      	cmp	r3, #4
 800821e:	d106      	bne.n	800822e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008226:	b2da      	uxtb	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800824e:	2303      	movs	r3, #3
 8008250:	e012      	b.n	8008278 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b03      	cmp	r3, #3
 800825c:	d10b      	bne.n	8008276 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	3301      	adds	r3, #1
 8008296:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800829e:	8a3b      	ldrh	r3, [r7, #16]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	b21a      	sxth	r2, r3
 80082a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	b21b      	sxth	r3, r3
 80082ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082ae:	89fb      	ldrh	r3, [r7, #14]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d004      	beq.n	80082e0 <USBD_StdDevReq+0x24>
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d002      	beq.n	80082e0 <USBD_StdDevReq+0x24>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <USBD_StdDevReq+0x38>
 80082de:	e050      	b.n	8008382 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	73fb      	strb	r3, [r7, #15]
      break;
 80082f2:	e04b      	b.n	800838c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	785b      	ldrb	r3, [r3, #1]
 80082f8:	2b09      	cmp	r3, #9
 80082fa:	d83c      	bhi.n	8008376 <USBD_StdDevReq+0xba>
 80082fc:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <USBD_StdDevReq+0x48>)
 80082fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008302:	bf00      	nop
 8008304:	08008359 	.word	0x08008359
 8008308:	0800836d 	.word	0x0800836d
 800830c:	08008377 	.word	0x08008377
 8008310:	08008363 	.word	0x08008363
 8008314:	08008377 	.word	0x08008377
 8008318:	08008337 	.word	0x08008337
 800831c:	0800832d 	.word	0x0800832d
 8008320:	08008377 	.word	0x08008377
 8008324:	0800834f 	.word	0x0800834f
 8008328:	08008341 	.word	0x08008341
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f9d4 	bl	80086dc <USBD_GetDescriptor>
          break;
 8008334:	e024      	b.n	8008380 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fb63 	bl	8008a04 <USBD_SetAddress>
          break;
 800833e:	e01f      	b.n	8008380 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fba2 	bl	8008a8c <USBD_SetConfig>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]
          break;
 800834c:	e018      	b.n	8008380 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fc41 	bl	8008bd8 <USBD_GetConfig>
          break;
 8008356:	e013      	b.n	8008380 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fc71 	bl	8008c42 <USBD_GetStatus>
          break;
 8008360:	e00e      	b.n	8008380 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fca0 	bl	8008caa <USBD_SetFeature>
          break;
 800836a:	e009      	b.n	8008380 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fcaf 	bl	8008cd2 <USBD_ClrFeature>
          break;
 8008374:	e004      	b.n	8008380 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fd06 	bl	8008d8a <USBD_CtlError>
          break;
 800837e:	bf00      	nop
      }
      break;
 8008380:	e004      	b.n	800838c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fd00 	bl	8008d8a <USBD_CtlError>
      break;
 800838a:	bf00      	nop
  }

  return ret;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop

08008398 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d003      	beq.n	80083ba <USBD_StdItfReq+0x22>
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	d001      	beq.n	80083ba <USBD_StdItfReq+0x22>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d12b      	bne.n	8008412 <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d81d      	bhi.n	8008404 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	889b      	ldrh	r3, [r3, #4]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d813      	bhi.n	80083fa <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	4798      	blx	r3
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	88db      	ldrh	r3, [r3, #6]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d110      	bne.n	800840e <USBD_StdItfReq+0x76>
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10d      	bne.n	800840e <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fd94 	bl	8008f20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083f8:	e009      	b.n	800840e <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fcc4 	bl	8008d8a <USBD_CtlError>
          break;
 8008402:	e004      	b.n	800840e <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fcbf 	bl	8008d8a <USBD_CtlError>
          break;
 800840c:	e000      	b.n	8008410 <USBD_StdItfReq+0x78>
          break;
 800840e:	bf00      	nop
      }
      break;
 8008410:	e004      	b.n	800841c <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fcb8 	bl	8008d8a <USBD_CtlError>
      break;
 800841a:	bf00      	nop
  }

  return ret;
 800841c:	7bfb      	ldrb	r3, [r7, #15]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	889b      	ldrh	r3, [r3, #4]
 8008438:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008442:	2b20      	cmp	r3, #32
 8008444:	d004      	beq.n	8008450 <USBD_StdEPReq+0x2a>
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d002      	beq.n	8008450 <USBD_StdEPReq+0x2a>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <USBD_StdEPReq+0x3e>
 800844e:	e13a      	b.n	80086c6 <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
      break;
 8008462:	e135      	b.n	80086d0 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d03f      	beq.n	80084ec <USBD_StdEPReq+0xc6>
 800846c:	2b03      	cmp	r3, #3
 800846e:	d002      	beq.n	8008476 <USBD_StdEPReq+0x50>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d07b      	beq.n	800856c <USBD_StdEPReq+0x146>
 8008474:	e121      	b.n	80086ba <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d002      	beq.n	8008488 <USBD_StdEPReq+0x62>
 8008482:	2b03      	cmp	r3, #3
 8008484:	d015      	beq.n	80084b2 <USBD_StdEPReq+0x8c>
 8008486:	e02b      	b.n	80084e0 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00c      	beq.n	80084a8 <USBD_StdEPReq+0x82>
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	2b80      	cmp	r3, #128	; 0x80
 8008492:	d009      	beq.n	80084a8 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f007 fff7 	bl	801048c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800849e:	2180      	movs	r1, #128	; 0x80
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f007 fff3 	bl	801048c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084a6:	e020      	b.n	80084ea <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fc6d 	bl	8008d8a <USBD_CtlError>
              break;
 80084b0:	e01b      	b.n	80084ea <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	885b      	ldrh	r3, [r3, #2]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10e      	bne.n	80084d8 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <USBD_StdEPReq+0xb2>
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2b80      	cmp	r3, #128	; 0x80
 80084c4:	d008      	beq.n	80084d8 <USBD_StdEPReq+0xb2>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88db      	ldrh	r3, [r3, #6]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f007 ffda 	bl	801048c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fd21 	bl	8008f20 <USBD_CtlSendStatus>

              break;
 80084de:	e004      	b.n	80084ea <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fc51 	bl	8008d8a <USBD_CtlError>
              break;
 80084e8:	bf00      	nop
          }
          break;
 80084ea:	e0eb      	b.n	80086c4 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d002      	beq.n	80084fe <USBD_StdEPReq+0xd8>
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d015      	beq.n	8008528 <USBD_StdEPReq+0x102>
 80084fc:	e02f      	b.n	800855e <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00c      	beq.n	800851e <USBD_StdEPReq+0xf8>
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b80      	cmp	r3, #128	; 0x80
 8008508:	d009      	beq.n	800851e <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f007 ffbc 	bl	801048c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008514:	2180      	movs	r1, #128	; 0x80
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f007 ffb8 	bl	801048c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800851c:	e025      	b.n	800856a <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fc32 	bl	8008d8a <USBD_CtlError>
              break;
 8008526:	e020      	b.n	800856a <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	885b      	ldrh	r3, [r3, #2]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d11b      	bne.n	8008568 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f007 ffc3 	bl	80104ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fceb 	bl	8008f20 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800855c:	e004      	b.n	8008568 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fc12 	bl	8008d8a <USBD_CtlError>
              break;
 8008566:	e000      	b.n	800856a <USBD_StdEPReq+0x144>
              break;
 8008568:	bf00      	nop
          }
          break;
 800856a:	e0ab      	b.n	80086c4 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d002      	beq.n	800857e <USBD_StdEPReq+0x158>
 8008578:	2b03      	cmp	r3, #3
 800857a:	d032      	beq.n	80085e2 <USBD_StdEPReq+0x1bc>
 800857c:	e097      	b.n	80086ae <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d007      	beq.n	8008594 <USBD_StdEPReq+0x16e>
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b80      	cmp	r3, #128	; 0x80
 8008588:	d004      	beq.n	8008594 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fbfc 	bl	8008d8a <USBD_CtlError>
                break;
 8008592:	e091      	b.n	80086b8 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008598:	2b00      	cmp	r3, #0
 800859a:	da0b      	bge.n	80085b4 <USBD_StdEPReq+0x18e>
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	3310      	adds	r3, #16
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	4413      	add	r3, r2
 80085b0:	3304      	adds	r3, #4
 80085b2:	e00b      	b.n	80085cc <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	3304      	adds	r3, #4
 80085cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2202      	movs	r2, #2
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fc46 	bl	8008e6c <USBD_CtlSendData>
              break;
 80085e0:	e06a      	b.n	80086b8 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	da11      	bge.n	800860e <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	f003 020f 	and.w	r2, r3, #15
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	3324      	adds	r3, #36	; 0x24
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d117      	bne.n	8008634 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fbbf 	bl	8008d8a <USBD_CtlError>
                  break;
 800860c:	e054      	b.n	80086b8 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	f003 020f 	and.w	r2, r3, #15
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d104      	bne.n	8008634 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fbac 	bl	8008d8a <USBD_CtlError>
                  break;
 8008632:	e041      	b.n	80086b8 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008638:	2b00      	cmp	r3, #0
 800863a:	da0b      	bge.n	8008654 <USBD_StdEPReq+0x22e>
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	3310      	adds	r3, #16
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4413      	add	r3, r2
 8008650:	3304      	adds	r3, #4
 8008652:	e00b      	b.n	800866c <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	3304      	adds	r3, #4
 800866c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <USBD_StdEPReq+0x254>
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b80      	cmp	r3, #128	; 0x80
 8008678:	d103      	bne.n	8008682 <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	e00e      	b.n	80086a0 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f007 ff3e 	bl	8010508 <USBD_LL_IsStallEP>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2201      	movs	r2, #1
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	e002      	b.n	80086a0 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2202      	movs	r2, #2
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fbe0 	bl	8008e6c <USBD_CtlSendData>
              break;
 80086ac:	e004      	b.n	80086b8 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fb6a 	bl	8008d8a <USBD_CtlError>
              break;
 80086b6:	bf00      	nop
          }
          break;
 80086b8:	e004      	b.n	80086c4 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fb64 	bl	8008d8a <USBD_CtlError>
          break;
 80086c2:	bf00      	nop
      }
      break;
 80086c4:	e004      	b.n	80086d0 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb5e 	bl	8008d8a <USBD_CtlError>
      break;
 80086ce:	bf00      	nop
  }

  return ret;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	3b01      	subs	r3, #1
 80086fc:	2b0e      	cmp	r3, #14
 80086fe:	f200 8152 	bhi.w	80089a6 <USBD_GetDescriptor+0x2ca>
 8008702:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <USBD_GetDescriptor+0x2c>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	08008779 	.word	0x08008779
 800870c:	08008791 	.word	0x08008791
 8008710:	080087d1 	.word	0x080087d1
 8008714:	080089a7 	.word	0x080089a7
 8008718:	080089a7 	.word	0x080089a7
 800871c:	08008947 	.word	0x08008947
 8008720:	08008973 	.word	0x08008973
 8008724:	080089a7 	.word	0x080089a7
 8008728:	080089a7 	.word	0x080089a7
 800872c:	080089a7 	.word	0x080089a7
 8008730:	080089a7 	.word	0x080089a7
 8008734:	080089a7 	.word	0x080089a7
 8008738:	080089a7 	.word	0x080089a7
 800873c:	080089a7 	.word	0x080089a7
 8008740:	08008745 	.word	0x08008745
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00b      	beq.n	8008768 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	7c12      	ldrb	r2, [r2, #16]
 800875c:	f107 0108 	add.w	r1, r7, #8
 8008760:	4610      	mov	r0, r2
 8008762:	4798      	blx	r3
 8008764:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008766:	e126      	b.n	80089b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fb0d 	bl	8008d8a <USBD_CtlError>
        err++;
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	3301      	adds	r3, #1
 8008774:	72fb      	strb	r3, [r7, #11]
      break;
 8008776:	e11e      	b.n	80089b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	7c12      	ldrb	r2, [r2, #16]
 8008784:	f107 0108 	add.w	r1, r7, #8
 8008788:	4610      	mov	r0, r2
 800878a:	4798      	blx	r3
 800878c:	60f8      	str	r0, [r7, #12]
      break;
 800878e:	e112      	b.n	80089b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	7c1b      	ldrb	r3, [r3, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10d      	bne.n	80087b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	f107 0208 	add.w	r2, r7, #8
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
 80087a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3301      	adds	r3, #1
 80087ae:	2202      	movs	r2, #2
 80087b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087b2:	e100      	b.n	80089b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087bc:	f107 0208 	add.w	r2, r7, #8
 80087c0:	4610      	mov	r0, r2
 80087c2:	4798      	blx	r3
 80087c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3301      	adds	r3, #1
 80087ca:	2202      	movs	r2, #2
 80087cc:	701a      	strb	r2, [r3, #0]
      break;
 80087ce:	e0f2      	b.n	80089b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	885b      	ldrh	r3, [r3, #2]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	f200 80ac 	bhi.w	8008934 <USBD_GetDescriptor+0x258>
 80087dc:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <USBD_GetDescriptor+0x108>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	080087fd 	.word	0x080087fd
 80087e8:	08008831 	.word	0x08008831
 80087ec:	08008865 	.word	0x08008865
 80087f0:	08008899 	.word	0x08008899
 80087f4:	080088cd 	.word	0x080088cd
 80087f8:	08008901 	.word	0x08008901
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	7c12      	ldrb	r2, [r2, #16]
 8008814:	f107 0108 	add.w	r1, r7, #8
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800881e:	e091      	b.n	8008944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fab1 	bl	8008d8a <USBD_CtlError>
            err++;
 8008828:	7afb      	ldrb	r3, [r7, #11]
 800882a:	3301      	adds	r3, #1
 800882c:	72fb      	strb	r3, [r7, #11]
          break;
 800882e:	e089      	b.n	8008944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	7c12      	ldrb	r2, [r2, #16]
 8008848:	f107 0108 	add.w	r1, r7, #8
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
 8008850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008852:	e077      	b.n	8008944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fa97 	bl	8008d8a <USBD_CtlError>
            err++;
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	3301      	adds	r3, #1
 8008860:	72fb      	strb	r3, [r7, #11]
          break;
 8008862:	e06f      	b.n	8008944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	7c12      	ldrb	r2, [r2, #16]
 800887c:	f107 0108 	add.w	r1, r7, #8
 8008880:	4610      	mov	r0, r2
 8008882:	4798      	blx	r3
 8008884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008886:	e05d      	b.n	8008944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa7d 	bl	8008d8a <USBD_CtlError>
            err++;
 8008890:	7afb      	ldrb	r3, [r7, #11]
 8008892:	3301      	adds	r3, #1
 8008894:	72fb      	strb	r3, [r7, #11]
          break;
 8008896:	e055      	b.n	8008944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00b      	beq.n	80088bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	7c12      	ldrb	r2, [r2, #16]
 80088b0:	f107 0108 	add.w	r1, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ba:	e043      	b.n	8008944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa63 	bl	8008d8a <USBD_CtlError>
            err++;
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	3301      	adds	r3, #1
 80088c8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ca:	e03b      	b.n	8008944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00b      	beq.n	80088f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	7c12      	ldrb	r2, [r2, #16]
 80088e4:	f107 0108 	add.w	r1, r7, #8
 80088e8:	4610      	mov	r0, r2
 80088ea:	4798      	blx	r3
 80088ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ee:	e029      	b.n	8008944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fa49 	bl	8008d8a <USBD_CtlError>
            err++;
 80088f8:	7afb      	ldrb	r3, [r7, #11]
 80088fa:	3301      	adds	r3, #1
 80088fc:	72fb      	strb	r3, [r7, #11]
          break;
 80088fe:	e021      	b.n	8008944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00b      	beq.n	8008924 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	7c12      	ldrb	r2, [r2, #16]
 8008918:	f107 0108 	add.w	r1, r7, #8
 800891c:	4610      	mov	r0, r2
 800891e:	4798      	blx	r3
 8008920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008922:	e00f      	b.n	8008944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa2f 	bl	8008d8a <USBD_CtlError>
            err++;
 800892c:	7afb      	ldrb	r3, [r7, #11]
 800892e:	3301      	adds	r3, #1
 8008930:	72fb      	strb	r3, [r7, #11]
          break;
 8008932:	e007      	b.n	8008944 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fa27 	bl	8008d8a <USBD_CtlError>
          err++;
 800893c:	7afb      	ldrb	r3, [r7, #11]
 800893e:	3301      	adds	r3, #1
 8008940:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008942:	bf00      	nop
      }
      break;
 8008944:	e037      	b.n	80089b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7c1b      	ldrb	r3, [r3, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008956:	f107 0208 	add.w	r2, r7, #8
 800895a:	4610      	mov	r0, r2
 800895c:	4798      	blx	r3
 800895e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008960:	e029      	b.n	80089b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fa10 	bl	8008d8a <USBD_CtlError>
        err++;
 800896a:	7afb      	ldrb	r3, [r7, #11]
 800896c:	3301      	adds	r3, #1
 800896e:	72fb      	strb	r3, [r7, #11]
      break;
 8008970:	e021      	b.n	80089b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	7c1b      	ldrb	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10d      	bne.n	8008996 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	f107 0208 	add.w	r2, r7, #8
 8008986:	4610      	mov	r0, r2
 8008988:	4798      	blx	r3
 800898a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	2207      	movs	r2, #7
 8008992:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008994:	e00f      	b.n	80089b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f9f6 	bl	8008d8a <USBD_CtlError>
        err++;
 800899e:	7afb      	ldrb	r3, [r7, #11]
 80089a0:	3301      	adds	r3, #1
 80089a2:	72fb      	strb	r3, [r7, #11]
      break;
 80089a4:	e007      	b.n	80089b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f9ee 	bl	8008d8a <USBD_CtlError>
      err++;
 80089ae:	7afb      	ldrb	r3, [r7, #11]
 80089b0:	3301      	adds	r3, #1
 80089b2:	72fb      	strb	r3, [r7, #11]
      break;
 80089b4:	bf00      	nop
  }

  if (err != 0U)
 80089b6:	7afb      	ldrb	r3, [r7, #11]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d11e      	bne.n	80089fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	88db      	ldrh	r3, [r3, #6]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d016      	beq.n	80089f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80089c4:	893b      	ldrh	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00e      	beq.n	80089e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	88da      	ldrh	r2, [r3, #6]
 80089ce:	893b      	ldrh	r3, [r7, #8]
 80089d0:	4293      	cmp	r3, r2
 80089d2:	bf28      	it	cs
 80089d4:	4613      	movcs	r3, r2
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089da:	893b      	ldrh	r3, [r7, #8]
 80089dc:	461a      	mov	r2, r3
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fa43 	bl	8008e6c <USBD_CtlSendData>
 80089e6:	e009      	b.n	80089fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f9cd 	bl	8008d8a <USBD_CtlError>
 80089f0:	e004      	b.n	80089fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa94 	bl	8008f20 <USBD_CtlSendStatus>
 80089f8:	e000      	b.n	80089fc <USBD_GetDescriptor+0x320>
    return;
 80089fa:	bf00      	nop
  }
}
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop

08008a04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	889b      	ldrh	r3, [r3, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d131      	bne.n	8008a7a <USBD_SetAddress+0x76>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	88db      	ldrh	r3, [r3, #6]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d12d      	bne.n	8008a7a <USBD_SetAddress+0x76>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	885b      	ldrh	r3, [r3, #2]
 8008a22:	2b7f      	cmp	r3, #127	; 0x7f
 8008a24:	d829      	bhi.n	8008a7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	885b      	ldrh	r3, [r3, #2]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d104      	bne.n	8008a48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f9a2 	bl	8008d8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a46:	e01c      	b.n	8008a82 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	7bfa      	ldrb	r2, [r7, #15]
 8008a4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f007 fd7d 	bl	8010554 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fa60 	bl	8008f20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d004      	beq.n	8008a70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6e:	e008      	b.n	8008a82 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a78:	e003      	b.n	8008a82 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f984 	bl	8008d8a <USBD_CtlError>
  }
}
 8008a82:	bf00      	nop
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	4b4c      	ldr	r3, [pc, #304]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008aa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008aa4:	4b4b      	ldr	r3, [pc, #300]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d905      	bls.n	8008ab8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f96b 	bl	8008d8a <USBD_CtlError>
    return USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e088      	b.n	8008bca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d002      	beq.n	8008aca <USBD_SetConfig+0x3e>
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d025      	beq.n	8008b14 <USBD_SetConfig+0x88>
 8008ac8:	e071      	b.n	8008bae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008aca:	4b42      	ldr	r3, [pc, #264]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01c      	beq.n	8008b0c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008ad2:	4b40      	ldr	r3, [pc, #256]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008adc:	4b3d      	ldr	r3, [pc, #244]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff f99e 	bl	8007e24 <USBD_SetClassConfig>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f948 	bl	8008d8a <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008afa:	e065      	b.n	8008bc8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fa0f 	bl	8008f20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2203      	movs	r2, #3
 8008b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b0a:	e05d      	b.n	8008bc8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fa07 	bl	8008f20 <USBD_CtlSendStatus>
      break;
 8008b12:	e059      	b.n	8008bc8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b14:	4b2f      	ldr	r3, [pc, #188]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d112      	bne.n	8008b42 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008b24:	4b2b      	ldr	r3, [pc, #172]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b2e:	4b29      	ldr	r3, [pc, #164]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff f991 	bl	8007e5c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f9f0 	bl	8008f20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b40:	e042      	b.n	8008bc8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008b42:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d02a      	beq.n	8008ba6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff f97f 	bl	8007e5c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b5e:	4b1d      	ldr	r3, [pc, #116]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b68:	4b1a      	ldr	r3, [pc, #104]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff f958 	bl	8007e24 <USBD_SetClassConfig>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00f      	beq.n	8008b9e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f902 	bl	8008d8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7ff f964 	bl	8007e5c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b9c:	e014      	b.n	8008bc8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f9be 	bl	8008f20 <USBD_CtlSendStatus>
      break;
 8008ba4:	e010      	b.n	8008bc8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f9ba 	bl	8008f20 <USBD_CtlSendStatus>
      break;
 8008bac:	e00c      	b.n	8008bc8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f8ea 	bl	8008d8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bb6:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <USBD_SetConfig+0x148>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff f94d 	bl	8007e5c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc6:	bf00      	nop
  }

  return ret;
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	200002aa 	.word	0x200002aa

08008bd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	88db      	ldrh	r3, [r3, #6]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d004      	beq.n	8008bf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f8cc 	bl	8008d8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008bf2:	e022      	b.n	8008c3a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	db17      	blt.n	8008c30 <USBD_GetConfig+0x58>
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	dd02      	ble.n	8008c0a <USBD_GetConfig+0x32>
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d00b      	beq.n	8008c20 <USBD_GetConfig+0x48>
 8008c08:	e012      	b.n	8008c30 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3308      	adds	r3, #8
 8008c14:	2201      	movs	r2, #1
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f927 	bl	8008e6c <USBD_CtlSendData>
        break;
 8008c1e:	e00c      	b.n	8008c3a <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3304      	adds	r3, #4
 8008c24:	2201      	movs	r2, #1
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f91f 	bl	8008e6c <USBD_CtlSendData>
        break;
 8008c2e:	e004      	b.n	8008c3a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f8a9 	bl	8008d8a <USBD_CtlError>
        break;
 8008c38:	bf00      	nop
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d81e      	bhi.n	8008c98 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	88db      	ldrh	r3, [r3, #6]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d004      	beq.n	8008c6c <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f890 	bl	8008d8a <USBD_CtlError>
        break;
 8008c6a:	e01a      	b.n	8008ca2 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f043 0202 	orr.w	r2, r3, #2
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	330c      	adds	r3, #12
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f8eb 	bl	8008e6c <USBD_CtlSendData>
      break;
 8008c96:	e004      	b.n	8008ca2 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f875 	bl	8008d8a <USBD_CtlError>
      break;
 8008ca0:	bf00      	nop
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	885b      	ldrh	r3, [r3, #2]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d106      	bne.n	8008cca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f92b 	bl	8008f20 <USBD_CtlSendStatus>
  }
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d80b      	bhi.n	8008d02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	885b      	ldrh	r3, [r3, #2]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d10c      	bne.n	8008d0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f910 	bl	8008f20 <USBD_CtlSendStatus>
      }
      break;
 8008d00:	e004      	b.n	8008d0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f840 	bl	8008d8a <USBD_CtlError>
      break;
 8008d0a:	e000      	b.n	8008d0e <USBD_ClrFeature+0x3c>
      break;
 8008d0c:	bf00      	nop
  }
}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b084      	sub	sp, #16
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	781a      	ldrb	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	781a      	ldrb	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f7ff fa9d 	bl	8008280 <SWAPBYTE>
 8008d46:	4603      	mov	r3, r0
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3301      	adds	r3, #1
 8008d52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3301      	adds	r3, #1
 8008d58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f7ff fa90 	bl	8008280 <SWAPBYTE>
 8008d60:	4603      	mov	r3, r0
 8008d62:	461a      	mov	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3301      	adds	r3, #1
 8008d72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f7ff fa83 	bl	8008280 <SWAPBYTE>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	80da      	strh	r2, [r3, #6]
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d94:	2180      	movs	r1, #128	; 0x80
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f007 fb78 	bl	801048c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f007 fb74 	bl	801048c <USBD_LL_StallEP>
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d036      	beq.n	8008e30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008dc6:	6938      	ldr	r0, [r7, #16]
 8008dc8:	f000 f836 	bl	8008e38 <USBD_GetLen>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	3301      	adds	r3, #1
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	4413      	add	r3, r2
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	3301      	adds	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008dec:	7dfb      	ldrb	r3, [r7, #23]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	4413      	add	r3, r2
 8008df2:	2203      	movs	r2, #3
 8008df4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008dfc:	e013      	b.n	8008e26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	4413      	add	r3, r2
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	7812      	ldrb	r2, [r2, #0]
 8008e08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	613b      	str	r3, [r7, #16]
    idx++;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	3301      	adds	r3, #1
 8008e14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	3301      	adds	r3, #1
 8008e24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e7      	bne.n	8008dfe <USBD_GetString+0x52>
 8008e2e:	e000      	b.n	8008e32 <USBD_GetString+0x86>
    return;
 8008e30:	bf00      	nop
  }
}
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e48:	e005      	b.n	8008e56 <USBD_GetLen+0x1e>
  {
    len++;
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1f5      	bne.n	8008e4a <USBD_GetLen+0x12>
  }

  return len;
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	2100      	movs	r1, #0
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f007 fb7d 	bl	8010592 <USBD_LL_Transmit>

  return USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f007 fb6c 	bl	8010592 <USBD_LL_Transmit>

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	2100      	movs	r1, #0
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f007 fb70 	bl	80105d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	2100      	movs	r1, #0
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f007 fb5f 	bl	80105d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2204      	movs	r2, #4
 8008f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f30:	2300      	movs	r3, #0
 8008f32:	2200      	movs	r2, #0
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f007 fb2b 	bl	8010592 <USBD_LL_Transmit>

  return USBD_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2205      	movs	r2, #5
 8008f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f56:	2300      	movs	r3, #0
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f007 fb39 	bl	80105d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008f72:	1d3b      	adds	r3, r7, #4
 8008f74:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8008f80:	f000 f938 	bl	80091f4 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	330b      	adds	r3, #11
 8008f88:	78db      	ldrb	r3, [r3, #3]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b088      	sub	sp, #32
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	4603      	mov	r3, r0
 8008f9a:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008f9c:	f107 030c 	add.w	r3, r7, #12
 8008fa0:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8008fa6:	f107 020c 	add.w	r2, r7, #12
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	2101      	movs	r1, #1
 8008fae:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8008fb2:	f000 f91f 	bl	80091f4 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	330b      	adds	r3, #11
 8008fba:	78db      	ldrb	r3, [r3, #3]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3720      	adds	r7, #32
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b08b      	sub	sp, #44	; 0x2c
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008fec:	4b4a      	ldr	r3, [pc, #296]	; (8009118 <SHCI_GetWirelessFwInfo+0x154>)
 8008fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008ff4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008ffe:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a44      	ldr	r2, [pc, #272]	; (800911c <SHCI_GetWirelessFwInfo+0x158>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d10f      	bne.n	8009030 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	617b      	str	r3, [r7, #20]
 800902e:	e01a      	b.n	8009066 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009038:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800903c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	0e1b      	lsrs	r3, r3, #24
 800906a:	b2da      	uxtb	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	0c1b      	lsrs	r3, r3, #16
 8009074:	b2da      	uxtb	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	0a1b      	lsrs	r3, r3, #8
 800907e:	b2da      	uxtb	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	091b      	lsrs	r3, r3, #4
 8009088:	b2db      	uxtb	r3, r3
 800908a:	f003 030f 	and.w	r3, r3, #15
 800908e:	b2da      	uxtb	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	b2db      	uxtb	r3, r3
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	b2da      	uxtb	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	0e1b      	lsrs	r3, r3, #24
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	0c1b      	lsrs	r3, r3, #16
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	0a1b      	lsrs	r3, r3, #8
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	0e1b      	lsrs	r3, r3, #24
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	0c1b      	lsrs	r3, r3, #16
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	0a1b      	lsrs	r3, r3, #8
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	0e1b      	lsrs	r3, r3, #24
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	0c1b      	lsrs	r3, r3, #16
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	b2da      	uxtb	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	372c      	adds	r7, #44	; 0x2c
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	58004000 	.word	0x58004000
 800911c:	a94656b9 	.word	0xa94656b9

08009120 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	4a08      	ldr	r2, [pc, #32]	; (8009150 <shci_init+0x30>)
 8009130:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009132:	4a08      	ldr	r2, [pc, #32]	; (8009154 <shci_init+0x34>)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009138:	4806      	ldr	r0, [pc, #24]	; (8009154 <shci_init+0x34>)
 800913a:	f000 f911 	bl	8009360 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 f894 	bl	8009270 <TlInit>

  return;
 8009148:	bf00      	nop
}
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	200002cc 	.word	0x200002cc
 8009154:	200002ac 	.word	0x200002ac

08009158 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800915e:	4822      	ldr	r0, [pc, #136]	; (80091e8 <shci_user_evt_proc+0x90>)
 8009160:	f001 fce4 	bl	800ab2c <LST_is_empty>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d12b      	bne.n	80091c2 <shci_user_evt_proc+0x6a>
 800916a:	4b20      	ldr	r3, [pc, #128]	; (80091ec <shci_user_evt_proc+0x94>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d027      	beq.n	80091c2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009172:	f107 030c 	add.w	r3, r7, #12
 8009176:	4619      	mov	r1, r3
 8009178:	481b      	ldr	r0, [pc, #108]	; (80091e8 <shci_user_evt_proc+0x90>)
 800917a:	f001 fd5e 	bl	800ac3a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800917e:	4b1c      	ldr	r3, [pc, #112]	; (80091f0 <shci_user_evt_proc+0x98>)
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00c      	beq.n	80091a0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800918a:	2301      	movs	r3, #1
 800918c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800918e:	4b18      	ldr	r3, [pc, #96]	; (80091f0 <shci_user_evt_proc+0x98>)
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	1d3a      	adds	r2, r7, #4
 8009194:	4610      	mov	r0, r2
 8009196:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009198:	793a      	ldrb	r2, [r7, #4]
 800919a:	4b14      	ldr	r3, [pc, #80]	; (80091ec <shci_user_evt_proc+0x94>)
 800919c:	701a      	strb	r2, [r3, #0]
 800919e:	e002      	b.n	80091a6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80091a0:	4b12      	ldr	r3, [pc, #72]	; (80091ec <shci_user_evt_proc+0x94>)
 80091a2:	2201      	movs	r2, #1
 80091a4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80091a6:	4b11      	ldr	r3, [pc, #68]	; (80091ec <shci_user_evt_proc+0x94>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d004      	beq.n	80091b8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 fa95 	bl	80096e0 <TL_MM_EvtDone>
 80091b6:	e004      	b.n	80091c2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4619      	mov	r1, r3
 80091bc:	480a      	ldr	r0, [pc, #40]	; (80091e8 <shci_user_evt_proc+0x90>)
 80091be:	f001 fcd5 	bl	800ab6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80091c2:	4809      	ldr	r0, [pc, #36]	; (80091e8 <shci_user_evt_proc+0x90>)
 80091c4:	f001 fcb2 	bl	800ab2c <LST_is_empty>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d107      	bne.n	80091de <shci_user_evt_proc+0x86>
 80091ce:	4b07      	ldr	r3, [pc, #28]	; (80091ec <shci_user_evt_proc+0x94>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80091d6:	4804      	ldr	r0, [pc, #16]	; (80091e8 <shci_user_evt_proc+0x90>)
 80091d8:	f7f7 f8f0 	bl	80003bc <shci_notify_asynch_evt>
  }


  return;
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
}
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	2000026c 	.word	0x2000026c
 80091ec:	2000027c 	.word	0x2000027c
 80091f0:	200002ac 	.word	0x200002ac

080091f4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60ba      	str	r2, [r7, #8]
 80091fc:	607b      	str	r3, [r7, #4]
 80091fe:	4603      	mov	r3, r0
 8009200:	81fb      	strh	r3, [r7, #14]
 8009202:	460b      	mov	r3, r1
 8009204:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009206:	2000      	movs	r0, #0
 8009208:	f000 f864 	bl	80092d4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800920c:	4b16      	ldr	r3, [pc, #88]	; (8009268 <shci_send+0x74>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	89fa      	ldrh	r2, [r7, #14]
 8009212:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <shci_send+0x74>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	7b7a      	ldrb	r2, [r7, #13]
 800921c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800921e:	4b12      	ldr	r3, [pc, #72]	; (8009268 <shci_send+0x74>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	330c      	adds	r3, #12
 8009224:	7b7a      	ldrb	r2, [r7, #13]
 8009226:	68b9      	ldr	r1, [r7, #8]
 8009228:	4618      	mov	r0, r3
 800922a:	f007 faeb 	bl	8010804 <memcpy>

  shciContext.io.Send(0,0);
 800922e:	4b0f      	ldr	r3, [pc, #60]	; (800926c <shci_send+0x78>)
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2100      	movs	r1, #0
 8009234:	2000      	movs	r0, #0
 8009236:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009238:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800923c:	f7f7 f8de 	bl	80003fc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f103 0008 	add.w	r0, r3, #8
 8009246:	4b08      	ldr	r3, [pc, #32]	; (8009268 <shci_send+0x74>)
 8009248:	6819      	ldr	r1, [r3, #0]
 800924a:	4b07      	ldr	r3, [pc, #28]	; (8009268 <shci_send+0x74>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	789b      	ldrb	r3, [r3, #2]
 8009250:	3303      	adds	r3, #3
 8009252:	461a      	mov	r2, r3
 8009254:	f007 fad6 	bl	8010804 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009258:	2001      	movs	r0, #1
 800925a:	f000 f83b 	bl	80092d4 <Cmd_SetStatus>

  return;
 800925e:	bf00      	nop
}
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20000278 	.word	0x20000278
 800926c:	200002ac 	.word	0x200002ac

08009270 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009278:	4a10      	ldr	r2, [pc, #64]	; (80092bc <TlInit+0x4c>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800927e:	4810      	ldr	r0, [pc, #64]	; (80092c0 <TlInit+0x50>)
 8009280:	f001 fc44 	bl	800ab0c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009284:	2001      	movs	r0, #1
 8009286:	f000 f825 	bl	80092d4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800928a:	4b0e      	ldr	r3, [pc, #56]	; (80092c4 <TlInit+0x54>)
 800928c:	2201      	movs	r2, #1
 800928e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009290:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <TlInit+0x58>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00c      	beq.n	80092b2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800929c:	4b0b      	ldr	r3, [pc, #44]	; (80092cc <TlInit+0x5c>)
 800929e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80092a0:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <TlInit+0x60>)
 80092a2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80092a4:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <TlInit+0x58>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f107 020c 	add.w	r2, r7, #12
 80092ac:	4610      	mov	r0, r2
 80092ae:	4798      	blx	r3
  }

  return;
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
}
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20000278 	.word	0x20000278
 80092c0:	2000026c 	.word	0x2000026c
 80092c4:	2000027c 	.word	0x2000027c
 80092c8:	200002ac 	.word	0x200002ac
 80092cc:	08009325 	.word	0x08009325
 80092d0:	0800933d 	.word	0x0800933d

080092d4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10b      	bne.n	80092fc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80092e4:	4b0d      	ldr	r3, [pc, #52]	; (800931c <Cmd_SetStatus+0x48>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80092ec:	4b0b      	ldr	r3, [pc, #44]	; (800931c <Cmd_SetStatus+0x48>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2000      	movs	r0, #0
 80092f2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80092f4:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <Cmd_SetStatus+0x4c>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80092fa:	e00b      	b.n	8009314 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80092fc:	4b08      	ldr	r3, [pc, #32]	; (8009320 <Cmd_SetStatus+0x4c>)
 80092fe:	2201      	movs	r2, #1
 8009300:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009302:	4b06      	ldr	r3, [pc, #24]	; (800931c <Cmd_SetStatus+0x48>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800930a:	4b04      	ldr	r3, [pc, #16]	; (800931c <Cmd_SetStatus+0x48>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2001      	movs	r0, #1
 8009310:	4798      	blx	r3
  return;
 8009312:	bf00      	nop
 8009314:	bf00      	nop
}
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	200002cc 	.word	0x200002cc
 8009320:	20000274 	.word	0x20000274

08009324 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800932c:	2000      	movs	r0, #0
 800932e:	f7f7 f855 	bl	80003dc <shci_cmd_resp_release>

  return;
 8009332:	bf00      	nop
}
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
	...

0800933c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	4805      	ldr	r0, [pc, #20]	; (800935c <TlUserEvtReceived+0x20>)
 8009348:	f001 fc34 	bl	800abb4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800934c:	4803      	ldr	r0, [pc, #12]	; (800935c <TlUserEvtReceived+0x20>)
 800934e:	f7f7 f835 	bl	80003bc <shci_notify_asynch_evt>

  return;
 8009352:	bf00      	nop
}
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	2000026c 	.word	0x2000026c

08009360 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a05      	ldr	r2, [pc, #20]	; (8009380 <shci_register_io_bus+0x20>)
 800936c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a04      	ldr	r2, [pc, #16]	; (8009384 <shci_register_io_bus+0x24>)
 8009372:	611a      	str	r2, [r3, #16]

  return;
 8009374:	bf00      	nop
}
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	0800947d 	.word	0x0800947d
 8009384:	080094d1 	.word	0x080094d1

08009388 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800938c:	f006 fb86 	bl	800fa9c <HW_IPCC_Enable>

  return;
 8009390:	bf00      	nop
}
 8009392:	bd80      	pop	{r7, pc}

08009394 <TL_Init>:


void TL_Init( void )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009398:	4b10      	ldr	r3, [pc, #64]	; (80093dc <TL_Init+0x48>)
 800939a:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <TL_Init+0x4c>)
 800939c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800939e:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <TL_Init+0x48>)
 80093a0:	4a10      	ldr	r2, [pc, #64]	; (80093e4 <TL_Init+0x50>)
 80093a2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80093a4:	4b0d      	ldr	r3, [pc, #52]	; (80093dc <TL_Init+0x48>)
 80093a6:	4a10      	ldr	r2, [pc, #64]	; (80093e8 <TL_Init+0x54>)
 80093a8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80093aa:	4b0c      	ldr	r3, [pc, #48]	; (80093dc <TL_Init+0x48>)
 80093ac:	4a0f      	ldr	r2, [pc, #60]	; (80093ec <TL_Init+0x58>)
 80093ae:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 80093b0:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <TL_Init+0x48>)
 80093b2:	4a0f      	ldr	r2, [pc, #60]	; (80093f0 <TL_Init+0x5c>)
 80093b4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80093b6:	4b09      	ldr	r3, [pc, #36]	; (80093dc <TL_Init+0x48>)
 80093b8:	4a0e      	ldr	r2, [pc, #56]	; (80093f4 <TL_Init+0x60>)
 80093ba:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80093bc:	4b07      	ldr	r3, [pc, #28]	; (80093dc <TL_Init+0x48>)
 80093be:	4a0e      	ldr	r2, [pc, #56]	; (80093f8 <TL_Init+0x64>)
 80093c0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80093c2:	4b06      	ldr	r3, [pc, #24]	; (80093dc <TL_Init+0x48>)
 80093c4:	4a0d      	ldr	r2, [pc, #52]	; (80093fc <TL_Init+0x68>)
 80093c6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80093c8:	4b04      	ldr	r3, [pc, #16]	; (80093dc <TL_Init+0x48>)
 80093ca:	4a0d      	ldr	r2, [pc, #52]	; (8009400 <TL_Init+0x6c>)
 80093cc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80093ce:	4b03      	ldr	r3, [pc, #12]	; (80093dc <TL_Init+0x48>)
 80093d0:	4a0c      	ldr	r2, [pc, #48]	; (8009404 <TL_Init+0x70>)
 80093d2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80093d4:	f006 fb76 	bl	800fac4 <HW_IPCC_Init>

  return;
 80093d8:	bf00      	nop
}
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20030000 	.word	0x20030000
 80093e0:	20030028 	.word	0x20030028
 80093e4:	20030048 	.word	0x20030048
 80093e8:	20030058 	.word	0x20030058
 80093ec:	20030064 	.word	0x20030064
 80093f0:	2003006c 	.word	0x2003006c
 80093f4:	20030074 	.word	0x20030074
 80093f8:	2003007c 	.word	0x2003007c
 80093fc:	20030098 	.word	0x20030098
 8009400:	2003009c 	.word	0x2003009c
 8009404:	200300a8 	.word	0x200300a8

08009408 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800940e:	e01c      	b.n	800944a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009410:	1d3b      	adds	r3, r7, #4
 8009412:	4619      	mov	r1, r3
 8009414:	4812      	ldr	r0, [pc, #72]	; (8009460 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009416:	f001 fc10 	bl	800ac3a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	7a5b      	ldrb	r3, [r3, #9]
 800941e:	2b0f      	cmp	r3, #15
 8009420:	d003      	beq.n	800942a <HW_IPCC_BLE_RxEvtNot+0x22>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	7a5b      	ldrb	r3, [r3, #9]
 8009426:	2b0e      	cmp	r3, #14
 8009428:	d105      	bne.n	8009436 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4619      	mov	r1, r3
 800942e:	2002      	movs	r0, #2
 8009430:	f000 f9ba 	bl	80097a8 <OutputDbgTrace>
 8009434:	e004      	b.n	8009440 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4619      	mov	r1, r3
 800943a:	2003      	movs	r0, #3
 800943c:	f000 f9b4 	bl	80097a8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009440:	4b08      	ldr	r3, [pc, #32]	; (8009464 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4610      	mov	r0, r2
 8009448:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800944a:	4805      	ldr	r0, [pc, #20]	; (8009460 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800944c:	f001 fb6e 	bl	800ab2c <LST_is_empty>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0dc      	beq.n	8009410 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009456:	bf00      	nop
}
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	200300c4 	.word	0x200300c4
 8009464:	200002d8 	.word	0x200002d8

08009468 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800946c:	4b02      	ldr	r3, [pc, #8]	; (8009478 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4798      	blx	r3

  return;
 8009472:	bf00      	nop
}
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	200002dc 	.word	0x200002dc

0800947c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009488:	480d      	ldr	r0, [pc, #52]	; (80094c0 <TL_SYS_Init+0x44>)
 800948a:	f001 fb3f 	bl	800ab0c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800948e:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <TL_SYS_Init+0x48>)
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	689a      	ldr	r2, [r3, #8]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	4a08      	ldr	r2, [pc, #32]	; (80094c0 <TL_SYS_Init+0x44>)
 80094a0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80094a2:	f006 fb3d 	bl	800fb20 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a07      	ldr	r2, [pc, #28]	; (80094c8 <TL_SYS_Init+0x4c>)
 80094ac:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	4a06      	ldr	r2, [pc, #24]	; (80094cc <TL_SYS_Init+0x50>)
 80094b4:	6013      	str	r3, [r2, #0]

  return 0;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	200300cc 	.word	0x200300cc
 80094c4:	20030000 	.word	0x20030000
 80094c8:	200002e0 	.word	0x200002e0
 80094cc:	200002e4 	.word	0x200002e4

080094d0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80094dc:	4b09      	ldr	r3, [pc, #36]	; (8009504 <TL_SYS_SendCmd+0x34>)
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2210      	movs	r2, #16
 80094e4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80094e6:	4b07      	ldr	r3, [pc, #28]	; (8009504 <TL_SYS_SendCmd+0x34>)
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4619      	mov	r1, r3
 80094ee:	2004      	movs	r0, #4
 80094f0:	f000 f95a 	bl	80097a8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80094f4:	f006 fb1e 	bl	800fb34 <HW_IPCC_SYS_SendCmd>

  return 0;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20030000 	.word	0x20030000

08009508 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4619      	mov	r1, r3
 8009514:	2005      	movs	r0, #5
 8009516:	f000 f947 	bl	80097a8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800951a:	4b05      	ldr	r3, [pc, #20]	; (8009530 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a03      	ldr	r2, [pc, #12]	; (800952c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009520:	68d2      	ldr	r2, [r2, #12]
 8009522:	6812      	ldr	r2, [r2, #0]
 8009524:	4610      	mov	r0, r2
 8009526:	4798      	blx	r3

  return;
 8009528:	bf00      	nop
}
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20030000 	.word	0x20030000
 8009530:	200002e0 	.word	0x200002e0

08009534 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800953a:	e00e      	b.n	800955a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800953c:	1d3b      	adds	r3, r7, #4
 800953e:	4619      	mov	r1, r3
 8009540:	480b      	ldr	r0, [pc, #44]	; (8009570 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009542:	f001 fb7a 	bl	800ac3a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4619      	mov	r1, r3
 800954a:	2006      	movs	r0, #6
 800954c:	f000 f92c 	bl	80097a8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009550:	4b08      	ldr	r3, [pc, #32]	; (8009574 <HW_IPCC_SYS_EvtNot+0x40>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	4610      	mov	r0, r2
 8009558:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800955a:	4805      	ldr	r0, [pc, #20]	; (8009570 <HW_IPCC_SYS_EvtNot+0x3c>)
 800955c:	f001 fae6 	bl	800ab2c <LST_is_empty>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0ea      	beq.n	800953c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009566:	bf00      	nop
}
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	200300cc 	.word	0x200300cc
 8009574:	200002e4 	.word	0x200002e4

08009578 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <TL_THREAD_Init+0x34>)
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	689a      	ldr	r2, [r3, #8]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800959e:	f006 faef 	bl	800fb80 <HW_IPCC_THREAD_Init>

  return;
 80095a2:	bf00      	nop
}
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20030000 	.word	0x20030000

080095b0 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 80095b4:	4b04      	ldr	r3, [pc, #16]	; (80095c8 <TL_OT_SendCmd+0x18>)
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	2208      	movs	r2, #8
 80095bc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 80095be:	f006 faed 	bl	800fb9c <HW_IPCC_OT_SendCmd>

  return;
 80095c2:	bf00      	nop
}
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20030000 	.word	0x20030000

080095cc <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80095d0:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <TL_CLI_SendCmd+0x18>)
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	220a      	movs	r2, #10
 80095d8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80095da:	f006 faed 	bl	800fbb8 <HW_IPCC_CLI_SendCmd>

  return;
 80095de:	bf00      	nop
}
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20030000 	.word	0x20030000

080095e8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80095ec:	4b04      	ldr	r3, [pc, #16]	; (8009600 <TL_THREAD_SendAck+0x18>)
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	220d      	movs	r2, #13
 80095f4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80095f6:	f006 fae9 	bl	800fbcc <HW_IPCC_THREAD_SendAck>

  return;
 80095fa:	bf00      	nop
}
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20030000 	.word	0x20030000

08009604 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <TL_THREAD_CliSendAck+0x18>)
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	220d      	movs	r2, #13
 8009610:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8009612:	f006 fae9 	bl	800fbe8 <HW_IPCC_THREAD_CliSendAck>

  return;
 8009616:	bf00      	nop
}
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20030000 	.word	0x20030000

08009620 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8009624:	4b03      	ldr	r3, [pc, #12]	; (8009634 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	4618      	mov	r0, r3
 800962c:	f005 ff7c 	bl	800f528 <TL_OT_CmdEvtReceived>

  return;
 8009630:	bf00      	nop
}
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20030000 	.word	0x20030000

08009638 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800963c:	4b03      	ldr	r3, [pc, #12]	; (800964c <HW_IPCC_THREAD_EvtNot+0x14>)
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4618      	mov	r0, r3
 8009644:	f005 ff7a 	bl	800f53c <TL_THREAD_NotReceived>

  return;
 8009648:	bf00      	nop
}
 800964a:	bd80      	pop	{r7, pc}
 800964c:	20030000 	.word	0x20030000

08009650 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8009654:	4b03      	ldr	r3, [pc, #12]	; (8009664 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	4618      	mov	r0, r3
 800965c:	f006 f81c 	bl	800f698 <TL_THREAD_CliNotReceived>

  return;
 8009660:	bf00      	nop
}
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20030000 	.word	0x20030000

08009668 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009670:	4817      	ldr	r0, [pc, #92]	; (80096d0 <TL_MM_Init+0x68>)
 8009672:	f001 fa4b 	bl	800ab0c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009676:	4817      	ldr	r0, [pc, #92]	; (80096d4 <TL_MM_Init+0x6c>)
 8009678:	f001 fa48 	bl	800ab0c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800967c:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <TL_MM_Init+0x70>)
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	4a16      	ldr	r2, [pc, #88]	; (80096dc <TL_MM_Init+0x74>)
 8009682:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009684:	4b15      	ldr	r3, [pc, #84]	; (80096dc <TL_MM_Init+0x74>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	6892      	ldr	r2, [r2, #8]
 800968c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <TL_MM_Init+0x74>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	68d2      	ldr	r2, [r2, #12]
 8009696:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009698:	4b10      	ldr	r3, [pc, #64]	; (80096dc <TL_MM_Init+0x74>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a0c      	ldr	r2, [pc, #48]	; (80096d0 <TL_MM_Init+0x68>)
 800969e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80096a0:	4b0e      	ldr	r3, [pc, #56]	; (80096dc <TL_MM_Init+0x74>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	6812      	ldr	r2, [r2, #0]
 80096a8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80096aa:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <TL_MM_Init+0x74>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6852      	ldr	r2, [r2, #4]
 80096b2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <TL_MM_Init+0x74>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6912      	ldr	r2, [r2, #16]
 80096bc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80096be:	4b07      	ldr	r3, [pc, #28]	; (80096dc <TL_MM_Init+0x74>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	6952      	ldr	r2, [r2, #20]
 80096c6:	619a      	str	r2, [r3, #24]

  return;
 80096c8:	bf00      	nop
}
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	200300b4 	.word	0x200300b4
 80096d4:	200002d0 	.word	0x200002d0
 80096d8:	20030000 	.word	0x20030000
 80096dc:	200002e8 	.word	0x200002e8

080096e0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	4807      	ldr	r0, [pc, #28]	; (8009708 <TL_MM_EvtDone+0x28>)
 80096ec:	f001 fa62 	bl	800abb4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	2000      	movs	r0, #0
 80096f4:	f000 f858 	bl	80097a8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80096f8:	4804      	ldr	r0, [pc, #16]	; (800970c <TL_MM_EvtDone+0x2c>)
 80096fa:	f006 faa7 	bl	800fc4c <HW_IPCC_MM_SendFreeBuf>

  return;
 80096fe:	bf00      	nop
}
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	200002d0 	.word	0x200002d0
 800970c:	08009711 	.word	0x08009711

08009710 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009716:	e00c      	b.n	8009732 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009718:	1d3b      	adds	r3, r7, #4
 800971a:	4619      	mov	r1, r3
 800971c:	480a      	ldr	r0, [pc, #40]	; (8009748 <SendFreeBuf+0x38>)
 800971e:	f001 fa8c 	bl	800ac3a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009722:	4b0a      	ldr	r3, [pc, #40]	; (800974c <SendFreeBuf+0x3c>)
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f001 fa41 	bl	800abb4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009732:	4805      	ldr	r0, [pc, #20]	; (8009748 <SendFreeBuf+0x38>)
 8009734:	f001 f9fa 	bl	800ab2c <LST_is_empty>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0ec      	beq.n	8009718 <SendFreeBuf+0x8>
  }

  return;
 800973e:	bf00      	nop
}
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	200002d0 	.word	0x200002d0
 800974c:	20030000 	.word	0x20030000

08009750 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009754:	4805      	ldr	r0, [pc, #20]	; (800976c <TL_TRACES_Init+0x1c>)
 8009756:	f001 f9d9 	bl	800ab0c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800975a:	4b05      	ldr	r3, [pc, #20]	; (8009770 <TL_TRACES_Init+0x20>)
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	4a03      	ldr	r2, [pc, #12]	; (800976c <TL_TRACES_Init+0x1c>)
 8009760:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009762:	f006 faa9 	bl	800fcb8 <HW_IPCC_TRACES_Init>

  return;
 8009766:	bf00      	nop
}
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	200300bc 	.word	0x200300bc
 8009770:	20030000 	.word	0x20030000

08009774 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800977a:	e008      	b.n	800978e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800977c:	1d3b      	adds	r3, r7, #4
 800977e:	4619      	mov	r1, r3
 8009780:	4808      	ldr	r0, [pc, #32]	; (80097a4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009782:	f001 fa5a 	bl	800ac3a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4618      	mov	r0, r3
 800978a:	f7f6 fe49 	bl	8000420 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800978e:	4805      	ldr	r0, [pc, #20]	; (80097a4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009790:	f001 f9cc 	bl	800ab2c <LST_is_empty>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0f0      	beq.n	800977c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800979a:	bf00      	nop
}
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200300bc 	.word	0x200300bc

080097a8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	6039      	str	r1, [r7, #0]
 80097b2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	2b06      	cmp	r3, #6
 80097b8:	d849      	bhi.n	800984e <OutputDbgTrace+0xa6>
 80097ba:	a201      	add	r2, pc, #4	; (adr r2, 80097c0 <OutputDbgTrace+0x18>)
 80097bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c0:	080097dd 	.word	0x080097dd
 80097c4:	080097ff 	.word	0x080097ff
 80097c8:	08009805 	.word	0x08009805
 80097cc:	0800981f 	.word	0x0800981f
 80097d0:	0800982b 	.word	0x0800982b
 80097d4:	08009831 	.word	0x08009831
 80097d8:	08009843 	.word	0x08009843
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	7a5b      	ldrb	r3, [r3, #9]
 80097e4:	2b0f      	cmp	r3, #15
 80097e6:	d004      	beq.n	80097f2 <OutputDbgTrace+0x4a>
 80097e8:	2bff      	cmp	r3, #255	; 0xff
 80097ea:	d004      	beq.n	80097f6 <OutputDbgTrace+0x4e>
 80097ec:	2b0e      	cmp	r3, #14
 80097ee:	d004      	beq.n	80097fa <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80097f0:	e004      	b.n	80097fc <OutputDbgTrace+0x54>
          break;
 80097f2:	bf00      	nop
 80097f4:	e02c      	b.n	8009850 <OutputDbgTrace+0xa8>
          break;
 80097f6:	bf00      	nop
 80097f8:	e02a      	b.n	8009850 <OutputDbgTrace+0xa8>
          break;
 80097fa:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80097fc:	e028      	b.n	8009850 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009802:	e025      	b.n	8009850 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	7a5b      	ldrb	r3, [r3, #9]
 800980c:	2b0e      	cmp	r3, #14
 800980e:	d002      	beq.n	8009816 <OutputDbgTrace+0x6e>
 8009810:	2b0f      	cmp	r3, #15
 8009812:	d002      	beq.n	800981a <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009814:	e002      	b.n	800981c <OutputDbgTrace+0x74>
          break;
 8009816:	bf00      	nop
 8009818:	e01a      	b.n	8009850 <OutputDbgTrace+0xa8>
          break;
 800981a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800981c:	e018      	b.n	8009850 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	7a5b      	ldrb	r3, [r3, #9]
 8009826:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009828:	e012      	b.n	8009850 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800982e:	e00f      	b.n	8009850 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	7a5b      	ldrb	r3, [r3, #9]
 8009838:	2b0e      	cmp	r3, #14
 800983a:	d000      	beq.n	800983e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800983c:	e000      	b.n	8009840 <OutputDbgTrace+0x98>
          break;
 800983e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009840:	e006      	b.n	8009850 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	7a5b      	ldrb	r3, [r3, #9]
 800984a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800984c:	e000      	b.n	8009850 <OutputDbgTrace+0xa8>

    default:
      break;
 800984e:	bf00      	nop
  }

  return;
 8009850:	bf00      	nop
}
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
 8009868:	4613      	mov	r3, r2
 800986a:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800986c:	f005 fe76 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009870:	f005 fe12 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009874:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	f062 0260 	orn	r2, r2, #96	; 0x60
 800987e:	701a      	strb	r2, [r3, #0]
 8009880:	2200      	movs	r2, #0
 8009882:	705a      	strb	r2, [r3, #1]
 8009884:	2200      	movs	r2, #0
 8009886:	709a      	strb	r2, [r3, #2]
 8009888:	2200      	movs	r2, #0
 800988a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	f042 0203 	orr.w	r2, r2, #3
 8009894:	711a      	strb	r2, [r3, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	715a      	strb	r2, [r3, #5]
 800989a:	2200      	movs	r2, #0
 800989c:	719a      	strb	r2, [r3, #6]
 800989e:	2200      	movs	r2, #0
 80098a0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 80098ae:	78ba      	ldrb	r2, [r7, #2]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80098b4:	f005 fe14 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80098b8:	f005 fdfa 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80098bc:	60f8      	str	r0, [r7, #12]
}
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b086      	sub	sp, #24
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	4613      	mov	r3, r2
 80098d2:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 80098d4:	f005 fe42 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80098d8:	f005 fdde 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 80098dc:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f062 025f 	orn	r2, r2, #95	; 0x5f
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	2200      	movs	r2, #0
 80098ea:	705a      	strb	r2, [r3, #1]
 80098ec:	2200      	movs	r2, #0
 80098ee:	709a      	strb	r2, [r3, #2]
 80098f0:	2200      	movs	r2, #0
 80098f2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f042 0203 	orr.w	r2, r2, #3
 80098fc:	711a      	strb	r2, [r3, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	715a      	strb	r2, [r3, #5]
 8009902:	2200      	movs	r2, #0
 8009904:	719a      	strb	r2, [r3, #6]
 8009906:	2200      	movs	r2, #0
 8009908:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8009916:	79fa      	ldrb	r2, [r7, #7]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800991c:	f005 fde0 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009920:	f005 fdc6 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009924:	6178      	str	r0, [r7, #20]
}
 8009926:	bf00      	nop
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800993a:	f005 fe0f 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800993e:	f005 fdab 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009942:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f062 025e 	orn	r2, r2, #94	; 0x5e
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	2200      	movs	r2, #0
 8009950:	705a      	strb	r2, [r3, #1]
 8009952:	2200      	movs	r2, #0
 8009954:	709a      	strb	r2, [r3, #2]
 8009956:	2200      	movs	r2, #0
 8009958:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	f042 0202 	orr.w	r2, r2, #2
 8009962:	711a      	strb	r2, [r3, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	715a      	strb	r2, [r3, #5]
 8009968:	2200      	movs	r2, #0
 800996a:	719a      	strb	r2, [r3, #6]
 800996c:	2200      	movs	r2, #0
 800996e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8009976:	78fa      	ldrb	r2, [r7, #3]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800997c:	f005 fdb0 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009980:	f005 fd96 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009984:	60f8      	str	r0, [r7, #12]
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800999a:	f005 fddf 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800999e:	f005 fd7b 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 80099a2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f062 025d 	orn	r2, r2, #93	; 0x5d
 80099ac:	701a      	strb	r2, [r3, #0]
 80099ae:	2200      	movs	r2, #0
 80099b0:	705a      	strb	r2, [r3, #1]
 80099b2:	2200      	movs	r2, #0
 80099b4:	709a      	strb	r2, [r3, #2]
 80099b6:	2200      	movs	r2, #0
 80099b8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f042 0202 	orr.w	r2, r2, #2
 80099c2:	711a      	strb	r2, [r3, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	715a      	strb	r2, [r3, #5]
 80099c8:	2200      	movs	r2, #0
 80099ca:	719a      	strb	r2, [r3, #6]
 80099cc:	2200      	movs	r2, #0
 80099ce:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 80099d6:	78fa      	ldrb	r2, [r7, #3]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80099dc:	f005 fd80 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80099e0:	f005 fd66 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80099e4:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	b2db      	uxtb	r3, r3
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80099fe:	f005 fdad 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009a02:	f005 fd49 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009a06:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f062 0250 	orn	r2, r2, #80	; 0x50
 8009a10:	701a      	strb	r2, [r3, #0]
 8009a12:	2200      	movs	r2, #0
 8009a14:	705a      	strb	r2, [r3, #1]
 8009a16:	2200      	movs	r2, #0
 8009a18:	709a      	strb	r2, [r3, #2]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f042 0202 	orr.w	r2, r2, #2
 8009a26:	711a      	strb	r2, [r3, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	715a      	strb	r2, [r3, #5]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	719a      	strb	r2, [r3, #6]
 8009a30:	2200      	movs	r2, #0
 8009a32:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8009a40:	f005 fd4e 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009a44:	f005 fd34 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009a48:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	b2db      	uxtb	r3, r3
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009a60:	f005 fd7c 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009a64:	f005 fd18 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009a68:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	2200      	movs	r2, #0
 8009a76:	705a      	strb	r2, [r3, #1]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	709a      	strb	r2, [r3, #2]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f042 0201 	orr.w	r2, r2, #1
 8009a88:	711a      	strb	r2, [r3, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	715a      	strb	r2, [r3, #5]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	719a      	strb	r2, [r3, #6]
 8009a92:	2200      	movs	r2, #0
 8009a94:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009a9c:	f005 fd20 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009aa0:	f005 fd06 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009aa4:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	b2db      	uxtb	r3, r3
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8009ac0:	f005 fd4c 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009ac4:	f005 fce8 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009ac8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f062 0256 	orn	r2, r2, #86	; 0x56
 8009ad2:	701a      	strb	r2, [r3, #0]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	705a      	strb	r2, [r3, #1]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	709a      	strb	r2, [r3, #2]
 8009adc:	2200      	movs	r2, #0
 8009ade:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f042 0202 	orr.w	r2, r2, #2
 8009ae8:	711a      	strb	r2, [r3, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	715a      	strb	r2, [r3, #5]
 8009aee:	2200      	movs	r2, #0
 8009af0:	719a      	strb	r2, [r3, #6]
 8009af2:	2200      	movs	r2, #0
 8009af4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8009afc:	887a      	ldrh	r2, [r7, #2]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8009b02:	f005 fced 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009b06:	f005 fcd3 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009b0a:	60f8      	str	r0, [r7, #12]
}
 8009b0c:	bf00      	nop
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009b1c:	f005 fd1e 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009b20:	f005 fcba 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009b24:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f062 0261 	orn	r2, r2, #97	; 0x61
 8009b2e:	701a      	strb	r2, [r3, #0]
 8009b30:	2200      	movs	r2, #0
 8009b32:	705a      	strb	r2, [r3, #1]
 8009b34:	2200      	movs	r2, #0
 8009b36:	709a      	strb	r2, [r3, #2]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f042 0201 	orr.w	r2, r2, #1
 8009b44:	711a      	strb	r2, [r3, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	715a      	strb	r2, [r3, #5]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	719a      	strb	r2, [r3, #6]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009b58:	f005 fcc2 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009b5c:	f005 fca8 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009b60:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	b2db      	uxtb	r3, r3
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009b78:	f005 fcf0 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009b7c:	f005 fc8c 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009b80:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	705a      	strb	r2, [r3, #1]
 8009b90:	2200      	movs	r2, #0
 8009b92:	709a      	strb	r2, [r3, #2]
 8009b94:	2200      	movs	r2, #0
 8009b96:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f042 0201 	orr.w	r2, r2, #1
 8009ba0:	711a      	strb	r2, [r3, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	715a      	strb	r2, [r3, #5]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	719a      	strb	r2, [r3, #6]
 8009baa:	2200      	movs	r2, #0
 8009bac:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009bb4:	f005 fc94 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009bb8:	f005 fc7a 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009bbc:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	b2db      	uxtb	r3, r3
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009bd4:	f005 fcc2 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009bd8:	f005 fc5e 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009bdc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f062 0255 	orn	r2, r2, #85	; 0x55
 8009be6:	701a      	strb	r2, [r3, #0]
 8009be8:	2200      	movs	r2, #0
 8009bea:	705a      	strb	r2, [r3, #1]
 8009bec:	2200      	movs	r2, #0
 8009bee:	709a      	strb	r2, [r3, #2]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f042 0201 	orr.w	r2, r2, #1
 8009bfc:	711a      	strb	r2, [r3, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	715a      	strb	r2, [r3, #5]
 8009c02:	2200      	movs	r2, #0
 8009c04:	719a      	strb	r2, [r3, #6]
 8009c06:	2200      	movs	r2, #0
 8009c08:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009c10:	f005 fc66 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009c14:	f005 fc4c 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009c18:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	b29b      	uxth	r3, r3
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009c30:	f005 fc94 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009c34:	f005 fc30 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009c38:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f062 0254 	orn	r2, r2, #84	; 0x54
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	2200      	movs	r2, #0
 8009c46:	705a      	strb	r2, [r3, #1]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	709a      	strb	r2, [r3, #2]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f042 0201 	orr.w	r2, r2, #1
 8009c58:	711a      	strb	r2, [r3, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	715a      	strb	r2, [r3, #5]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	719a      	strb	r2, [r3, #6]
 8009c62:	2200      	movs	r2, #0
 8009c64:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009c6c:	f005 fc38 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009c70:	f005 fc1e 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009c74:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	b2db      	uxtb	r3, r3
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009c8c:	f005 fc66 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009c90:	f005 fc02 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009c94:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f062 0253 	orn	r2, r2, #83	; 0x53
 8009c9e:	701a      	strb	r2, [r3, #0]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	705a      	strb	r2, [r3, #1]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	709a      	strb	r2, [r3, #2]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f042 0201 	orr.w	r2, r2, #1
 8009cb4:	711a      	strb	r2, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	715a      	strb	r2, [r3, #5]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	719a      	strb	r2, [r3, #6]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009cc8:	f005 fc0a 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ccc:	f005 fbf0 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009cd0:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	689b      	ldr	r3, [r3, #8]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8009ce8:	f005 fc38 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009cec:	f005 fbd4 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009cf0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f062 0259 	orn	r2, r2, #89	; 0x59
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	705a      	strb	r2, [r3, #1]
 8009d00:	2200      	movs	r2, #0
 8009d02:	709a      	strb	r2, [r3, #2]
 8009d04:	2200      	movs	r2, #0
 8009d06:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f042 0201 	orr.w	r2, r2, #1
 8009d10:	711a      	strb	r2, [r3, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	715a      	strb	r2, [r3, #5]
 8009d16:	2200      	movs	r2, #0
 8009d18:	719a      	strb	r2, [r3, #6]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009d24:	f005 fbdc 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d28:	f005 fbc2 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d2c:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	689b      	ldr	r3, [r3, #8]

}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b086      	sub	sp, #24
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8009d48:	f005 fc08 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d4c:	f005 fba4 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009d50:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f062 0258 	orn	r2, r2, #88	; 0x58
 8009d5a:	701a      	strb	r2, [r3, #0]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	705a      	strb	r2, [r3, #1]
 8009d60:	2200      	movs	r2, #0
 8009d62:	709a      	strb	r2, [r3, #2]
 8009d64:	2200      	movs	r2, #0
 8009d66:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f042 0203 	orr.w	r2, r2, #3
 8009d70:	711a      	strb	r2, [r3, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	715a      	strb	r2, [r3, #5]
 8009d76:	2200      	movs	r2, #0
 8009d78:	719a      	strb	r2, [r3, #6]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8009d90:	6a3a      	ldr	r2, [r7, #32]
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8009d96:	f005 fba3 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d9a:	f005 fb89 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d9e:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	b2db      	uxtb	r3, r3
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8009dba:	f005 fbcf 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009dbe:	f005 fb6b 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009dc2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	705a      	strb	r2, [r3, #1]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	709a      	strb	r2, [r3, #2]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	711a      	strb	r2, [r3, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	715a      	strb	r2, [r3, #5]
 8009de8:	2200      	movs	r2, #0
 8009dea:	719a      	strb	r2, [r3, #6]
 8009dec:	2200      	movs	r2, #0
 8009dee:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8009df0:	887a      	ldrh	r2, [r7, #2]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009df6:	f005 fb73 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009dfa:	f005 fb59 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009dfe:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	b2db      	uxtb	r3, r3
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8009e18:	f005 fba0 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e1c:	f005 fb3c 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009e20:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f062 0249 	orn	r2, r2, #73	; 0x49
 8009e2a:	701a      	strb	r2, [r3, #0]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	705a      	strb	r2, [r3, #1]
 8009e30:	2200      	movs	r2, #0
 8009e32:	709a      	strb	r2, [r3, #2]
 8009e34:	2200      	movs	r2, #0
 8009e36:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f042 0201 	orr.w	r2, r2, #1
 8009e40:	711a      	strb	r2, [r3, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	715a      	strb	r2, [r3, #5]
 8009e46:	2200      	movs	r2, #0
 8009e48:	719a      	strb	r2, [r3, #6]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009e54:	f005 fb44 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e58:	f005 fb2a 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e5c:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	b2db      	uxtb	r3, r3
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8009e78:	f005 fb70 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e7c:	f005 fb0c 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009e80:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f062 0257 	orn	r2, r2, #87	; 0x57
 8009e8a:	701a      	strb	r2, [r3, #0]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	705a      	strb	r2, [r3, #1]
 8009e90:	2200      	movs	r2, #0
 8009e92:	709a      	strb	r2, [r3, #2]
 8009e94:	2200      	movs	r2, #0
 8009e96:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f042 0202 	orr.w	r2, r2, #2
 8009ea0:	711a      	strb	r2, [r3, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	715a      	strb	r2, [r3, #5]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	719a      	strb	r2, [r3, #6]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8009eba:	f005 fb11 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ebe:	f005 faf7 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009ec2:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	b2db      	uxtb	r3, r3
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8009ed8:	f005 fb40 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009edc:	f005 fadc 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009ee0:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8009eea:	701a      	strb	r2, [r3, #0]
 8009eec:	2200      	movs	r2, #0
 8009eee:	705a      	strb	r2, [r3, #1]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	709a      	strb	r2, [r3, #2]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	711a      	strb	r2, [r3, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	715a      	strb	r2, [r3, #5]
 8009f02:	2200      	movs	r2, #0
 8009f04:	719a      	strb	r2, [r3, #6]
 8009f06:	2200      	movs	r2, #0
 8009f08:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8009f0a:	f005 fae9 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f0e:	f005 facf 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f12:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	689b      	ldr	r3, [r3, #8]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009f28:	f005 fb18 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f2c:	f005 fab4 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009f30:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f062 0269 	orn	r2, r2, #105	; 0x69
 8009f3a:	701a      	strb	r2, [r3, #0]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	705a      	strb	r2, [r3, #1]
 8009f40:	2200      	movs	r2, #0
 8009f42:	709a      	strb	r2, [r3, #2]
 8009f44:	2200      	movs	r2, #0
 8009f46:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	711a      	strb	r2, [r3, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	715a      	strb	r2, [r3, #5]
 8009f52:	2200      	movs	r2, #0
 8009f54:	719a      	strb	r2, [r3, #6]
 8009f56:	2200      	movs	r2, #0
 8009f58:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8009f5a:	f005 fac1 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f5e:	f005 faa7 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f62:	60f8      	str	r0, [r7, #12]
}
 8009f64:	bf00      	nop
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8009f78:	f005 faf0 	bl	800f55c <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8009f7c:	4a15      	ldr	r2, [pc, #84]	; (8009fd4 <otSetStateChangedCallback+0x68>)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f82:	f005 fa89 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009f86:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f062 0268 	orn	r2, r2, #104	; 0x68
 8009f90:	701a      	strb	r2, [r3, #0]
 8009f92:	2200      	movs	r2, #0
 8009f94:	705a      	strb	r2, [r3, #1]
 8009f96:	2200      	movs	r2, #0
 8009f98:	709a      	strb	r2, [r3, #2]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	711a      	strb	r2, [r3, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	715a      	strb	r2, [r3, #5]
 8009fac:	2200      	movs	r2, #0
 8009fae:	719a      	strb	r2, [r3, #6]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009fba:	f005 fa91 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009fbe:	f005 fa77 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009fc2:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	b2db      	uxtb	r3, r3
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	200002ec 	.word	0x200002ec

08009fd8 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009fe0:	f005 fabc 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009fe4:	f005 fa58 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 8009fe8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f062 0264 	orn	r2, r2, #100	; 0x64
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	705a      	strb	r2, [r3, #1]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	709a      	strb	r2, [r3, #2]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	711a      	strb	r2, [r3, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	715a      	strb	r2, [r3, #5]
 800a00a:	2200      	movs	r2, #0
 800a00c:	719a      	strb	r2, [r3, #6]
 800a00e:	2200      	movs	r2, #0
 800a010:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800a012:	f005 fa65 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a016:	f005 fa4b 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a01a:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	b2db      	uxtb	r3, r3
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a036:	f005 fa91 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a03a:	f005 fa2d 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a03e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	705a      	strb	r2, [r3, #1]
 800a04e:	2200      	movs	r2, #0
 800a050:	709a      	strb	r2, [r3, #2]
 800a052:	2200      	movs	r2, #0
 800a054:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	711a      	strb	r2, [r3, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	715a      	strb	r2, [r3, #5]
 800a064:	2200      	movs	r2, #0
 800a066:	719a      	strb	r2, [r3, #6]
 800a068:	2200      	movs	r2, #0
 800a06a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a06c:	78fa      	ldrb	r2, [r7, #3]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a072:	f005 fa35 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a076:	f005 fa1b 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a07a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	b2db      	uxtb	r3, r3
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a092:	f005 fa63 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a096:	f005 f9ff 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a09a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	705a      	strb	r2, [r3, #1]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	709a      	strb	r2, [r3, #2]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	711a      	strb	r2, [r3, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	715a      	strb	r2, [r3, #5]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	719a      	strb	r2, [r3, #6]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a0c4:	f005 fa0c 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a0c8:	f005 f9f2 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a0cc:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bf14      	ite	ne
 800a0d6:	2301      	movne	r3, #1
 800a0d8:	2300      	moveq	r3, #0
 800a0da:	b2db      	uxtb	r3, r3
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a0ec:	f005 fa36 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a0f0:	f005 f9d2 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a0f4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800a0fe:	701a      	strb	r2, [r3, #0]
 800a100:	2200      	movs	r2, #0
 800a102:	705a      	strb	r2, [r3, #1]
 800a104:	2200      	movs	r2, #0
 800a106:	709a      	strb	r2, [r3, #2]
 800a108:	2200      	movs	r2, #0
 800a10a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	711a      	strb	r2, [r3, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	715a      	strb	r2, [r3, #5]
 800a116:	2200      	movs	r2, #0
 800a118:	719a      	strb	r2, [r3, #6]
 800a11a:	2200      	movs	r2, #0
 800a11c:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a11e:	f005 f9df 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a122:	f005 f9c5 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a126:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	689b      	ldr	r3, [r3, #8]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a13c:	f005 fa0e 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a140:	f005 f9aa 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a144:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	2200      	movs	r2, #0
 800a152:	705a      	strb	r2, [r3, #1]
 800a154:	2200      	movs	r2, #0
 800a156:	709a      	strb	r2, [r3, #2]
 800a158:	2200      	movs	r2, #0
 800a15a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	711a      	strb	r2, [r3, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	715a      	strb	r2, [r3, #5]
 800a166:	2200      	movs	r2, #0
 800a168:	719a      	strb	r2, [r3, #6]
 800a16a:	2200      	movs	r2, #0
 800a16c:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a16e:	f005 f9b7 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a172:	f005 f99d 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a176:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	689b      	ldr	r3, [r3, #8]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a18e:	f005 f9e5 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a192:	f005 f981 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a196:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800a1a0:	701a      	strb	r2, [r3, #0]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	705a      	strb	r2, [r3, #1]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	709a      	strb	r2, [r3, #2]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f042 0202 	orr.w	r2, r2, #2
 800a1b6:	711a      	strb	r2, [r3, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	715a      	strb	r2, [r3, #5]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	719a      	strb	r2, [r3, #6]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a1d0:	f005 f986 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a1d4:	f005 f96c 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a1d8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	b2db      	uxtb	r3, r3
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a1f4:	f005 f9b2 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a1f8:	f005 f94e 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a1fc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f042 0208 	orr.w	r2, r2, #8
 800a206:	701a      	strb	r2, [r3, #0]
 800a208:	2200      	movs	r2, #0
 800a20a:	705a      	strb	r2, [r3, #1]
 800a20c:	2200      	movs	r2, #0
 800a20e:	709a      	strb	r2, [r3, #2]
 800a210:	2200      	movs	r2, #0
 800a212:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f042 0201 	orr.w	r2, r2, #1
 800a21c:	711a      	strb	r2, [r3, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	715a      	strb	r2, [r3, #5]
 800a222:	2200      	movs	r2, #0
 800a224:	719a      	strb	r2, [r3, #6]
 800a226:	2200      	movs	r2, #0
 800a228:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800a22a:	78fa      	ldrb	r2, [r7, #3]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a230:	f005 f956 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a234:	f005 f93c 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a238:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	b2db      	uxtb	r3, r3
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a254:	f005 f982 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a258:	f005 f91e 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a25c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f042 020f 	orr.w	r2, r2, #15
 800a266:	701a      	strb	r2, [r3, #0]
 800a268:	2200      	movs	r2, #0
 800a26a:	705a      	strb	r2, [r3, #1]
 800a26c:	2200      	movs	r2, #0
 800a26e:	709a      	strb	r2, [r3, #2]
 800a270:	2200      	movs	r2, #0
 800a272:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	f042 0201 	orr.w	r2, r2, #1
 800a27c:	711a      	strb	r2, [r3, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	715a      	strb	r2, [r3, #5]
 800a282:	2200      	movs	r2, #0
 800a284:	719a      	strb	r2, [r3, #6]
 800a286:	2200      	movs	r2, #0
 800a288:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800a28a:	887a      	ldrh	r2, [r7, #2]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a290:	f005 f926 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a294:	f005 f90c 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a298:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	b2db      	uxtb	r3, r3
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a2b0:	f005 f954 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a2b4:	f005 f8f0 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a2b8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f062 0246 	orn	r2, r2, #70	; 0x46
 800a2c2:	701a      	strb	r2, [r3, #0]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	705a      	strb	r2, [r3, #1]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	709a      	strb	r2, [r3, #2]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f042 0201 	orr.w	r2, r2, #1
 800a2d8:	711a      	strb	r2, [r3, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	715a      	strb	r2, [r3, #5]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	719a      	strb	r2, [r3, #6]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a2ec:	f005 f8f8 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a2f0:	f005 f8de 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a2f4:	60f8      	str	r0, [r7, #12]
}
 800a2f6:	bf00      	nop
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a306:	f005 f929 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a30a:	f005 f8c5 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a30e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f062 0243 	orn	r2, r2, #67	; 0x43
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	2200      	movs	r2, #0
 800a31c:	705a      	strb	r2, [r3, #1]
 800a31e:	2200      	movs	r2, #0
 800a320:	709a      	strb	r2, [r3, #2]
 800a322:	2200      	movs	r2, #0
 800a324:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f042 0201 	orr.w	r2, r2, #1
 800a32e:	711a      	strb	r2, [r3, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	715a      	strb	r2, [r3, #5]
 800a334:	2200      	movs	r2, #0
 800a336:	719a      	strb	r2, [r3, #6]
 800a338:	2200      	movs	r2, #0
 800a33a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a342:	f005 f8cd 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a346:	f005 f8b3 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a34a:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	b29b      	uxth	r3, r3
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b086      	sub	sp, #24
 800a35e:	af00      	add	r7, sp, #0
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	60b9      	str	r1, [r7, #8]
 800a364:	4613      	mov	r3, r2
 800a366:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800a368:	f005 f8f8 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a36c:	f005 f894 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a370:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2200      	movs	r2, #0
 800a376:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800a37a:	701a      	strb	r2, [r3, #0]
 800a37c:	2200      	movs	r2, #0
 800a37e:	705a      	strb	r2, [r3, #1]
 800a380:	2200      	movs	r2, #0
 800a382:	709a      	strb	r2, [r3, #2]
 800a384:	2200      	movs	r2, #0
 800a386:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f042 0203 	orr.w	r2, r2, #3
 800a390:	711a      	strb	r2, [r3, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	715a      	strb	r2, [r3, #5]
 800a396:	2200      	movs	r2, #0
 800a398:	719a      	strb	r2, [r3, #6]
 800a39a:	2200      	movs	r2, #0
 800a39c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800a3aa:	88fa      	ldrh	r2, [r7, #6]
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800a3b0:	f005 f896 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a3b4:	f005 f87c 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a3b8:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	b2db      	uxtb	r3, r3
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	607a      	str	r2, [r7, #4]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	817b      	strh	r3, [r7, #10]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800a3dc:	f005 f8be 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a3e0:	f005 f85a 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a3e4:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f062 023d 	orn	r2, r2, #61	; 0x3d
 800a3ee:	701a      	strb	r2, [r3, #0]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	705a      	strb	r2, [r3, #1]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	709a      	strb	r2, [r3, #2]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f042 0204 	orr.w	r2, r2, #4
 800a404:	711a      	strb	r2, [r3, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	715a      	strb	r2, [r3, #5]
 800a40a:	2200      	movs	r2, #0
 800a40c:	719a      	strb	r2, [r3, #6]
 800a40e:	2200      	movs	r2, #0
 800a410:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800a418:	897a      	ldrh	r2, [r7, #10]
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800a424:	893a      	ldrh	r2, [r7, #8]
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800a42a:	f005 f859 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a42e:	f005 f83f 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a432:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	689b      	ldr	r3, [r3, #8]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800a440:	b5b0      	push	{r4, r5, r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800a44a:	f005 f83d 	bl	800f4c8 <THREAD_Get_NotificationPayloadBuffer>
 800a44e:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3b01      	subs	r3, #1
 800a456:	2b17      	cmp	r3, #23
 800a458:	f200 81c3 	bhi.w	800a7e2 <OpenThread_CallBack_Processing+0x3a2>
 800a45c:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <OpenThread_CallBack_Processing+0x24>)
 800a45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a462:	bf00      	nop
 800a464:	0800a4c5 	.word	0x0800a4c5
 800a468:	0800a4e1 	.word	0x0800a4e1
 800a46c:	0800a545 	.word	0x0800a545
 800a470:	0800a58d 	.word	0x0800a58d
 800a474:	0800a599 	.word	0x0800a599
 800a478:	0800a5b7 	.word	0x0800a5b7
 800a47c:	0800a5d5 	.word	0x0800a5d5
 800a480:	0800a5f3 	.word	0x0800a5f3
 800a484:	0800a611 	.word	0x0800a611
 800a488:	0800a62f 	.word	0x0800a62f
 800a48c:	0800a651 	.word	0x0800a651
 800a490:	0800a66f 	.word	0x0800a66f
 800a494:	0800a7e3 	.word	0x0800a7e3
 800a498:	0800a695 	.word	0x0800a695
 800a49c:	0800a6c9 	.word	0x0800a6c9
 800a4a0:	0800a6f1 	.word	0x0800a6f1
 800a4a4:	0800a70f 	.word	0x0800a70f
 800a4a8:	0800a77d 	.word	0x0800a77d
 800a4ac:	0800a7a5 	.word	0x0800a7a5
 800a4b0:	0800a7e3 	.word	0x0800a7e3
 800a4b4:	0800a7c3 	.word	0x0800a7c3
 800a4b8:	0800a7e3 	.word	0x0800a7e3
 800a4bc:	0800a7e3 	.word	0x0800a7e3
 800a4c0:	0800a51d 	.word	0x0800a51d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800a4c4:	4b9b      	ldr	r3, [pc, #620]	; (800a734 <OpenThread_CallBack_Processing+0x2f4>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 818d 	beq.w	800a7e8 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a4ce:	4b99      	ldr	r3, [pc, #612]	; (800a734 <OpenThread_CallBack_Processing+0x2f4>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a4da:	4611      	mov	r1, r2
 800a4dc:	4798      	blx	r3
        }
        break;
 800a4de:	e183      	b.n	800a7e8 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	4b94      	ldr	r3, [pc, #592]	; (800a738 <OpenThread_CallBack_Processing+0x2f8>)
 800a4e8:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800a4ea:	4b93      	ldr	r3, [pc, #588]	; (800a738 <OpenThread_CallBack_Processing+0x2f8>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	4a92      	ldr	r2, [pc, #584]	; (800a73c <OpenThread_CallBack_Processing+0x2fc>)
 800a4f2:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800a4f4:	4b91      	ldr	r3, [pc, #580]	; (800a73c <OpenThread_CallBack_Processing+0x2fc>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 8177 	beq.w	800a7ec <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a4fe:	4b8f      	ldr	r3, [pc, #572]	; (800a73c <OpenThread_CallBack_Processing+0x2fc>)
 800a500:	681c      	ldr	r4, [r3, #0]
 800a502:	4b8d      	ldr	r3, [pc, #564]	; (800a738 <OpenThread_CallBack_Processing+0x2f8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a50c:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a512:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a518:	47a0      	blx	r4
        }
        break;
 800a51a:	e167      	b.n	800a7ec <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800a51c:	4b88      	ldr	r3, [pc, #544]	; (800a740 <OpenThread_CallBack_Processing+0x300>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 8165 	beq.w	800a7f0 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a526:	4b86      	ldr	r3, [pc, #536]	; (800a740 <OpenThread_CallBack_Processing+0x300>)
 800a528:	681c      	ldr	r4, [r3, #0]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a534:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a53a:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a540:	47a0      	blx	r4
        }
        break;
 800a542:	e155      	b.n	800a7f0 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	461a      	mov	r2, r3
 800a54a:	4b7e      	ldr	r3, [pc, #504]	; (800a744 <OpenThread_CallBack_Processing+0x304>)
 800a54c:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800a54e:	4b7d      	ldr	r3, [pc, #500]	; (800a744 <OpenThread_CallBack_Processing+0x304>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	4a7c      	ldr	r2, [pc, #496]	; (800a748 <OpenThread_CallBack_Processing+0x308>)
 800a556:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800a558:	4b7b      	ldr	r3, [pc, #492]	; (800a748 <OpenThread_CallBack_Processing+0x308>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 8149 	beq.w	800a7f4 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a562:	4b79      	ldr	r3, [pc, #484]	; (800a748 <OpenThread_CallBack_Processing+0x308>)
 800a564:	681c      	ldr	r4, [r3, #0]
 800a566:	4b77      	ldr	r3, [pc, #476]	; (800a744 <OpenThread_CallBack_Processing+0x304>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a570:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a576:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a57c:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a582:	b2db      	uxtb	r3, r3
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	462b      	mov	r3, r5
 800a588:	47a0      	blx	r4
        }
        break;
 800a58a:	e133      	b.n	800a7f4 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800a58c:	2001      	movs	r0, #1
 800a58e:	f7fe fd00 	bl	8008f92 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800a592:	f7f7 fe20 	bl	80021d6 <HAL_NVIC_SystemReset>
        break;
 800a596:	e14c      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800a598:	4b6c      	ldr	r3, [pc, #432]	; (800a74c <OpenThread_CallBack_Processing+0x30c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 812b 	beq.w	800a7f8 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a5a2:	4b6a      	ldr	r3, [pc, #424]	; (800a74c <OpenThread_CallBack_Processing+0x30c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	6892      	ldr	r2, [r2, #8]
 800a5aa:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	4798      	blx	r3
        }
        break;
 800a5b4:	e120      	b.n	800a7f8 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800a5b6:	4b66      	ldr	r3, [pc, #408]	; (800a750 <OpenThread_CallBack_Processing+0x310>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 811e 	beq.w	800a7fc <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a5c0:	4b63      	ldr	r3, [pc, #396]	; (800a750 <OpenThread_CallBack_Processing+0x310>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	6892      	ldr	r2, [r2, #8]
 800a5c8:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	4798      	blx	r3
        }
        break;
 800a5d2:	e113      	b.n	800a7fc <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800a5d4:	4b5f      	ldr	r3, [pc, #380]	; (800a754 <OpenThread_CallBack_Processing+0x314>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 8111 	beq.w	800a800 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a5de:	4b5d      	ldr	r3, [pc, #372]	; (800a754 <OpenThread_CallBack_Processing+0x314>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	6892      	ldr	r2, [r2, #8]
 800a5e6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4798      	blx	r3
        }
        break;
 800a5f0:	e106      	b.n	800a800 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800a5f2:	4b59      	ldr	r3, [pc, #356]	; (800a758 <OpenThread_CallBack_Processing+0x318>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 8104 	beq.w	800a804 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a5fc:	4b56      	ldr	r3, [pc, #344]	; (800a758 <OpenThread_CallBack_Processing+0x318>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	6892      	ldr	r2, [r2, #8]
 800a604:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a60a:	4611      	mov	r1, r2
 800a60c:	4798      	blx	r3
        }
        break;
 800a60e:	e0f9      	b.n	800a804 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800a610:	4b52      	ldr	r3, [pc, #328]	; (800a75c <OpenThread_CallBack_Processing+0x31c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 80f7 	beq.w	800a808 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a61a:	4b50      	ldr	r3, [pc, #320]	; (800a75c <OpenThread_CallBack_Processing+0x31c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	6892      	ldr	r2, [r2, #8]
 800a622:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a628:	4611      	mov	r1, r2
 800a62a:	4798      	blx	r3
        }
        break;
 800a62c:	e0ec      	b.n	800a808 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800a62e:	4b4c      	ldr	r3, [pc, #304]	; (800a760 <OpenThread_CallBack_Processing+0x320>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 80ea 	beq.w	800a80c <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a638:	4b49      	ldr	r3, [pc, #292]	; (800a760 <OpenThread_CallBack_Processing+0x320>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	6892      	ldr	r2, [r2, #8]
 800a640:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a646:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a64c:	4798      	blx	r3
        }
        break;
 800a64e:	e0dd      	b.n	800a80c <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800a650:	4b44      	ldr	r3, [pc, #272]	; (800a764 <OpenThread_CallBack_Processing+0x324>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 80db 	beq.w	800a810 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a65a:	4b42      	ldr	r3, [pc, #264]	; (800a764 <OpenThread_CallBack_Processing+0x324>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	6892      	ldr	r2, [r2, #8]
 800a662:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a668:	4611      	mov	r1, r2
 800a66a:	4798      	blx	r3
        }
        break;
 800a66c:	e0d0      	b.n	800a810 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800a66e:	4b3e      	ldr	r3, [pc, #248]	; (800a768 <OpenThread_CallBack_Processing+0x328>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 80ce 	beq.w	800a814 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a678:	4b3b      	ldr	r3, [pc, #236]	; (800a768 <OpenThread_CallBack_Processing+0x328>)
 800a67a:	681c      	ldr	r4, [r3, #0]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a684:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a68a:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a690:	47a0      	blx	r4
        }
        break;
 800a692:	e0bf      	b.n	800a814 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800a694:	4b35      	ldr	r3, [pc, #212]	; (800a76c <OpenThread_CallBack_Processing+0x32c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 80bd 	beq.w	800a818 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a69e:	4b33      	ldr	r3, [pc, #204]	; (800a76c <OpenThread_CallBack_Processing+0x32c>)
 800a6a0:	681c      	ldr	r4, [r3, #0]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a6ac:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a6b2:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	462a      	mov	r2, r5
 800a6c4:	47a0      	blx	r4
        }
        break;
 800a6c6:	e0a7      	b.n	800a818 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800a6c8:	4b29      	ldr	r3, [pc, #164]	; (800a770 <OpenThread_CallBack_Processing+0x330>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 80a5 	beq.w	800a81c <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a6d2:	4b27      	ldr	r3, [pc, #156]	; (800a770 <OpenThread_CallBack_Processing+0x330>)
 800a6d4:	681c      	ldr	r4, [r3, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a6e0:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a6e6:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a6ec:	47a0      	blx	r4
        }
        break;
 800a6ee:	e095      	b.n	800a81c <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800a6f0:	4b20      	ldr	r3, [pc, #128]	; (800a774 <OpenThread_CallBack_Processing+0x334>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 8093 	beq.w	800a820 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800a6fa:	4b1e      	ldr	r3, [pc, #120]	; (800a774 <OpenThread_CallBack_Processing+0x334>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	6892      	ldr	r2, [r2, #8]
 800a702:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800a708:	4611      	mov	r1, r2
 800a70a:	4798      	blx	r3
        }
        break;
 800a70c:	e088      	b.n	800a820 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800a70e:	4b1a      	ldr	r3, [pc, #104]	; (800a778 <OpenThread_CallBack_Processing+0x338>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f000 8086 	beq.w	800a824 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a718:	4b17      	ldr	r3, [pc, #92]	; (800a778 <OpenThread_CallBack_Processing+0x338>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	6892      	ldr	r2, [r2, #8]
 800a720:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a726:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a72c:	b2d2      	uxtb	r2, r2
 800a72e:	4798      	blx	r3
        }
        break;
 800a730:	e078      	b.n	800a824 <OpenThread_CallBack_Processing+0x3e4>
 800a732:	bf00      	nop
 800a734:	200002ec 	.word	0x200002ec
 800a738:	20004e60 	.word	0x20004e60
 800a73c:	2000032c 	.word	0x2000032c
 800a740:	20000330 	.word	0x20000330
 800a744:	20004e5c 	.word	0x20004e5c
 800a748:	20000334 	.word	0x20000334
 800a74c:	200002f4 	.word	0x200002f4
 800a750:	200002f0 	.word	0x200002f0
 800a754:	200002f8 	.word	0x200002f8
 800a758:	200002fc 	.word	0x200002fc
 800a75c:	20000300 	.word	0x20000300
 800a760:	20000304 	.word	0x20000304
 800a764:	20000308 	.word	0x20000308
 800a768:	2000030c 	.word	0x2000030c
 800a76c:	20000310 	.word	0x20000310
 800a770:	20000314 	.word	0x20000314
 800a774:	20000318 	.word	0x20000318
 800a778:	2000031c 	.word	0x2000031c
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800a77c:	4b30      	ldr	r3, [pc, #192]	; (800a840 <OpenThread_CallBack_Processing+0x400>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d051      	beq.n	800a828 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a784:	4b2e      	ldr	r3, [pc, #184]	; (800a840 <OpenThread_CallBack_Processing+0x400>)
 800a786:	681c      	ldr	r4, [r3, #0]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a792:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a798:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	47a0      	blx	r4
        }
        break;
 800a7a2:	e041      	b.n	800a828 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800a7a4:	4b27      	ldr	r3, [pc, #156]	; (800a844 <OpenThread_CallBack_Processing+0x404>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d03f      	beq.n	800a82c <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a7ac:	4b25      	ldr	r3, [pc, #148]	; (800a844 <OpenThread_CallBack_Processing+0x404>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	6892      	ldr	r2, [r2, #8]
 800a7b4:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a7ba:	b252      	sxtb	r2, r2
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4798      	blx	r3
        }
        break;
 800a7c0:	e034      	b.n	800a82c <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800a7c2:	4b21      	ldr	r3, [pc, #132]	; (800a848 <OpenThread_CallBack_Processing+0x408>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d032      	beq.n	800a830 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a7ca:	4b1f      	ldr	r3, [pc, #124]	; (800a848 <OpenThread_CallBack_Processing+0x408>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	6892      	ldr	r2, [r2, #8]
 800a7d2:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a7d8:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a7de:	4798      	blx	r3
        }
        break;
 800a7e0:	e026      	b.n	800a830 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	71fb      	strb	r3, [r7, #7]
        break;
 800a7e6:	e024      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7e8:	bf00      	nop
 800a7ea:	e022      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7ec:	bf00      	nop
 800a7ee:	e020      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7f0:	bf00      	nop
 800a7f2:	e01e      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7f4:	bf00      	nop
 800a7f6:	e01c      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7f8:	bf00      	nop
 800a7fa:	e01a      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a7fc:	bf00      	nop
 800a7fe:	e018      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a800:	bf00      	nop
 800a802:	e016      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a804:	bf00      	nop
 800a806:	e014      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a808:	bf00      	nop
 800a80a:	e012      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a80c:	bf00      	nop
 800a80e:	e010      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a810:	bf00      	nop
 800a812:	e00e      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a814:	bf00      	nop
 800a816:	e00c      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a818:	bf00      	nop
 800a81a:	e00a      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a81c:	bf00      	nop
 800a81e:	e008      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a820:	bf00      	nop
 800a822:	e006      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a824:	bf00      	nop
 800a826:	e004      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a828:	bf00      	nop
 800a82a:	e002      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a82c:	bf00      	nop
 800a82e:	e000      	b.n	800a832 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a830:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800a832:	f7fe fed9 	bl	80095e8 <TL_THREAD_SendAck>
    return status;
 800a836:	79fb      	ldrb	r3, [r7, #7]

}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bdb0      	pop	{r4, r5, r7, pc}
 800a840:	20000320 	.word	0x20000320
 800a844:	20000324 	.word	0x20000324
 800a848:	20000328 	.word	0x20000328

0800a84c <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800a858:	f004 fe80 	bl	800f55c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a85c:	f004 fe1c 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a860:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800a86a:	701a      	strb	r2, [r3, #0]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f042 0201 	orr.w	r2, r2, #1
 800a872:	705a      	strb	r2, [r3, #1]
 800a874:	2200      	movs	r2, #0
 800a876:	709a      	strb	r2, [r3, #2]
 800a878:	2200      	movs	r2, #0
 800a87a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f042 0201 	orr.w	r2, r2, #1
 800a884:	711a      	strb	r2, [r3, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	715a      	strb	r2, [r3, #5]
 800a88a:	2200      	movs	r2, #0
 800a88c:	719a      	strb	r2, [r3, #6]
 800a88e:	2200      	movs	r2, #0
 800a890:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800a892:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a89a:	f004 fe21 	bl	800f4e0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a89e:	f004 fe07 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a8a2:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	b2db      	uxtb	r3, r3
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a8be:	f004 fe4d 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a8c2:	f004 fde9 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a8c6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	705a      	strb	r2, [r3, #1]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	709a      	strb	r2, [r3, #2]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f042 0201 	orr.w	r2, r2, #1
 800a8e6:	711a      	strb	r2, [r3, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	715a      	strb	r2, [r3, #5]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	719a      	strb	r2, [r3, #6]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a8f4:	78fa      	ldrb	r2, [r7, #3]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a8fa:	f004 fdf1 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a8fe:	f004 fdd7 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a902:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	b2db      	uxtb	r3, r3
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a91c:	f004 fe1e 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a920:	f004 fdba 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a924:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800a92e:	701a      	strb	r2, [r3, #0]
 800a930:	2200      	movs	r2, #0
 800a932:	705a      	strb	r2, [r3, #1]
 800a934:	2200      	movs	r2, #0
 800a936:	709a      	strb	r2, [r3, #2]
 800a938:	2200      	movs	r2, #0
 800a93a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	f042 0201 	orr.w	r2, r2, #1
 800a944:	711a      	strb	r2, [r3, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	715a      	strb	r2, [r3, #5]
 800a94a:	2200      	movs	r2, #0
 800a94c:	719a      	strb	r2, [r3, #6]
 800a94e:	2200      	movs	r2, #0
 800a950:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	683a      	ldr	r2, [r7, #0]
 800a956:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a958:	f004 fdc2 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a95c:	f004 fda8 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a960:	60f8      	str	r0, [r7, #12]
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <otThreadGetMeshLocalEid>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a972:	f004 fdf3 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a976:	f004 fd8f 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a97a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 800a984:	701a      	strb	r2, [r3, #0]
 800a986:	2200      	movs	r2, #0
 800a988:	705a      	strb	r2, [r3, #1]
 800a98a:	2200      	movs	r2, #0
 800a98c:	709a      	strb	r2, [r3, #2]
 800a98e:	2200      	movs	r2, #0
 800a990:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	711a      	strb	r2, [r3, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	715a      	strb	r2, [r3, #5]
 800a99c:	2200      	movs	r2, #0
 800a99e:	719a      	strb	r2, [r3, #6]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a9a4:	f004 fd9c 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a9a8:	f004 fd82 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a9ac:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a9c2:	f004 fdcb 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a9c6:	f004 fd67 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800a9ca:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	705a      	strb	r2, [r3, #1]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	709a      	strb	r2, [r3, #2]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	711a      	strb	r2, [r3, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	715a      	strb	r2, [r3, #5]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	719a      	strb	r2, [r3, #6]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a9f4:	f004 fd74 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a9f8:	f004 fd5a 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a9fc:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	689b      	ldr	r3, [r3, #8]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800aa14:	f004 fda2 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aa18:	f004 fd3e 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800aa1c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	705a      	strb	r2, [r3, #1]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	709a      	strb	r2, [r3, #2]
 800aa30:	2200      	movs	r2, #0
 800aa32:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f042 0201 	orr.w	r2, r2, #1
 800aa3c:	711a      	strb	r2, [r3, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	715a      	strb	r2, [r3, #5]
 800aa42:	2200      	movs	r2, #0
 800aa44:	719a      	strb	r2, [r3, #6]
 800aa46:	2200      	movs	r2, #0
 800aa48:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800aa50:	f004 fd46 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aa54:	f004 fd2c 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aa58:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	b2db      	uxtb	r3, r3
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800aa70:	f004 fd74 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aa74:	f004 fd10 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800aa78:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	2200      	movs	r2, #0
 800aa86:	705a      	strb	r2, [r3, #1]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	709a      	strb	r2, [r3, #2]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	711a      	strb	r2, [r3, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	715a      	strb	r2, [r3, #5]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	719a      	strb	r2, [r3, #6]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800aaa2:	f004 fd1d 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aaa6:	f004 fd03 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aaaa:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	b2db      	uxtb	r3, r3
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800aac2:	f004 fd4b 	bl	800f55c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aac6:	f004 fce7 	bl	800f498 <THREAD_Get_OTCmdPayloadBuffer>
 800aaca:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	2200      	movs	r2, #0
 800aad8:	705a      	strb	r2, [r3, #1]
 800aada:	2200      	movs	r2, #0
 800aadc:	709a      	strb	r2, [r3, #2]
 800aade:	2200      	movs	r2, #0
 800aae0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	711a      	strb	r2, [r3, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	715a      	strb	r2, [r3, #5]
 800aaec:	2200      	movs	r2, #0
 800aaee:	719a      	strb	r2, [r3, #6]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800aaf4:	f004 fcf4 	bl	800f4e0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aaf8:	f004 fcda 	bl	800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aafc:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	b29b      	uxth	r3, r3
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	605a      	str	r2, [r3, #4]
}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab34:	f3ef 8310 	mrs	r3, PRIMASK
 800ab38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab3e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d102      	bne.n	800ab50 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	75fb      	strb	r3, [r7, #23]
 800ab4e:	e001      	b.n	800ab54 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800ab50:	2300      	movs	r3, #0
 800ab52:	75fb      	strb	r3, [r7, #23]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	371c      	adds	r7, #28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab76:	f3ef 8310 	mrs	r3, PRIMASK
 800ab7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab80:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	605a      	str	r2, [r3, #4]
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aba8:	bf00      	nop
 800abaa:	371c      	adds	r7, #28
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abbe:	f3ef 8310 	mrs	r3, PRIMASK
 800abc2:	60fb      	str	r3, [r7, #12]
  return(result);
 800abc4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abc8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685a      	ldr	r2, [r3, #4]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800abf0:	bf00      	nop
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac04:	f3ef 8310 	mrs	r3, PRIMASK
 800ac08:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac0e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	6812      	ldr	r2, [r2, #0]
 800ac18:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	6852      	ldr	r2, [r2, #4]
 800ac22:	605a      	str	r2, [r3, #4]
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac2e:	bf00      	nop
 800ac30:	371c      	adds	r7, #28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b086      	sub	sp, #24
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac44:	f3ef 8310 	mrs	r3, PRIMASK
 800ac48:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac4e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff ffcd 	bl	800abfc <LST_remove_node>
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac6c:	bf00      	nop
 800ac6e:	3718      	adds	r7, #24
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac74:	b480      	push	{r7}
 800ac76:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ac78:	bf00      	nop
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
	...

0800ac84 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac8a:	f3ef 8305 	mrs	r3, IPSR
 800ac8e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10f      	bne.n	800acb6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac96:	f3ef 8310 	mrs	r3, PRIMASK
 800ac9a:	607b      	str	r3, [r7, #4]
  return(result);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d105      	bne.n	800acae <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aca2:	f3ef 8311 	mrs	r3, BASEPRI
 800aca6:	603b      	str	r3, [r7, #0]
  return(result);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d007      	beq.n	800acbe <osKernelInitialize+0x3a>
 800acae:	4b0e      	ldr	r3, [pc, #56]	; (800ace8 <osKernelInitialize+0x64>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d103      	bne.n	800acbe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800acb6:	f06f 0305 	mvn.w	r3, #5
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	e00c      	b.n	800acd8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800acbe:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <osKernelInitialize+0x64>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d105      	bne.n	800acd2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acc6:	4b08      	ldr	r3, [pc, #32]	; (800ace8 <osKernelInitialize+0x64>)
 800acc8:	2201      	movs	r2, #1
 800acca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800accc:	2300      	movs	r3, #0
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	e002      	b.n	800acd8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800acd2:	f04f 33ff 	mov.w	r3, #4294967295
 800acd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800acd8:	68fb      	ldr	r3, [r7, #12]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	20000338 	.word	0x20000338

0800acec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acf2:	f3ef 8305 	mrs	r3, IPSR
 800acf6:	60bb      	str	r3, [r7, #8]
  return(result);
 800acf8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10f      	bne.n	800ad1e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acfe:	f3ef 8310 	mrs	r3, PRIMASK
 800ad02:	607b      	str	r3, [r7, #4]
  return(result);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d105      	bne.n	800ad16 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad0a:	f3ef 8311 	mrs	r3, BASEPRI
 800ad0e:	603b      	str	r3, [r7, #0]
  return(result);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d007      	beq.n	800ad26 <osKernelStart+0x3a>
 800ad16:	4b0f      	ldr	r3, [pc, #60]	; (800ad54 <osKernelStart+0x68>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d103      	bne.n	800ad26 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ad1e:	f06f 0305 	mvn.w	r3, #5
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	e010      	b.n	800ad48 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad26:	4b0b      	ldr	r3, [pc, #44]	; (800ad54 <osKernelStart+0x68>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d109      	bne.n	800ad42 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad2e:	f7ff ffa1 	bl	800ac74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad32:	4b08      	ldr	r3, [pc, #32]	; (800ad54 <osKernelStart+0x68>)
 800ad34:	2202      	movs	r2, #2
 800ad36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad38:	f001 ffd8 	bl	800ccec <vTaskStartScheduler>
      stat = osOK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	60fb      	str	r3, [r7, #12]
 800ad40:	e002      	b.n	800ad48 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ad42:	f04f 33ff 	mov.w	r3, #4294967295
 800ad46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ad48:	68fb      	ldr	r3, [r7, #12]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000338 	.word	0x20000338

0800ad58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b090      	sub	sp, #64	; 0x40
 800ad5c:	af04      	add	r7, sp, #16
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad64:	2300      	movs	r3, #0
 800ad66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad68:	f3ef 8305 	mrs	r3, IPSR
 800ad6c:	61fb      	str	r3, [r7, #28]
  return(result);
 800ad6e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f040 8090 	bne.w	800ae96 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad76:	f3ef 8310 	mrs	r3, PRIMASK
 800ad7a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d105      	bne.n	800ad8e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad82:	f3ef 8311 	mrs	r3, BASEPRI
 800ad86:	617b      	str	r3, [r7, #20]
  return(result);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <osThreadNew+0x3e>
 800ad8e:	4b44      	ldr	r3, [pc, #272]	; (800aea0 <osThreadNew+0x148>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d07f      	beq.n	800ae96 <osThreadNew+0x13e>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d07c      	beq.n	800ae96 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800ad9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ada2:	2318      	movs	r3, #24
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ada6:	2300      	movs	r3, #0
 800ada8:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800adaa:	f04f 33ff 	mov.w	r3, #4294967295
 800adae:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d045      	beq.n	800ae42 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <osThreadNew+0x6c>
        name = attr->name;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	d008      	beq.n	800adea <osThreadNew+0x92>
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	2b38      	cmp	r3, #56	; 0x38
 800addc:	d805      	bhi.n	800adea <osThreadNew+0x92>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <osThreadNew+0x96>
        return (NULL);
 800adea:	2300      	movs	r3, #0
 800adec:	e054      	b.n	800ae98 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	089b      	lsrs	r3, r3, #2
 800adfc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00e      	beq.n	800ae24 <osThreadNew+0xcc>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	2b5b      	cmp	r3, #91	; 0x5b
 800ae0c:	d90a      	bls.n	800ae24 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d006      	beq.n	800ae24 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d002      	beq.n	800ae24 <osThreadNew+0xcc>
        mem = 1;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	623b      	str	r3, [r7, #32]
 800ae22:	e010      	b.n	800ae46 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10c      	bne.n	800ae46 <osThreadNew+0xee>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d108      	bne.n	800ae46 <osThreadNew+0xee>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <osThreadNew+0xee>
          mem = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	623b      	str	r3, [r7, #32]
 800ae40:	e001      	b.n	800ae46 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ae46:	6a3b      	ldr	r3, [r7, #32]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d110      	bne.n	800ae6e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae54:	9202      	str	r2, [sp, #8]
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f001 fd70 	bl	800c948 <xTaskCreateStatic>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	613b      	str	r3, [r7, #16]
 800ae6c:	e013      	b.n	800ae96 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d110      	bne.n	800ae96 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	f107 0310 	add.w	r3, r7, #16
 800ae7c:	9301      	str	r3, [sp, #4]
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f001 fdb8 	bl	800c9fc <xTaskCreate>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d001      	beq.n	800ae96 <osThreadNew+0x13e>
          hTask = NULL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae96:	693b      	ldr	r3, [r7, #16]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3730      	adds	r7, #48	; 0x30
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20000338 	.word	0x20000338

0800aea4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b08a      	sub	sp, #40	; 0x28
 800aea8:	af02      	add	r7, sp, #8
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <osThreadFlagsSet+0x1a>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	da03      	bge.n	800aec6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800aebe:	f06f 0303 	mvn.w	r3, #3
 800aec2:	60fb      	str	r3, [r7, #12]
 800aec4:	e046      	b.n	800af54 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800aec6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aecc:	f3ef 8305 	mrs	r3, IPSR
 800aed0:	61bb      	str	r3, [r7, #24]
  return(result);
 800aed2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10f      	bne.n	800aef8 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aed8:	f3ef 8310 	mrs	r3, PRIMASK
 800aedc:	617b      	str	r3, [r7, #20]
  return(result);
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d105      	bne.n	800aef0 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aee4:	f3ef 8311 	mrs	r3, BASEPRI
 800aee8:	613b      	str	r3, [r7, #16]
  return(result);
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d024      	beq.n	800af3a <osThreadFlagsSet+0x96>
 800aef0:	4b1b      	ldr	r3, [pc, #108]	; (800af60 <osThreadFlagsSet+0xbc>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d120      	bne.n	800af3a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800aef8:	2300      	movs	r3, #0
 800aefa:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800aefc:	f107 0308 	add.w	r3, r7, #8
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	2300      	movs	r3, #0
 800af04:	2201      	movs	r2, #1
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	69f8      	ldr	r0, [r7, #28]
 800af0a:	f002 fe2b 	bl	800db64 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800af0e:	f107 020c 	add.w	r2, r7, #12
 800af12:	2300      	movs	r3, #0
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	4613      	mov	r3, r2
 800af18:	2200      	movs	r2, #0
 800af1a:	2100      	movs	r1, #0
 800af1c:	69f8      	ldr	r0, [r7, #28]
 800af1e:	f002 fe21 	bl	800db64 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d015      	beq.n	800af54 <osThreadFlagsSet+0xb0>
 800af28:	4b0e      	ldr	r3, [pc, #56]	; (800af64 <osThreadFlagsSet+0xc0>)
 800af2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	e00c      	b.n	800af54 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800af3a:	2300      	movs	r3, #0
 800af3c:	2201      	movs	r2, #1
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	69f8      	ldr	r0, [r7, #28]
 800af42:	f002 fd59 	bl	800d9f8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800af46:	f107 030c 	add.w	r3, r7, #12
 800af4a:	2200      	movs	r2, #0
 800af4c:	2100      	movs	r1, #0
 800af4e:	69f8      	ldr	r0, [r7, #28]
 800af50:	f002 fd52 	bl	800d9f8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800af54:	68fb      	ldr	r3, [r7, #12]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	20000338 	.word	0x20000338
 800af64:	e000ed04 	.word	0xe000ed04

0800af68 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08e      	sub	sp, #56	; 0x38
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af74:	f3ef 8305 	mrs	r3, IPSR
 800af78:	61fb      	str	r3, [r7, #28]
  return(result);
 800af7a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10f      	bne.n	800afa0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af80:	f3ef 8310 	mrs	r3, PRIMASK
 800af84:	61bb      	str	r3, [r7, #24]
  return(result);
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d105      	bne.n	800af98 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af8c:	f3ef 8311 	mrs	r3, BASEPRI
 800af90:	617b      	str	r3, [r7, #20]
  return(result);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <osThreadFlagsWait+0x40>
 800af98:	4b3c      	ldr	r3, [pc, #240]	; (800b08c <osThreadFlagsWait+0x124>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d103      	bne.n	800afa8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800afa0:	f06f 0305 	mvn.w	r3, #5
 800afa4:	637b      	str	r3, [r7, #52]	; 0x34
 800afa6:	e06b      	b.n	800b080 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	da03      	bge.n	800afb6 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800afae:	f06f 0303 	mvn.w	r3, #3
 800afb2:	637b      	str	r3, [r7, #52]	; 0x34
 800afb4:	e064      	b.n	800b080 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	f003 0302 	and.w	r3, r3, #2
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	633b      	str	r3, [r7, #48]	; 0x30
 800afc4:	e001      	b.n	800afca <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800afca:	2300      	movs	r3, #0
 800afcc:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800afd2:	f001 ffd1 	bl	800cf78 <xTaskGetTickCount>
 800afd6:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800afd8:	f107 0210 	add.w	r2, r7, #16
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afe0:	2000      	movs	r0, #0
 800afe2:	f002 fcaf 	bl	800d944 <xTaskNotifyWait>
 800afe6:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	2b01      	cmp	r3, #1
 800afec:	d137      	bne.n	800b05e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800afee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4013      	ands	r3, r2
 800aff4:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800affa:	4313      	orrs	r3, r2
 800affc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00c      	beq.n	800b022 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00c:	4013      	ands	r3, r2
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	429a      	cmp	r2, r3
 800b012:	d032      	beq.n	800b07a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10f      	bne.n	800b03a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b01a:	f06f 0302 	mvn.w	r3, #2
 800b01e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b020:	e02e      	b.n	800b080 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b026:	4013      	ands	r3, r2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d128      	bne.n	800b07e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d103      	bne.n	800b03a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b032:	f06f 0302 	mvn.w	r3, #2
 800b036:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b038:	e022      	b.n	800b080 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b03a:	f001 ff9d 	bl	800cf78 <xTaskGetTickCount>
 800b03e:	4602      	mov	r2, r0
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800b046:	6a3a      	ldr	r2, [r7, #32]
 800b048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d902      	bls.n	800b054 <osThreadFlagsWait+0xec>
          tout  = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b052:	e00e      	b.n	800b072 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800b054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b05c:	e009      	b.n	800b072 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d103      	bne.n	800b06c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800b064:	f06f 0302 	mvn.w	r3, #2
 800b068:	637b      	str	r3, [r7, #52]	; 0x34
 800b06a:	e002      	b.n	800b072 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b06c:	f06f 0301 	mvn.w	r3, #1
 800b070:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800b072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1af      	bne.n	800afd8 <osThreadFlagsWait+0x70>
 800b078:	e002      	b.n	800b080 <osThreadFlagsWait+0x118>
            break;
 800b07a:	bf00      	nop
 800b07c:	e000      	b.n	800b080 <osThreadFlagsWait+0x118>
            break;
 800b07e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b082:	4618      	mov	r0, r3
 800b084:	3738      	adds	r7, #56	; 0x38
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	20000338 	.word	0x20000338

0800b090 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b098:	f3ef 8305 	mrs	r3, IPSR
 800b09c:	613b      	str	r3, [r7, #16]
  return(result);
 800b09e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10f      	bne.n	800b0c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b0a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d105      	bne.n	800b0bc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b0b0:	f3ef 8311 	mrs	r3, BASEPRI
 800b0b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d007      	beq.n	800b0cc <osDelay+0x3c>
 800b0bc:	4b0a      	ldr	r3, [pc, #40]	; (800b0e8 <osDelay+0x58>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d103      	bne.n	800b0cc <osDelay+0x3c>
    stat = osErrorISR;
 800b0c4:	f06f 0305 	mvn.w	r3, #5
 800b0c8:	617b      	str	r3, [r7, #20]
 800b0ca:	e007      	b.n	800b0dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <osDelay+0x4c>
      vTaskDelay(ticks);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 fdd4 	bl	800cc84 <vTaskDelay>
    }
  }

  return (stat);
 800b0dc:	697b      	ldr	r3, [r7, #20]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000338 	.word	0x20000338

0800b0ec <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08a      	sub	sp, #40	; 0x28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0f8:	f3ef 8305 	mrs	r3, IPSR
 800b0fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b0fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b100:	2b00      	cmp	r3, #0
 800b102:	f040 8085 	bne.w	800b210 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b106:	f3ef 8310 	mrs	r3, PRIMASK
 800b10a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d105      	bne.n	800b11e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b112:	f3ef 8311 	mrs	r3, BASEPRI
 800b116:	60bb      	str	r3, [r7, #8]
  return(result);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <osMutexNew+0x3a>
 800b11e:	4b3f      	ldr	r3, [pc, #252]	; (800b21c <osMutexNew+0x130>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b02      	cmp	r3, #2
 800b124:	d074      	beq.n	800b210 <osMutexNew+0x124>
    if (attr != NULL) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	623b      	str	r3, [r7, #32]
 800b132:	e001      	b.n	800b138 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b134:	2300      	movs	r3, #0
 800b136:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d002      	beq.n	800b148 <osMutexNew+0x5c>
      rmtx = 1U;
 800b142:	2301      	movs	r3, #1
 800b144:	61fb      	str	r3, [r7, #28]
 800b146:	e001      	b.n	800b14c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b148:	2300      	movs	r3, #0
 800b14a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	f003 0308 	and.w	r3, r3, #8
 800b152:	2b00      	cmp	r3, #0
 800b154:	d15c      	bne.n	800b210 <osMutexNew+0x124>
      mem = -1;
 800b156:	f04f 33ff 	mov.w	r3, #4294967295
 800b15a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d015      	beq.n	800b18e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <osMutexNew+0x8c>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	2b4f      	cmp	r3, #79	; 0x4f
 800b170:	d902      	bls.n	800b178 <osMutexNew+0x8c>
          mem = 1;
 800b172:	2301      	movs	r3, #1
 800b174:	61bb      	str	r3, [r7, #24]
 800b176:	e00c      	b.n	800b192 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d108      	bne.n	800b192 <osMutexNew+0xa6>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d104      	bne.n	800b192 <osMutexNew+0xa6>
            mem = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	61bb      	str	r3, [r7, #24]
 800b18c:	e001      	b.n	800b192 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d112      	bne.n	800b1be <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d007      	beq.n	800b1ae <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	2004      	movs	r0, #4
 800b1a6:	f000 fc9c 	bl	800bae2 <xQueueCreateMutexStatic>
 800b1aa:	6278      	str	r0, [r7, #36]	; 0x24
 800b1ac:	e016      	b.n	800b1dc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	2001      	movs	r0, #1
 800b1b6:	f000 fc94 	bl	800bae2 <xQueueCreateMutexStatic>
 800b1ba:	6278      	str	r0, [r7, #36]	; 0x24
 800b1bc:	e00e      	b.n	800b1dc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10b      	bne.n	800b1dc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d004      	beq.n	800b1d4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b1ca:	2004      	movs	r0, #4
 800b1cc:	f000 fc71 	bl	800bab2 <xQueueCreateMutex>
 800b1d0:	6278      	str	r0, [r7, #36]	; 0x24
 800b1d2:	e003      	b.n	800b1dc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b1d4:	2001      	movs	r0, #1
 800b1d6:	f000 fc6c 	bl	800bab2 <xQueueCreateMutex>
 800b1da:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00c      	beq.n	800b1fc <osMutexNew+0x110>
        if (attr != NULL) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d003      	beq.n	800b1f0 <osMutexNew+0x104>
          name = attr->name;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	617b      	str	r3, [r7, #20]
 800b1ee:	e001      	b.n	800b1f4 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b1f4:	6979      	ldr	r1, [r7, #20]
 800b1f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1f8:	f001 fb20 	bl	800c83c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d006      	beq.n	800b210 <osMutexNew+0x124>
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d003      	beq.n	800b210 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	f043 0301 	orr.w	r3, r3, #1
 800b20e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b212:	4618      	mov	r0, r3
 800b214:	3728      	adds	r7, #40	; 0x28
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	20000338 	.word	0x20000338

0800b220 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b220:	b580      	push	{r7, lr}
 800b222:	b088      	sub	sp, #32
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f023 0301 	bic.w	r3, r3, #1
 800b230:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b23e:	f3ef 8305 	mrs	r3, IPSR
 800b242:	613b      	str	r3, [r7, #16]
  return(result);
 800b244:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10f      	bne.n	800b26a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b24a:	f3ef 8310 	mrs	r3, PRIMASK
 800b24e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d105      	bne.n	800b262 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b256:	f3ef 8311 	mrs	r3, BASEPRI
 800b25a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d007      	beq.n	800b272 <osMutexAcquire+0x52>
 800b262:	4b1d      	ldr	r3, [pc, #116]	; (800b2d8 <osMutexAcquire+0xb8>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b02      	cmp	r3, #2
 800b268:	d103      	bne.n	800b272 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800b26a:	f06f 0305 	mvn.w	r3, #5
 800b26e:	61fb      	str	r3, [r7, #28]
 800b270:	e02c      	b.n	800b2cc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d103      	bne.n	800b280 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800b278:	f06f 0303 	mvn.w	r3, #3
 800b27c:	61fb      	str	r3, [r7, #28]
 800b27e:	e025      	b.n	800b2cc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d011      	beq.n	800b2aa <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	69b8      	ldr	r0, [r7, #24]
 800b28a:	f000 fc78 	bl	800bb7e <xQueueTakeMutexRecursive>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b01      	cmp	r3, #1
 800b292:	d01b      	beq.n	800b2cc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800b29a:	f06f 0301 	mvn.w	r3, #1
 800b29e:	61fb      	str	r3, [r7, #28]
 800b2a0:	e014      	b.n	800b2cc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b2a2:	f06f 0302 	mvn.w	r3, #2
 800b2a6:	61fb      	str	r3, [r7, #28]
 800b2a8:	e010      	b.n	800b2cc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	69b8      	ldr	r0, [r7, #24]
 800b2ae:	f000 fff5 	bl	800c29c <xQueueSemaphoreTake>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d009      	beq.n	800b2cc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d003      	beq.n	800b2c6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800b2be:	f06f 0301 	mvn.w	r3, #1
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	e002      	b.n	800b2cc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b2c6:	f06f 0302 	mvn.w	r3, #2
 800b2ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b2cc:	69fb      	ldr	r3, [r7, #28]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3720      	adds	r7, #32
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20000338 	.word	0x20000338

0800b2dc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f023 0301 	bic.w	r3, r3, #1
 800b2ea:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2f8:	f3ef 8305 	mrs	r3, IPSR
 800b2fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b2fe:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10f      	bne.n	800b324 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b304:	f3ef 8310 	mrs	r3, PRIMASK
 800b308:	60fb      	str	r3, [r7, #12]
  return(result);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d105      	bne.n	800b31c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b310:	f3ef 8311 	mrs	r3, BASEPRI
 800b314:	60bb      	str	r3, [r7, #8]
  return(result);
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d007      	beq.n	800b32c <osMutexRelease+0x50>
 800b31c:	4b16      	ldr	r3, [pc, #88]	; (800b378 <osMutexRelease+0x9c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b02      	cmp	r3, #2
 800b322:	d103      	bne.n	800b32c <osMutexRelease+0x50>
    stat = osErrorISR;
 800b324:	f06f 0305 	mvn.w	r3, #5
 800b328:	61fb      	str	r3, [r7, #28]
 800b32a:	e01f      	b.n	800b36c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d103      	bne.n	800b33a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800b332:	f06f 0303 	mvn.w	r3, #3
 800b336:	61fb      	str	r3, [r7, #28]
 800b338:	e018      	b.n	800b36c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d009      	beq.n	800b354 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b340:	69b8      	ldr	r0, [r7, #24]
 800b342:	f000 fbe9 	bl	800bb18 <xQueueGiveMutexRecursive>
 800b346:	4603      	mov	r3, r0
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d00f      	beq.n	800b36c <osMutexRelease+0x90>
        stat = osErrorResource;
 800b34c:	f06f 0302 	mvn.w	r3, #2
 800b350:	61fb      	str	r3, [r7, #28]
 800b352:	e00b      	b.n	800b36c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b354:	2300      	movs	r3, #0
 800b356:	2200      	movs	r2, #0
 800b358:	2100      	movs	r1, #0
 800b35a:	69b8      	ldr	r0, [r7, #24]
 800b35c:	f000 fcaa 	bl	800bcb4 <xQueueGenericSend>
 800b360:	4603      	mov	r3, r0
 800b362:	2b01      	cmp	r3, #1
 800b364:	d002      	beq.n	800b36c <osMutexRelease+0x90>
        stat = osErrorResource;
 800b366:	f06f 0302 	mvn.w	r3, #2
 800b36a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800b36c:	69fb      	ldr	r3, [r7, #28]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3720      	adds	r7, #32
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	20000338 	.word	0x20000338

0800b37c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b08c      	sub	sp, #48	; 0x30
 800b380:	af02      	add	r7, sp, #8
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b388:	2300      	movs	r3, #0
 800b38a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b38c:	f3ef 8305 	mrs	r3, IPSR
 800b390:	61bb      	str	r3, [r7, #24]
  return(result);
 800b392:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b394:	2b00      	cmp	r3, #0
 800b396:	f040 8087 	bne.w	800b4a8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b39a:	f3ef 8310 	mrs	r3, PRIMASK
 800b39e:	617b      	str	r3, [r7, #20]
  return(result);
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d105      	bne.n	800b3b2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3a6:	f3ef 8311 	mrs	r3, BASEPRI
 800b3aa:	613b      	str	r3, [r7, #16]
  return(result);
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <osSemaphoreNew+0x3e>
 800b3b2:	4b40      	ldr	r3, [pc, #256]	; (800b4b4 <osSemaphoreNew+0x138>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d076      	beq.n	800b4a8 <osSemaphoreNew+0x12c>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d073      	beq.n	800b4a8 <osSemaphoreNew+0x12c>
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d86f      	bhi.n	800b4a8 <osSemaphoreNew+0x12c>
    mem = -1;
 800b3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d015      	beq.n	800b400 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <osSemaphoreNew+0x6e>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	2b4f      	cmp	r3, #79	; 0x4f
 800b3e2:	d902      	bls.n	800b3ea <osSemaphoreNew+0x6e>
        mem = 1;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	623b      	str	r3, [r7, #32]
 800b3e8:	e00c      	b.n	800b404 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d108      	bne.n	800b404 <osSemaphoreNew+0x88>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d104      	bne.n	800b404 <osSemaphoreNew+0x88>
          mem = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	623b      	str	r3, [r7, #32]
 800b3fe:	e001      	b.n	800b404 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b40a:	d04d      	beq.n	800b4a8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d129      	bne.n	800b466 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d10b      	bne.n	800b430 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	689a      	ldr	r2, [r3, #8]
 800b41c:	2303      	movs	r3, #3
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	4613      	mov	r3, r2
 800b422:	2200      	movs	r2, #0
 800b424:	2100      	movs	r1, #0
 800b426:	2001      	movs	r0, #1
 800b428:	f000 fa54 	bl	800b8d4 <xQueueGenericCreateStatic>
 800b42c:	6278      	str	r0, [r7, #36]	; 0x24
 800b42e:	e005      	b.n	800b43c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800b430:	2203      	movs	r2, #3
 800b432:	2100      	movs	r1, #0
 800b434:	2001      	movs	r0, #1
 800b436:	f000 fac0 	bl	800b9ba <xQueueGenericCreate>
 800b43a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d022      	beq.n	800b488 <osSemaphoreNew+0x10c>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d01f      	beq.n	800b488 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b448:	2300      	movs	r3, #0
 800b44a:	2200      	movs	r2, #0
 800b44c:	2100      	movs	r1, #0
 800b44e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b450:	f000 fc30 	bl	800bcb4 <xQueueGenericSend>
 800b454:	4603      	mov	r3, r0
 800b456:	2b01      	cmp	r3, #1
 800b458:	d016      	beq.n	800b488 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800b45a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b45c:	f001 f8a3 	bl	800c5a6 <vQueueDelete>
            hSemaphore = NULL;
 800b460:	2300      	movs	r3, #0
 800b462:	627b      	str	r3, [r7, #36]	; 0x24
 800b464:	e010      	b.n	800b488 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800b466:	6a3b      	ldr	r3, [r7, #32]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d108      	bne.n	800b47e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	461a      	mov	r2, r3
 800b472:	68b9      	ldr	r1, [r7, #8]
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f000 fbb7 	bl	800bbe8 <xQueueCreateCountingSemaphoreStatic>
 800b47a:	6278      	str	r0, [r7, #36]	; 0x24
 800b47c:	e004      	b.n	800b488 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b47e:	68b9      	ldr	r1, [r7, #8]
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 fbe6 	bl	800bc52 <xQueueCreateCountingSemaphore>
 800b486:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00c      	beq.n	800b4a8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d003      	beq.n	800b49c <osSemaphoreNew+0x120>
          name = attr->name;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	61fb      	str	r3, [r7, #28]
 800b49a:	e001      	b.n	800b4a0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800b49c:	2300      	movs	r3, #0
 800b49e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b4a0:	69f9      	ldr	r1, [r7, #28]
 800b4a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4a4:	f001 f9ca 	bl	800c83c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3728      	adds	r7, #40	; 0x28
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20000338 	.word	0x20000338

0800b4b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b088      	sub	sp, #32
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d103      	bne.n	800b4d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b4d0:	f06f 0303 	mvn.w	r3, #3
 800b4d4:	61fb      	str	r3, [r7, #28]
 800b4d6:	e04b      	b.n	800b570 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4d8:	f3ef 8305 	mrs	r3, IPSR
 800b4dc:	617b      	str	r3, [r7, #20]
  return(result);
 800b4de:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10f      	bne.n	800b504 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4e8:	613b      	str	r3, [r7, #16]
  return(result);
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d105      	bne.n	800b4fc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4f0:	f3ef 8311 	mrs	r3, BASEPRI
 800b4f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d026      	beq.n	800b54a <osSemaphoreAcquire+0x92>
 800b4fc:	4b1f      	ldr	r3, [pc, #124]	; (800b57c <osSemaphoreAcquire+0xc4>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b02      	cmp	r3, #2
 800b502:	d122      	bne.n	800b54a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800b50a:	f06f 0303 	mvn.w	r3, #3
 800b50e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b510:	e02d      	b.n	800b56e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800b512:	2300      	movs	r3, #0
 800b514:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b516:	f107 0308 	add.w	r3, r7, #8
 800b51a:	461a      	mov	r2, r3
 800b51c:	2100      	movs	r1, #0
 800b51e:	69b8      	ldr	r0, [r7, #24]
 800b520:	f000 ffc4 	bl	800c4ac <xQueueReceiveFromISR>
 800b524:	4603      	mov	r3, r0
 800b526:	2b01      	cmp	r3, #1
 800b528:	d003      	beq.n	800b532 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800b52a:	f06f 0302 	mvn.w	r3, #2
 800b52e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b530:	e01d      	b.n	800b56e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01a      	beq.n	800b56e <osSemaphoreAcquire+0xb6>
 800b538:	4b11      	ldr	r3, [pc, #68]	; (800b580 <osSemaphoreAcquire+0xc8>)
 800b53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800b548:	e011      	b.n	800b56e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	69b8      	ldr	r0, [r7, #24]
 800b54e:	f000 fea5 	bl	800c29c <xQueueSemaphoreTake>
 800b552:	4603      	mov	r3, r0
 800b554:	2b01      	cmp	r3, #1
 800b556:	d00b      	beq.n	800b570 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800b55e:	f06f 0301 	mvn.w	r3, #1
 800b562:	61fb      	str	r3, [r7, #28]
 800b564:	e004      	b.n	800b570 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800b566:	f06f 0302 	mvn.w	r3, #2
 800b56a:	61fb      	str	r3, [r7, #28]
 800b56c:	e000      	b.n	800b570 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800b56e:	bf00      	nop
      }
    }
  }

  return (stat);
 800b570:	69fb      	ldr	r3, [r7, #28]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3720      	adds	r7, #32
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	20000338 	.word	0x20000338
 800b580:	e000ed04 	.word	0xe000ed04

0800b584 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b590:	2300      	movs	r3, #0
 800b592:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b59a:	f06f 0303 	mvn.w	r3, #3
 800b59e:	61fb      	str	r3, [r7, #28]
 800b5a0:	e03e      	b.n	800b620 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5a2:	f3ef 8305 	mrs	r3, IPSR
 800b5a6:	617b      	str	r3, [r7, #20]
  return(result);
 800b5a8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10f      	bne.n	800b5ce <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b2:	613b      	str	r3, [r7, #16]
  return(result);
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d105      	bne.n	800b5c6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5ba:	f3ef 8311 	mrs	r3, BASEPRI
 800b5be:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d01e      	beq.n	800b604 <osSemaphoreRelease+0x80>
 800b5c6:	4b19      	ldr	r3, [pc, #100]	; (800b62c <osSemaphoreRelease+0xa8>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d11a      	bne.n	800b604 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b5d2:	f107 0308 	add.w	r3, r7, #8
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	69b8      	ldr	r0, [r7, #24]
 800b5da:	f000 fcf9 	bl	800bfd0 <xQueueGiveFromISR>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d003      	beq.n	800b5ec <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800b5e4:	f06f 0302 	mvn.w	r3, #2
 800b5e8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b5ea:	e018      	b.n	800b61e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d015      	beq.n	800b61e <osSemaphoreRelease+0x9a>
 800b5f2:	4b0f      	ldr	r3, [pc, #60]	; (800b630 <osSemaphoreRelease+0xac>)
 800b5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b602:	e00c      	b.n	800b61e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b604:	2300      	movs	r3, #0
 800b606:	2200      	movs	r2, #0
 800b608:	2100      	movs	r1, #0
 800b60a:	69b8      	ldr	r0, [r7, #24]
 800b60c:	f000 fb52 	bl	800bcb4 <xQueueGenericSend>
 800b610:	4603      	mov	r3, r0
 800b612:	2b01      	cmp	r3, #1
 800b614:	d004      	beq.n	800b620 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800b616:	f06f 0302 	mvn.w	r3, #2
 800b61a:	61fb      	str	r3, [r7, #28]
 800b61c:	e000      	b.n	800b620 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b61e:	bf00      	nop
    }
  }

  return (stat);
 800b620:	69fb      	ldr	r3, [r7, #28]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3720      	adds	r7, #32
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20000338 	.word	0x20000338
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4a07      	ldr	r2, [pc, #28]	; (800b660 <vApplicationGetIdleTaskMemory+0x2c>)
 800b644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	4a06      	ldr	r2, [pc, #24]	; (800b664 <vApplicationGetIdleTaskMemory+0x30>)
 800b64a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b652:	601a      	str	r2, [r3, #0]
}
 800b654:	bf00      	nop
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	2000033c 	.word	0x2000033c
 800b664:	20000398 	.word	0x20000398

0800b668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	4a07      	ldr	r2, [pc, #28]	; (800b694 <vApplicationGetTimerTaskMemory+0x2c>)
 800b678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	4a06      	ldr	r2, [pc, #24]	; (800b698 <vApplicationGetTimerTaskMemory+0x30>)
 800b67e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b686:	601a      	str	r2, [r3, #0]
}
 800b688:	bf00      	nop
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	20000b98 	.word	0x20000b98
 800b698:	20000bf4 	.word	0x20000bf4

0800b69c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f103 0208 	add.w	r2, r3, #8
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f103 0208 	add.w	r2, r3, #8
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f103 0208 	add.w	r2, r3, #8
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6ea:	bf00      	nop
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b085      	sub	sp, #20
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	689a      	ldr	r2, [r3, #8]
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	1c5a      	adds	r2, r3, #1
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	601a      	str	r2, [r3, #0]
}
 800b732:	bf00      	nop
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b73e:	b480      	push	{r7}
 800b740:	b085      	sub	sp, #20
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b754:	d103      	bne.n	800b75e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	e00c      	b.n	800b778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	3308      	adds	r3, #8
 800b762:	60fb      	str	r3, [r7, #12]
 800b764:	e002      	b.n	800b76c <vListInsert+0x2e>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	429a      	cmp	r2, r3
 800b776:	d2f6      	bcs.n	800b766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	1c5a      	adds	r2, r3, #1
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	601a      	str	r2, [r3, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	6892      	ldr	r2, [r2, #8]
 800b7c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	6852      	ldr	r2, [r2, #4]
 800b7d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d103      	bne.n	800b7e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	1e5a      	subs	r2, r3, #1
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d109      	bne.n	800b82c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	60bb      	str	r3, [r7, #8]
 800b82a:	e7fe      	b.n	800b82a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b82c:	f002 ff36 	bl	800e69c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b838:	68f9      	ldr	r1, [r7, #12]
 800b83a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	441a      	add	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b85c:	3b01      	subs	r3, #1
 800b85e:	68f9      	ldr	r1, [r7, #12]
 800b860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b862:	fb01 f303 	mul.w	r3, r1, r3
 800b866:	441a      	add	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	22ff      	movs	r2, #255	; 0xff
 800b870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	22ff      	movs	r2, #255	; 0xff
 800b878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d114      	bne.n	800b8ac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d01a      	beq.n	800b8c0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3310      	adds	r3, #16
 800b88e:	4618      	mov	r0, r3
 800b890:	f001 fce4 	bl	800d25c <xTaskRemoveFromEventList>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d012      	beq.n	800b8c0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b89a:	4b0d      	ldr	r3, [pc, #52]	; (800b8d0 <xQueueGenericReset+0xcc>)
 800b89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	e009      	b.n	800b8c0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3310      	adds	r3, #16
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7ff fef3 	bl	800b69c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3324      	adds	r3, #36	; 0x24
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff feee 	bl	800b69c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8c0:	f002 ff1a 	bl	800e6f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8c4:	2301      	movs	r3, #1
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	e000ed04 	.word	0xe000ed04

0800b8d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08e      	sub	sp, #56	; 0x38
 800b8d8:	af02      	add	r7, sp, #8
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
 800b8e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d109      	bne.n	800b8fc <xQueueGenericCreateStatic+0x28>
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8fa:	e7fe      	b.n	800b8fa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d109      	bne.n	800b916 <xQueueGenericCreateStatic+0x42>
 800b902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
 800b914:	e7fe      	b.n	800b914 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d002      	beq.n	800b922 <xQueueGenericCreateStatic+0x4e>
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d001      	beq.n	800b926 <xQueueGenericCreateStatic+0x52>
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <xQueueGenericCreateStatic+0x54>
 800b926:	2300      	movs	r3, #0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d109      	bne.n	800b940 <xQueueGenericCreateStatic+0x6c>
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	623b      	str	r3, [r7, #32]
 800b93e:	e7fe      	b.n	800b93e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <xQueueGenericCreateStatic+0x78>
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <xQueueGenericCreateStatic+0x7c>
 800b94c:	2301      	movs	r3, #1
 800b94e:	e000      	b.n	800b952 <xQueueGenericCreateStatic+0x7e>
 800b950:	2300      	movs	r3, #0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d109      	bne.n	800b96a <xQueueGenericCreateStatic+0x96>
 800b956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	61fb      	str	r3, [r7, #28]
 800b968:	e7fe      	b.n	800b968 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b96a:	2350      	movs	r3, #80	; 0x50
 800b96c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b50      	cmp	r3, #80	; 0x50
 800b972:	d009      	beq.n	800b988 <xQueueGenericCreateStatic+0xb4>
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	61bb      	str	r3, [r7, #24]
 800b986:	e7fe      	b.n	800b986 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b988:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00d      	beq.n	800b9b0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b99c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	68b9      	ldr	r1, [r7, #8]
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 f844 	bl	800ba38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3730      	adds	r7, #48	; 0x30
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b08a      	sub	sp, #40	; 0x28
 800b9be:	af02      	add	r7, sp, #8
 800b9c0:	60f8      	str	r0, [r7, #12]
 800b9c2:	60b9      	str	r1, [r7, #8]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d109      	bne.n	800b9e2 <xQueueGenericCreate+0x28>
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	613b      	str	r3, [r7, #16]
 800b9e0:	e7fe      	b.n	800b9e0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d102      	bne.n	800b9ee <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	61fb      	str	r3, [r7, #28]
 800b9ec:	e004      	b.n	800b9f8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	fb02 f303 	mul.w	r3, r2, r3
 800b9f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	3350      	adds	r3, #80	; 0x50
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f002 ff67 	bl	800e8d0 <pvPortMalloc>
 800ba02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d011      	beq.n	800ba2e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	3350      	adds	r3, #80	; 0x50
 800ba12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba1c:	79fa      	ldrb	r2, [r7, #7]
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	4613      	mov	r3, r2
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	68b9      	ldr	r1, [r7, #8]
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f000 f805 	bl	800ba38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba2e:	69bb      	ldr	r3, [r7, #24]
	}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3720      	adds	r7, #32
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d103      	bne.n	800ba54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	69ba      	ldr	r2, [r7, #24]
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	e002      	b.n	800ba5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba66:	2101      	movs	r1, #1
 800ba68:	69b8      	ldr	r0, [r7, #24]
 800ba6a:	f7ff fecb 	bl	800b804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	78fa      	ldrb	r2, [r7, #3]
 800ba72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba76:	bf00      	nop
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b082      	sub	sp, #8
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00e      	beq.n	800baaa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ba9e:	2300      	movs	r3, #0
 800baa0:	2200      	movs	r2, #0
 800baa2:	2100      	movs	r1, #0
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f905 	bl	800bcb4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800baaa:	bf00      	nop
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b086      	sub	sp, #24
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	4603      	mov	r3, r0
 800baba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800babc:	2301      	movs	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	2300      	movs	r3, #0
 800bac2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	461a      	mov	r2, r3
 800bac8:	6939      	ldr	r1, [r7, #16]
 800baca:	6978      	ldr	r0, [r7, #20]
 800bacc:	f7ff ff75 	bl	800b9ba <xQueueGenericCreate>
 800bad0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff ffd3 	bl	800ba7e <prvInitialiseMutex>

		return xNewQueue;
 800bad8:	68fb      	ldr	r3, [r7, #12]
	}
 800bada:	4618      	mov	r0, r3
 800badc:	3718      	adds	r7, #24
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b088      	sub	sp, #32
 800bae6:	af02      	add	r7, sp, #8
 800bae8:	4603      	mov	r3, r0
 800baea:	6039      	str	r1, [r7, #0]
 800baec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800baee:	2301      	movs	r3, #1
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	2300      	movs	r3, #0
 800baf4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	2200      	movs	r2, #0
 800bafe:	6939      	ldr	r1, [r7, #16]
 800bb00:	6978      	ldr	r0, [r7, #20]
 800bb02:	f7ff fee7 	bl	800b8d4 <xQueueGenericCreateStatic>
 800bb06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f7ff ffb8 	bl	800ba7e <prvInitialiseMutex>

		return xNewQueue;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
	}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bb18:	b590      	push	{r4, r7, lr}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d109      	bne.n	800bb3e <xQueueGiveMutexRecursive+0x26>
 800bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	60fb      	str	r3, [r7, #12]
 800bb3c:	e7fe      	b.n	800bb3c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	689c      	ldr	r4, [r3, #8]
 800bb42:	f001 fd69 	bl	800d618 <xTaskGetCurrentTaskHandle>
 800bb46:	4603      	mov	r3, r0
 800bb48:	429c      	cmp	r4, r3
 800bb4a:	d111      	bne.n	800bb70 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	1e5a      	subs	r2, r3, #1
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d105      	bne.n	800bb6a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bb5e:	2300      	movs	r3, #0
 800bb60:	2200      	movs	r2, #0
 800bb62:	2100      	movs	r1, #0
 800bb64:	6938      	ldr	r0, [r7, #16]
 800bb66:	f000 f8a5 	bl	800bcb4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	617b      	str	r3, [r7, #20]
 800bb6e:	e001      	b.n	800bb74 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bb70:	2300      	movs	r3, #0
 800bb72:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bb74:	697b      	ldr	r3, [r7, #20]
	}
 800bb76:	4618      	mov	r0, r3
 800bb78:	371c      	adds	r7, #28
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd90      	pop	{r4, r7, pc}

0800bb7e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bb7e:	b590      	push	{r4, r7, lr}
 800bb80:	b087      	sub	sp, #28
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d109      	bne.n	800bba6 <xQueueTakeMutexRecursive+0x28>
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	60fb      	str	r3, [r7, #12]
 800bba4:	e7fe      	b.n	800bba4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	689c      	ldr	r4, [r3, #8]
 800bbaa:	f001 fd35 	bl	800d618 <xTaskGetCurrentTaskHandle>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	429c      	cmp	r4, r3
 800bbb2:	d107      	bne.n	800bbc4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	e00c      	b.n	800bbde <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6938      	ldr	r0, [r7, #16]
 800bbc8:	f000 fb68 	bl	800c29c <xQueueSemaphoreTake>
 800bbcc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d004      	beq.n	800bbde <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bbde:	697b      	ldr	r3, [r7, #20]
	}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	371c      	adds	r7, #28
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd90      	pop	{r4, r7, pc}

0800bbe8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08a      	sub	sp, #40	; 0x28
 800bbec:	af02      	add	r7, sp, #8
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d109      	bne.n	800bc0e <xQueueCreateCountingSemaphoreStatic+0x26>
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	61bb      	str	r3, [r7, #24]
 800bc0c:	e7fe      	b.n	800bc0c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d909      	bls.n	800bc2a <xQueueCreateCountingSemaphoreStatic+0x42>
 800bc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	e7fe      	b.n	800bc28 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	2100      	movs	r1, #0
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7ff fe4d 	bl	800b8d4 <xQueueGenericCreateStatic>
 800bc3a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d002      	beq.n	800bc48 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bc48:	69fb      	ldr	r3, [r7, #28]
	}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3720      	adds	r7, #32
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b086      	sub	sp, #24
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d109      	bne.n	800bc76 <xQueueCreateCountingSemaphore+0x24>
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	613b      	str	r3, [r7, #16]
 800bc74:	e7fe      	b.n	800bc74 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d909      	bls.n	800bc92 <xQueueCreateCountingSemaphore+0x40>
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	e7fe      	b.n	800bc90 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc92:	2202      	movs	r2, #2
 800bc94:	2100      	movs	r1, #0
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7ff fe8f 	bl	800b9ba <xQueueGenericCreate>
 800bc9c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bcaa:	697b      	ldr	r3, [r7, #20]
	}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3718      	adds	r7, #24
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08e      	sub	sp, #56	; 0x38
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d109      	bne.n	800bce4 <xQueueGenericSend+0x30>
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bce2:	e7fe      	b.n	800bce2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d103      	bne.n	800bcf2 <xQueueGenericSend+0x3e>
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <xQueueGenericSend+0x42>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e000      	b.n	800bcf8 <xQueueGenericSend+0x44>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d109      	bne.n	800bd10 <xQueueGenericSend+0x5c>
 800bcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd0e:	e7fe      	b.n	800bd0e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d103      	bne.n	800bd1e <xQueueGenericSend+0x6a>
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d101      	bne.n	800bd22 <xQueueGenericSend+0x6e>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e000      	b.n	800bd24 <xQueueGenericSend+0x70>
 800bd22:	2300      	movs	r3, #0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d109      	bne.n	800bd3c <xQueueGenericSend+0x88>
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	623b      	str	r3, [r7, #32]
 800bd3a:	e7fe      	b.n	800bd3a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd3c:	f001 fc7c 	bl	800d638 <xTaskGetSchedulerState>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d102      	bne.n	800bd4c <xQueueGenericSend+0x98>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <xQueueGenericSend+0x9c>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e000      	b.n	800bd52 <xQueueGenericSend+0x9e>
 800bd50:	2300      	movs	r3, #0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d109      	bne.n	800bd6a <xQueueGenericSend+0xb6>
 800bd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5a:	f383 8811 	msr	BASEPRI, r3
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	f3bf 8f4f 	dsb	sy
 800bd66:	61fb      	str	r3, [r7, #28]
 800bd68:	e7fe      	b.n	800bd68 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd6a:	f002 fc97 	bl	800e69c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d302      	bcc.n	800bd80 <xQueueGenericSend+0xcc>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d129      	bne.n	800bdd4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd80:	683a      	ldr	r2, [r7, #0]
 800bd82:	68b9      	ldr	r1, [r7, #8]
 800bd84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd86:	f000 fc48 	bl	800c61a <prvCopyDataToQueue>
 800bd8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d010      	beq.n	800bdb6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	3324      	adds	r3, #36	; 0x24
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f001 fa5f 	bl	800d25c <xTaskRemoveFromEventList>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d013      	beq.n	800bdcc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bda4:	4b3f      	ldr	r3, [pc, #252]	; (800bea4 <xQueueGenericSend+0x1f0>)
 800bda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdaa:	601a      	str	r2, [r3, #0]
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	e00a      	b.n	800bdcc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d007      	beq.n	800bdcc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bdbc:	4b39      	ldr	r3, [pc, #228]	; (800bea4 <xQueueGenericSend+0x1f0>)
 800bdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bdcc:	f002 fc94 	bl	800e6f8 <vPortExitCritical>
				return pdPASS;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e063      	b.n	800be9c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d103      	bne.n	800bde2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdda:	f002 fc8d 	bl	800e6f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	e05c      	b.n	800be9c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d106      	bne.n	800bdf6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bde8:	f107 0314 	add.w	r3, r7, #20
 800bdec:	4618      	mov	r0, r3
 800bdee:	f001 fa99 	bl	800d324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdf6:	f002 fc7f 	bl	800e6f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdfa:	f000 ffdb 	bl	800cdb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdfe:	f002 fc4d 	bl	800e69c <vPortEnterCritical>
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be08:	b25b      	sxtb	r3, r3
 800be0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0e:	d103      	bne.n	800be18 <xQueueGenericSend+0x164>
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be1e:	b25b      	sxtb	r3, r3
 800be20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be24:	d103      	bne.n	800be2e <xQueueGenericSend+0x17a>
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be2e:	f002 fc63 	bl	800e6f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be32:	1d3a      	adds	r2, r7, #4
 800be34:	f107 0314 	add.w	r3, r7, #20
 800be38:	4611      	mov	r1, r2
 800be3a:	4618      	mov	r0, r3
 800be3c:	f001 fa88 	bl	800d350 <xTaskCheckForTimeOut>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d124      	bne.n	800be90 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be48:	f000 fcdf 	bl	800c80a <prvIsQueueFull>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d018      	beq.n	800be84 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	3310      	adds	r3, #16
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	4611      	mov	r1, r2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f001 f9b0 	bl	800d1c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be62:	f000 fc6a 	bl	800c73a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be66:	f000 ffeb 	bl	800ce40 <xTaskResumeAll>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f47f af7c 	bne.w	800bd6a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800be72:	4b0c      	ldr	r3, [pc, #48]	; (800bea4 <xQueueGenericSend+0x1f0>)
 800be74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be78:	601a      	str	r2, [r3, #0]
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	e772      	b.n	800bd6a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be86:	f000 fc58 	bl	800c73a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be8a:	f000 ffd9 	bl	800ce40 <xTaskResumeAll>
 800be8e:	e76c      	b.n	800bd6a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be92:	f000 fc52 	bl	800c73a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be96:	f000 ffd3 	bl	800ce40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3738      	adds	r7, #56	; 0x38
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	e000ed04 	.word	0xe000ed04

0800bea8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08e      	sub	sp, #56	; 0x38
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d109      	bne.n	800bed4 <xQueueGenericSendFromISR+0x2c>
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	627b      	str	r3, [r7, #36]	; 0x24
 800bed2:	e7fe      	b.n	800bed2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d103      	bne.n	800bee2 <xQueueGenericSendFromISR+0x3a>
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <xQueueGenericSendFromISR+0x3e>
 800bee2:	2301      	movs	r3, #1
 800bee4:	e000      	b.n	800bee8 <xQueueGenericSendFromISR+0x40>
 800bee6:	2300      	movs	r3, #0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d109      	bne.n	800bf00 <xQueueGenericSendFromISR+0x58>
 800beec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef0:	f383 8811 	msr	BASEPRI, r3
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	623b      	str	r3, [r7, #32]
 800befe:	e7fe      	b.n	800befe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d103      	bne.n	800bf0e <xQueueGenericSendFromISR+0x66>
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d101      	bne.n	800bf12 <xQueueGenericSendFromISR+0x6a>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e000      	b.n	800bf14 <xQueueGenericSendFromISR+0x6c>
 800bf12:	2300      	movs	r3, #0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d109      	bne.n	800bf2c <xQueueGenericSendFromISR+0x84>
 800bf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1c:	f383 8811 	msr	BASEPRI, r3
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	61fb      	str	r3, [r7, #28]
 800bf2a:	e7fe      	b.n	800bf2a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf2c:	f002 fc92 	bl	800e854 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf30:	f3ef 8211 	mrs	r2, BASEPRI
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	61ba      	str	r2, [r7, #24]
 800bf46:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf48:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d302      	bcc.n	800bf5e <xQueueGenericSendFromISR+0xb6>
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d12c      	bne.n	800bfb8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf6e:	f000 fb54 	bl	800c61a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf72:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bf76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf7a:	d112      	bne.n	800bfa2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d016      	beq.n	800bfb2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	3324      	adds	r3, #36	; 0x24
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f001 f967 	bl	800d25c <xTaskRemoveFromEventList>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00e      	beq.n	800bfb2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00b      	beq.n	800bfb2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	601a      	str	r2, [r3, #0]
 800bfa0:	e007      	b.n	800bfb2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	b25a      	sxtb	r2, r3
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bfb6:	e001      	b.n	800bfbc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	637b      	str	r3, [r7, #52]	; 0x34
 800bfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3738      	adds	r7, #56	; 0x38
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08e      	sub	sp, #56	; 0x38
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d109      	bne.n	800bff8 <xQueueGiveFromISR+0x28>
	__asm volatile
 800bfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	623b      	str	r3, [r7, #32]
 800bff6:	e7fe      	b.n	800bff6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d009      	beq.n	800c014 <xQueueGiveFromISR+0x44>
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	61fb      	str	r3, [r7, #28]
 800c012:	e7fe      	b.n	800c012 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d103      	bne.n	800c024 <xQueueGiveFromISR+0x54>
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <xQueueGiveFromISR+0x58>
 800c024:	2301      	movs	r3, #1
 800c026:	e000      	b.n	800c02a <xQueueGiveFromISR+0x5a>
 800c028:	2300      	movs	r3, #0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d109      	bne.n	800c042 <xQueueGiveFromISR+0x72>
 800c02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	61bb      	str	r3, [r7, #24]
 800c040:	e7fe      	b.n	800c040 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c042:	f002 fc07 	bl	800e854 <vPortValidateInterruptPriority>
	__asm volatile
 800c046:	f3ef 8211 	mrs	r2, BASEPRI
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	617a      	str	r2, [r7, #20]
 800c05c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c05e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c060:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c066:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c06c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c06e:	429a      	cmp	r2, r3
 800c070:	d22b      	bcs.n	800c0ca <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08c:	d112      	bne.n	800c0b4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c092:	2b00      	cmp	r3, #0
 800c094:	d016      	beq.n	800c0c4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c098:	3324      	adds	r3, #36	; 0x24
 800c09a:	4618      	mov	r0, r3
 800c09c:	f001 f8de 	bl	800d25c <xTaskRemoveFromEventList>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00e      	beq.n	800c0c4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00b      	beq.n	800c0c4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	601a      	str	r2, [r3, #0]
 800c0b2:	e007      	b.n	800c0c4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	b25a      	sxtb	r2, r3
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c0c8:	e001      	b.n	800c0ce <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3738      	adds	r7, #56	; 0x38
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b08c      	sub	sp, #48	; 0x30
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d109      	bne.n	800c112 <xQueueReceive+0x2e>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	623b      	str	r3, [r7, #32]
 800c110:	e7fe      	b.n	800c110 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d103      	bne.n	800c120 <xQueueReceive+0x3c>
 800c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <xQueueReceive+0x40>
 800c120:	2301      	movs	r3, #1
 800c122:	e000      	b.n	800c126 <xQueueReceive+0x42>
 800c124:	2300      	movs	r3, #0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d109      	bne.n	800c13e <xQueueReceive+0x5a>
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	61fb      	str	r3, [r7, #28]
 800c13c:	e7fe      	b.n	800c13c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c13e:	f001 fa7b 	bl	800d638 <xTaskGetSchedulerState>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d102      	bne.n	800c14e <xQueueReceive+0x6a>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <xQueueReceive+0x6e>
 800c14e:	2301      	movs	r3, #1
 800c150:	e000      	b.n	800c154 <xQueueReceive+0x70>
 800c152:	2300      	movs	r3, #0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d109      	bne.n	800c16c <xQueueReceive+0x88>
 800c158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15c:	f383 8811 	msr	BASEPRI, r3
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	61bb      	str	r3, [r7, #24]
 800c16a:	e7fe      	b.n	800c16a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c16c:	f002 fa96 	bl	800e69c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c174:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d01f      	beq.n	800c1bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c180:	f000 fab5 	bl	800c6ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	1e5a      	subs	r2, r3, #1
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00f      	beq.n	800c1b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	3310      	adds	r3, #16
 800c198:	4618      	mov	r0, r3
 800c19a:	f001 f85f 	bl	800d25c <xTaskRemoveFromEventList>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d007      	beq.n	800c1b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1a4:	4b3c      	ldr	r3, [pc, #240]	; (800c298 <xQueueReceive+0x1b4>)
 800c1a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1b4:	f002 faa0 	bl	800e6f8 <vPortExitCritical>
				return pdPASS;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e069      	b.n	800c290 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d103      	bne.n	800c1ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1c2:	f002 fa99 	bl	800e6f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	e062      	b.n	800c290 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d106      	bne.n	800c1de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1d0:	f107 0310 	add.w	r3, r7, #16
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 f8a5 	bl	800d324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1de:	f002 fa8b 	bl	800e6f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1e2:	f000 fde7 	bl	800cdb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1e6:	f002 fa59 	bl	800e69c <vPortEnterCritical>
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1f0:	b25b      	sxtb	r3, r3
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f6:	d103      	bne.n	800c200 <xQueueReceive+0x11c>
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c206:	b25b      	sxtb	r3, r3
 800c208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20c:	d103      	bne.n	800c216 <xQueueReceive+0x132>
 800c20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c216:	f002 fa6f 	bl	800e6f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c21a:	1d3a      	adds	r2, r7, #4
 800c21c:	f107 0310 	add.w	r3, r7, #16
 800c220:	4611      	mov	r1, r2
 800c222:	4618      	mov	r0, r3
 800c224:	f001 f894 	bl	800d350 <xTaskCheckForTimeOut>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d123      	bne.n	800c276 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c230:	f000 fad5 	bl	800c7de <prvIsQueueEmpty>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d017      	beq.n	800c26a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	3324      	adds	r3, #36	; 0x24
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	4611      	mov	r1, r2
 800c242:	4618      	mov	r0, r3
 800c244:	f000 ffbc 	bl	800d1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c24a:	f000 fa76 	bl	800c73a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c24e:	f000 fdf7 	bl	800ce40 <xTaskResumeAll>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d189      	bne.n	800c16c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c258:	4b0f      	ldr	r3, [pc, #60]	; (800c298 <xQueueReceive+0x1b4>)
 800c25a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25e:	601a      	str	r2, [r3, #0]
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	e780      	b.n	800c16c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c26c:	f000 fa65 	bl	800c73a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c270:	f000 fde6 	bl	800ce40 <xTaskResumeAll>
 800c274:	e77a      	b.n	800c16c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c278:	f000 fa5f 	bl	800c73a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c27c:	f000 fde0 	bl	800ce40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c282:	f000 faac 	bl	800c7de <prvIsQueueEmpty>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f43f af6f 	beq.w	800c16c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c28e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c290:	4618      	mov	r0, r3
 800c292:	3730      	adds	r7, #48	; 0x30
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	e000ed04 	.word	0xe000ed04

0800c29c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08e      	sub	sp, #56	; 0x38
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d109      	bne.n	800c2cc <xQueueSemaphoreTake+0x30>
 800c2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	623b      	str	r3, [r7, #32]
 800c2ca:	e7fe      	b.n	800c2ca <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d009      	beq.n	800c2e8 <xQueueSemaphoreTake+0x4c>
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	61fb      	str	r3, [r7, #28]
 800c2e6:	e7fe      	b.n	800c2e6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2e8:	f001 f9a6 	bl	800d638 <xTaskGetSchedulerState>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d102      	bne.n	800c2f8 <xQueueSemaphoreTake+0x5c>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <xQueueSemaphoreTake+0x60>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e000      	b.n	800c2fe <xQueueSemaphoreTake+0x62>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <xQueueSemaphoreTake+0x7a>
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	61bb      	str	r3, [r7, #24]
 800c314:	e7fe      	b.n	800c314 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c316:	f002 f9c1 	bl	800e69c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	2b00      	cmp	r3, #0
 800c324:	d024      	beq.n	800c370 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	1e5a      	subs	r2, r3, #1
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d104      	bne.n	800c340 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c336:	f001 faf1 	bl	800d91c <pvTaskIncrementMutexHeldCount>
 800c33a:	4602      	mov	r2, r0
 800c33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00f      	beq.n	800c368 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34a:	3310      	adds	r3, #16
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 ff85 	bl	800d25c <xTaskRemoveFromEventList>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d007      	beq.n	800c368 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c358:	4b53      	ldr	r3, [pc, #332]	; (800c4a8 <xQueueSemaphoreTake+0x20c>)
 800c35a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c368:	f002 f9c6 	bl	800e6f8 <vPortExitCritical>
				return pdPASS;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e096      	b.n	800c49e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d110      	bne.n	800c398 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d009      	beq.n	800c390 <xQueueSemaphoreTake+0xf4>
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	617b      	str	r3, [r7, #20]
 800c38e:	e7fe      	b.n	800c38e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c390:	f002 f9b2 	bl	800e6f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c394:	2300      	movs	r3, #0
 800c396:	e082      	b.n	800c49e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d106      	bne.n	800c3ac <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c39e:	f107 030c 	add.w	r3, r7, #12
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 ffbe 	bl	800d324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3ac:	f002 f9a4 	bl	800e6f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3b0:	f000 fd00 	bl	800cdb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3b4:	f002 f972 	bl	800e69c <vPortEnterCritical>
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3be:	b25b      	sxtb	r3, r3
 800c3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c4:	d103      	bne.n	800c3ce <xQueueSemaphoreTake+0x132>
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3d4:	b25b      	sxtb	r3, r3
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3da:	d103      	bne.n	800c3e4 <xQueueSemaphoreTake+0x148>
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3e4:	f002 f988 	bl	800e6f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3e8:	463a      	mov	r2, r7
 800c3ea:	f107 030c 	add.w	r3, r7, #12
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 ffad 	bl	800d350 <xTaskCheckForTimeOut>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d132      	bne.n	800c462 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3fe:	f000 f9ee 	bl	800c7de <prvIsQueueEmpty>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d026      	beq.n	800c456 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d109      	bne.n	800c424 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c410:	f002 f944 	bl	800e69c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	4618      	mov	r0, r3
 800c41a:	f001 f92b 	bl	800d674 <xTaskPriorityInherit>
 800c41e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c420:	f002 f96a 	bl	800e6f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	3324      	adds	r3, #36	; 0x24
 800c428:	683a      	ldr	r2, [r7, #0]
 800c42a:	4611      	mov	r1, r2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 fec7 	bl	800d1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c434:	f000 f981 	bl	800c73a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c438:	f000 fd02 	bl	800ce40 <xTaskResumeAll>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f47f af69 	bne.w	800c316 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c444:	4b18      	ldr	r3, [pc, #96]	; (800c4a8 <xQueueSemaphoreTake+0x20c>)
 800c446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44a:	601a      	str	r2, [r3, #0]
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	e75f      	b.n	800c316 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c458:	f000 f96f 	bl	800c73a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c45c:	f000 fcf0 	bl	800ce40 <xTaskResumeAll>
 800c460:	e759      	b.n	800c316 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c464:	f000 f969 	bl	800c73a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c468:	f000 fcea 	bl	800ce40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c46c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c46e:	f000 f9b6 	bl	800c7de <prvIsQueueEmpty>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	f43f af4e 	beq.w	800c316 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00d      	beq.n	800c49c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c480:	f002 f90c 	bl	800e69c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c486:	f000 f8b0 	bl	800c5ea <prvGetDisinheritPriorityAfterTimeout>
 800c48a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c492:	4618      	mov	r0, r3
 800c494:	f001 f9c2 	bl	800d81c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c498:	f002 f92e 	bl	800e6f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c49c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3738      	adds	r7, #56	; 0x38
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	e000ed04 	.word	0xe000ed04

0800c4ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08e      	sub	sp, #56	; 0x38
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d109      	bne.n	800c4d6 <xQueueReceiveFromISR+0x2a>
 800c4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	623b      	str	r3, [r7, #32]
 800c4d4:	e7fe      	b.n	800c4d4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d103      	bne.n	800c4e4 <xQueueReceiveFromISR+0x38>
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <xQueueReceiveFromISR+0x3c>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e000      	b.n	800c4ea <xQueueReceiveFromISR+0x3e>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d109      	bne.n	800c502 <xQueueReceiveFromISR+0x56>
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	61fb      	str	r3, [r7, #28]
 800c500:	e7fe      	b.n	800c500 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c502:	f002 f9a7 	bl	800e854 <vPortValidateInterruptPriority>
	__asm volatile
 800c506:	f3ef 8211 	mrs	r2, BASEPRI
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	61ba      	str	r2, [r7, #24]
 800c51c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c51e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c520:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c526:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d02f      	beq.n	800c58e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c538:	68b9      	ldr	r1, [r7, #8]
 800c53a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c53c:	f000 f8d7 	bl	800c6ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c542:	1e5a      	subs	r2, r3, #1
 800c544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c546:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c550:	d112      	bne.n	800c578 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d016      	beq.n	800c588 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	3310      	adds	r3, #16
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 fe7c 	bl	800d25c <xTaskRemoveFromEventList>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00e      	beq.n	800c588 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00b      	beq.n	800c588 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	e007      	b.n	800c588 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c57c:	3301      	adds	r3, #1
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	b25a      	sxtb	r2, r3
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c588:	2301      	movs	r3, #1
 800c58a:	637b      	str	r3, [r7, #52]	; 0x34
 800c58c:	e001      	b.n	800c592 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c58e:	2300      	movs	r3, #0
 800c590:	637b      	str	r3, [r7, #52]	; 0x34
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3738      	adds	r7, #56	; 0x38
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d109      	bne.n	800c5cc <vQueueDelete+0x26>
	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	60bb      	str	r3, [r7, #8]
 800c5ca:	e7fe      	b.n	800c5ca <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f000 f95d 	bl	800c88c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d102      	bne.n	800c5e2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f002 fa39 	bl	800ea54 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c5e2:	bf00      	nop
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b085      	sub	sp, #20
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d006      	beq.n	800c608 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c604:	60fb      	str	r3, [r7, #12]
 800c606:	e001      	b.n	800c60c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c608:	2300      	movs	r3, #0
 800c60a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c60c:	68fb      	ldr	r3, [r7, #12]
	}
 800c60e:	4618      	mov	r0, r3
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b086      	sub	sp, #24
 800c61e:	af00      	add	r7, sp, #0
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	60b9      	str	r1, [r7, #8]
 800c624:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c626:	2300      	movs	r3, #0
 800c628:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10d      	bne.n	800c654 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d14d      	bne.n	800c6dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	4618      	mov	r0, r3
 800c646:	f001 f87d 	bl	800d744 <xTaskPriorityDisinherit>
 800c64a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	609a      	str	r2, [r3, #8]
 800c652:	e043      	b.n	800c6dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d119      	bne.n	800c68e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6858      	ldr	r0, [r3, #4]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c662:	461a      	mov	r2, r3
 800c664:	68b9      	ldr	r1, [r7, #8]
 800c666:	f004 f8cd 	bl	8010804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c672:	441a      	add	r2, r3
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	429a      	cmp	r2, r3
 800c682:	d32b      	bcc.n	800c6dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	605a      	str	r2, [r3, #4]
 800c68c:	e026      	b.n	800c6dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	68d8      	ldr	r0, [r3, #12]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c696:	461a      	mov	r2, r3
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	f004 f8b3 	bl	8010804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	68da      	ldr	r2, [r3, #12]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a6:	425b      	negs	r3, r3
 800c6a8:	441a      	add	r2, r3
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	68da      	ldr	r2, [r3, #12]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d207      	bcs.n	800c6ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	689a      	ldr	r2, [r3, #8]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c2:	425b      	negs	r3, r3
 800c6c4:	441a      	add	r2, r3
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d105      	bne.n	800c6dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d002      	beq.n	800c6dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	1c5a      	adds	r2, r3, #1
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c6e4:	697b      	ldr	r3, [r7, #20]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b082      	sub	sp, #8
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d018      	beq.n	800c732 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68da      	ldr	r2, [r3, #12]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c708:	441a      	add	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68da      	ldr	r2, [r3, #12]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	429a      	cmp	r2, r3
 800c718:	d303      	bcc.n	800c722 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	68d9      	ldr	r1, [r3, #12]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72a:	461a      	mov	r2, r3
 800c72c:	6838      	ldr	r0, [r7, #0]
 800c72e:	f004 f869 	bl	8010804 <memcpy>
	}
}
 800c732:	bf00      	nop
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b084      	sub	sp, #16
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c742:	f001 ffab 	bl	800e69c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c74c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c74e:	e011      	b.n	800c774 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c754:	2b00      	cmp	r3, #0
 800c756:	d012      	beq.n	800c77e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3324      	adds	r3, #36	; 0x24
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 fd7d 	bl	800d25c <xTaskRemoveFromEventList>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d001      	beq.n	800c76c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c768:	f000 fe52 	bl	800d410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	3b01      	subs	r3, #1
 800c770:	b2db      	uxtb	r3, r3
 800c772:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dce9      	bgt.n	800c750 <prvUnlockQueue+0x16>
 800c77c:	e000      	b.n	800c780 <prvUnlockQueue+0x46>
					break;
 800c77e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	22ff      	movs	r2, #255	; 0xff
 800c784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c788:	f001 ffb6 	bl	800e6f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c78c:	f001 ff86 	bl	800e69c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c796:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c798:	e011      	b.n	800c7be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d012      	beq.n	800c7c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3310      	adds	r3, #16
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 fd58 	bl	800d25c <xTaskRemoveFromEventList>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d001      	beq.n	800c7b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c7b2:	f000 fe2d 	bl	800d410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	dce9      	bgt.n	800c79a <prvUnlockQueue+0x60>
 800c7c6:	e000      	b.n	800c7ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c7c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	22ff      	movs	r2, #255	; 0xff
 800c7ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c7d2:	f001 ff91 	bl	800e6f8 <vPortExitCritical>
}
 800c7d6:	bf00      	nop
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b084      	sub	sp, #16
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7e6:	f001 ff59 	bl	800e69c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d102      	bne.n	800c7f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	60fb      	str	r3, [r7, #12]
 800c7f6:	e001      	b.n	800c7fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7fc:	f001 ff7c 	bl	800e6f8 <vPortExitCritical>

	return xReturn;
 800c800:	68fb      	ldr	r3, [r7, #12]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b084      	sub	sp, #16
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c812:	f001 ff43 	bl	800e69c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c81e:	429a      	cmp	r2, r3
 800c820:	d102      	bne.n	800c828 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c822:	2301      	movs	r3, #1
 800c824:	60fb      	str	r3, [r7, #12]
 800c826:	e001      	b.n	800c82c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c828:	2300      	movs	r3, #0
 800c82a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c82c:	f001 ff64 	bl	800e6f8 <vPortExitCritical>

	return xReturn;
 800c830:	68fb      	ldr	r3, [r7, #12]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
	...

0800c83c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c846:	2300      	movs	r3, #0
 800c848:	60fb      	str	r3, [r7, #12]
 800c84a:	e014      	b.n	800c876 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c84c:	4a0e      	ldr	r2, [pc, #56]	; (800c888 <vQueueAddToRegistry+0x4c>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10b      	bne.n	800c870 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c858:	490b      	ldr	r1, [pc, #44]	; (800c888 <vQueueAddToRegistry+0x4c>)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c862:	4a09      	ldr	r2, [pc, #36]	; (800c888 <vQueueAddToRegistry+0x4c>)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	4413      	add	r3, r2
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c86e:	e005      	b.n	800c87c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	3301      	adds	r3, #1
 800c874:	60fb      	str	r3, [r7, #12]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2b07      	cmp	r3, #7
 800c87a:	d9e7      	bls.n	800c84c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c87c:	bf00      	nop
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	20004e64 	.word	0x20004e64

0800c88c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	e016      	b.n	800c8c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c89a:	4a10      	ldr	r2, [pc, #64]	; (800c8dc <vQueueUnregisterQueue+0x50>)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	4413      	add	r3, r2
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d10b      	bne.n	800c8c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c8aa:	4a0c      	ldr	r2, [pc, #48]	; (800c8dc <vQueueUnregisterQueue+0x50>)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c8b4:	4a09      	ldr	r2, [pc, #36]	; (800c8dc <vQueueUnregisterQueue+0x50>)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	00db      	lsls	r3, r3, #3
 800c8ba:	4413      	add	r3, r2
 800c8bc:	2200      	movs	r2, #0
 800c8be:	605a      	str	r2, [r3, #4]
				break;
 800c8c0:	e005      	b.n	800c8ce <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	60fb      	str	r3, [r7, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2b07      	cmp	r3, #7
 800c8cc:	d9e5      	bls.n	800c89a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c8ce:	bf00      	nop
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	20004e64 	.word	0x20004e64

0800c8e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c8f0:	f001 fed4 	bl	800e69c <vPortEnterCritical>
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8fa:	b25b      	sxtb	r3, r3
 800c8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c900:	d103      	bne.n	800c90a <vQueueWaitForMessageRestricted+0x2a>
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c910:	b25b      	sxtb	r3, r3
 800c912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c916:	d103      	bne.n	800c920 <vQueueWaitForMessageRestricted+0x40>
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c920:	f001 feea 	bl	800e6f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d106      	bne.n	800c93a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	3324      	adds	r3, #36	; 0x24
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	68b9      	ldr	r1, [r7, #8]
 800c934:	4618      	mov	r0, r3
 800c936:	f000 fc67 	bl	800d208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c93a:	6978      	ldr	r0, [r7, #20]
 800c93c:	f7ff fefd 	bl	800c73a <prvUnlockQueue>
	}
 800c940:	bf00      	nop
 800c942:	3718      	adds	r7, #24
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08e      	sub	sp, #56	; 0x38
 800c94c:	af04      	add	r7, sp, #16
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
 800c954:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d109      	bne.n	800c970 <xTaskCreateStatic+0x28>
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	623b      	str	r3, [r7, #32]
 800c96e:	e7fe      	b.n	800c96e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c972:	2b00      	cmp	r3, #0
 800c974:	d109      	bne.n	800c98a <xTaskCreateStatic+0x42>
 800c976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	61fb      	str	r3, [r7, #28]
 800c988:	e7fe      	b.n	800c988 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c98a:	235c      	movs	r3, #92	; 0x5c
 800c98c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	2b5c      	cmp	r3, #92	; 0x5c
 800c992:	d009      	beq.n	800c9a8 <xTaskCreateStatic+0x60>
 800c994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	61bb      	str	r3, [r7, #24]
 800c9a6:	e7fe      	b.n	800c9a6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d01e      	beq.n	800c9ee <xTaskCreateStatic+0xa6>
 800c9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d01b      	beq.n	800c9ee <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	9303      	str	r3, [sp, #12]
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	9302      	str	r3, [sp, #8]
 800c9d0:	f107 0314 	add.w	r3, r7, #20
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f000 f850 	bl	800ca86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9e8:	f000 f8dc 	bl	800cba4 <prvAddNewTaskToReadyList>
 800c9ec:	e001      	b.n	800c9f2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c9f2:	697b      	ldr	r3, [r7, #20]
	}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3728      	adds	r7, #40	; 0x28
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b08c      	sub	sp, #48	; 0x30
 800ca00:	af04      	add	r7, sp, #16
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	603b      	str	r3, [r7, #0]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca0c:	88fb      	ldrh	r3, [r7, #6]
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4618      	mov	r0, r3
 800ca12:	f001 ff5d 	bl	800e8d0 <pvPortMalloc>
 800ca16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00e      	beq.n	800ca3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca1e:	205c      	movs	r0, #92	; 0x5c
 800ca20:	f001 ff56 	bl	800e8d0 <pvPortMalloc>
 800ca24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	631a      	str	r2, [r3, #48]	; 0x30
 800ca32:	e005      	b.n	800ca40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca34:	6978      	ldr	r0, [r7, #20]
 800ca36:	f002 f80d 	bl	800ea54 <vPortFree>
 800ca3a:	e001      	b.n	800ca40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d017      	beq.n	800ca76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca4e:	88fa      	ldrh	r2, [r7, #6]
 800ca50:	2300      	movs	r3, #0
 800ca52:	9303      	str	r3, [sp, #12]
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	9302      	str	r3, [sp, #8]
 800ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5a:	9301      	str	r3, [sp, #4]
 800ca5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f000 f80e 	bl	800ca86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca6a:	69f8      	ldr	r0, [r7, #28]
 800ca6c:	f000 f89a 	bl	800cba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca70:	2301      	movs	r3, #1
 800ca72:	61bb      	str	r3, [r7, #24]
 800ca74:	e002      	b.n	800ca7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca76:	f04f 33ff 	mov.w	r3, #4294967295
 800ca7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca7c:	69bb      	ldr	r3, [r7, #24]
	}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3720      	adds	r7, #32
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b088      	sub	sp, #32
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	607a      	str	r2, [r7, #4]
 800ca92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	21a5      	movs	r1, #165	; 0xa5
 800caa0:	f003 febb 	bl	801081a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800caae:	3b01      	subs	r3, #1
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	f023 0307 	bic.w	r3, r3, #7
 800cabc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	f003 0307 	and.w	r3, r3, #7
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d009      	beq.n	800cadc <prvInitialiseNewTask+0x56>
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	617b      	str	r3, [r7, #20]
 800cada:	e7fe      	b.n	800cada <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d01f      	beq.n	800cb22 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cae2:	2300      	movs	r3, #0
 800cae4:	61fb      	str	r3, [r7, #28]
 800cae6:	e012      	b.n	800cb0e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	4413      	add	r3, r2
 800caee:	7819      	ldrb	r1, [r3, #0]
 800caf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	4413      	add	r3, r2
 800caf6:	3334      	adds	r3, #52	; 0x34
 800caf8:	460a      	mov	r2, r1
 800cafa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	4413      	add	r3, r2
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d006      	beq.n	800cb16 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	61fb      	str	r3, [r7, #28]
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	2b0f      	cmp	r3, #15
 800cb12:	d9e9      	bls.n	800cae8 <prvInitialiseNewTask+0x62>
 800cb14:	e000      	b.n	800cb18 <prvInitialiseNewTask+0x92>
			{
				break;
 800cb16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb20:	e003      	b.n	800cb2a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2c:	2b37      	cmp	r3, #55	; 0x37
 800cb2e:	d901      	bls.n	800cb34 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb30:	2337      	movs	r3, #55	; 0x37
 800cb32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	2200      	movs	r2, #0
 800cb44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	3304      	adds	r3, #4
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe fdc6 	bl	800b6dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb52:	3318      	adds	r3, #24
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe fdc1 	bl	800b6dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	2200      	movs	r2, #0
 800cb74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	68f9      	ldr	r1, [r7, #12]
 800cb82:	69b8      	ldr	r0, [r7, #24]
 800cb84:	f001 fc60 	bl	800e448 <pxPortInitialiseStack>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb9a:	bf00      	nop
 800cb9c:	3720      	adds	r7, #32
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
	...

0800cba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cbac:	f001 fd76 	bl	800e69c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cbb0:	4b2d      	ldr	r3, [pc, #180]	; (800cc68 <prvAddNewTaskToReadyList+0xc4>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	4a2c      	ldr	r2, [pc, #176]	; (800cc68 <prvAddNewTaskToReadyList+0xc4>)
 800cbb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cbba:	4b2c      	ldr	r3, [pc, #176]	; (800cc6c <prvAddNewTaskToReadyList+0xc8>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d109      	bne.n	800cbd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cbc2:	4a2a      	ldr	r2, [pc, #168]	; (800cc6c <prvAddNewTaskToReadyList+0xc8>)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cbc8:	4b27      	ldr	r3, [pc, #156]	; (800cc68 <prvAddNewTaskToReadyList+0xc4>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d110      	bne.n	800cbf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cbd0:	f000 fc68 	bl	800d4a4 <prvInitialiseTaskLists>
 800cbd4:	e00d      	b.n	800cbf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cbd6:	4b26      	ldr	r3, [pc, #152]	; (800cc70 <prvAddNewTaskToReadyList+0xcc>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d109      	bne.n	800cbf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cbde:	4b23      	ldr	r3, [pc, #140]	; (800cc6c <prvAddNewTaskToReadyList+0xc8>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d802      	bhi.n	800cbf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cbec:	4a1f      	ldr	r2, [pc, #124]	; (800cc6c <prvAddNewTaskToReadyList+0xc8>)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cbf2:	4b20      	ldr	r3, [pc, #128]	; (800cc74 <prvAddNewTaskToReadyList+0xd0>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	4a1e      	ldr	r2, [pc, #120]	; (800cc74 <prvAddNewTaskToReadyList+0xd0>)
 800cbfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cbfc:	4b1d      	ldr	r3, [pc, #116]	; (800cc74 <prvAddNewTaskToReadyList+0xd0>)
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc08:	4b1b      	ldr	r3, [pc, #108]	; (800cc78 <prvAddNewTaskToReadyList+0xd4>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d903      	bls.n	800cc18 <prvAddNewTaskToReadyList+0x74>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc14:	4a18      	ldr	r2, [pc, #96]	; (800cc78 <prvAddNewTaskToReadyList+0xd4>)
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4413      	add	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4a15      	ldr	r2, [pc, #84]	; (800cc7c <prvAddNewTaskToReadyList+0xd8>)
 800cc26:	441a      	add	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	4610      	mov	r0, r2
 800cc30:	f7fe fd61 	bl	800b6f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc34:	f001 fd60 	bl	800e6f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc38:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <prvAddNewTaskToReadyList+0xcc>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00e      	beq.n	800cc5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc40:	4b0a      	ldr	r3, [pc, #40]	; (800cc6c <prvAddNewTaskToReadyList+0xc8>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d207      	bcs.n	800cc5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc4e:	4b0c      	ldr	r3, [pc, #48]	; (800cc80 <prvAddNewTaskToReadyList+0xdc>)
 800cc50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc54:	601a      	str	r2, [r3, #0]
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc5e:	bf00      	nop
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	200020c8 	.word	0x200020c8
 800cc6c:	20001bf4 	.word	0x20001bf4
 800cc70:	200020d4 	.word	0x200020d4
 800cc74:	200020e4 	.word	0x200020e4
 800cc78:	200020d0 	.word	0x200020d0
 800cc7c:	20001bf8 	.word	0x20001bf8
 800cc80:	e000ed04 	.word	0xe000ed04

0800cc84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d016      	beq.n	800ccc4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc96:	4b13      	ldr	r3, [pc, #76]	; (800cce4 <vTaskDelay+0x60>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d009      	beq.n	800ccb2 <vTaskDelay+0x2e>
 800cc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	60bb      	str	r3, [r7, #8]
 800ccb0:	e7fe      	b.n	800ccb0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ccb2:	f000 f87f 	bl	800cdb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f001 f82b 	bl	800dd14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ccbe:	f000 f8bf 	bl	800ce40 <xTaskResumeAll>
 800ccc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d107      	bne.n	800ccda <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ccca:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <vTaskDelay+0x64>)
 800cccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccda:	bf00      	nop
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	200020f0 	.word	0x200020f0
 800cce8:	e000ed04 	.word	0xe000ed04

0800ccec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08a      	sub	sp, #40	; 0x28
 800ccf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ccfa:	463a      	mov	r2, r7
 800ccfc:	1d39      	adds	r1, r7, #4
 800ccfe:	f107 0308 	add.w	r3, r7, #8
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fe fc96 	bl	800b634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	9202      	str	r2, [sp, #8]
 800cd10:	9301      	str	r3, [sp, #4]
 800cd12:	2300      	movs	r3, #0
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	2300      	movs	r3, #0
 800cd18:	460a      	mov	r2, r1
 800cd1a:	4920      	ldr	r1, [pc, #128]	; (800cd9c <vTaskStartScheduler+0xb0>)
 800cd1c:	4820      	ldr	r0, [pc, #128]	; (800cda0 <vTaskStartScheduler+0xb4>)
 800cd1e:	f7ff fe13 	bl	800c948 <xTaskCreateStatic>
 800cd22:	4602      	mov	r2, r0
 800cd24:	4b1f      	ldr	r3, [pc, #124]	; (800cda4 <vTaskStartScheduler+0xb8>)
 800cd26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd28:	4b1e      	ldr	r3, [pc, #120]	; (800cda4 <vTaskStartScheduler+0xb8>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd30:	2301      	movs	r3, #1
 800cd32:	617b      	str	r3, [r7, #20]
 800cd34:	e001      	b.n	800cd3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d102      	bne.n	800cd46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd40:	f001 f83c 	bl	800ddbc <xTimerCreateTimerTask>
 800cd44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d115      	bne.n	800cd78 <vTaskStartScheduler+0x8c>
 800cd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd5e:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <vTaskStartScheduler+0xbc>)
 800cd60:	f04f 32ff 	mov.w	r2, #4294967295
 800cd64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd66:	4b11      	ldr	r3, [pc, #68]	; (800cdac <vTaskStartScheduler+0xc0>)
 800cd68:	2201      	movs	r2, #1
 800cd6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd6c:	4b10      	ldr	r3, [pc, #64]	; (800cdb0 <vTaskStartScheduler+0xc4>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd72:	f001 fbf5 	bl	800e560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd76:	e00d      	b.n	800cd94 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7e:	d109      	bne.n	800cd94 <vTaskStartScheduler+0xa8>
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	60fb      	str	r3, [r7, #12]
 800cd92:	e7fe      	b.n	800cd92 <vTaskStartScheduler+0xa6>
}
 800cd94:	bf00      	nop
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	080108f8 	.word	0x080108f8
 800cda0:	0800d429 	.word	0x0800d429
 800cda4:	200020ec 	.word	0x200020ec
 800cda8:	200020e8 	.word	0x200020e8
 800cdac:	200020d4 	.word	0x200020d4
 800cdb0:	200020cc 	.word	0x200020cc

0800cdb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cdb8:	4b04      	ldr	r3, [pc, #16]	; (800cdcc <vTaskSuspendAll+0x18>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	4a03      	ldr	r2, [pc, #12]	; (800cdcc <vTaskSuspendAll+0x18>)
 800cdc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cdc2:	bf00      	nop
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	200020f0 	.word	0x200020f0

0800cdd0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800cdda:	4b14      	ldr	r3, [pc, #80]	; (800ce2c <prvGetExpectedIdleTime+0x5c>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d001      	beq.n	800cde6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800cde2:	2301      	movs	r3, #1
 800cde4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800cde6:	4b12      	ldr	r3, [pc, #72]	; (800ce30 <prvGetExpectedIdleTime+0x60>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d002      	beq.n	800cdf6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	607b      	str	r3, [r7, #4]
 800cdf4:	e012      	b.n	800ce1c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800cdf6:	4b0f      	ldr	r3, [pc, #60]	; (800ce34 <prvGetExpectedIdleTime+0x64>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d902      	bls.n	800ce04 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	607b      	str	r3, [r7, #4]
 800ce02:	e00b      	b.n	800ce1c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d002      	beq.n	800ce10 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	607b      	str	r3, [r7, #4]
 800ce0e:	e005      	b.n	800ce1c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800ce10:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <prvGetExpectedIdleTime+0x68>)
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <prvGetExpectedIdleTime+0x6c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800ce1c:	687b      	ldr	r3, [r7, #4]
	}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	370c      	adds	r7, #12
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	200020d0 	.word	0x200020d0
 800ce30:	20001bf4 	.word	0x20001bf4
 800ce34:	20001bf8 	.word	0x20001bf8
 800ce38:	200020e8 	.word	0x200020e8
 800ce3c:	200020cc 	.word	0x200020cc

0800ce40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce4e:	4b41      	ldr	r3, [pc, #260]	; (800cf54 <xTaskResumeAll+0x114>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d109      	bne.n	800ce6a <xTaskResumeAll+0x2a>
 800ce56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	603b      	str	r3, [r7, #0]
 800ce68:	e7fe      	b.n	800ce68 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce6a:	f001 fc17 	bl	800e69c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce6e:	4b39      	ldr	r3, [pc, #228]	; (800cf54 <xTaskResumeAll+0x114>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3b01      	subs	r3, #1
 800ce74:	4a37      	ldr	r2, [pc, #220]	; (800cf54 <xTaskResumeAll+0x114>)
 800ce76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce78:	4b36      	ldr	r3, [pc, #216]	; (800cf54 <xTaskResumeAll+0x114>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d162      	bne.n	800cf46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce80:	4b35      	ldr	r3, [pc, #212]	; (800cf58 <xTaskResumeAll+0x118>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d05e      	beq.n	800cf46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce88:	e02f      	b.n	800ceea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce8a:	4b34      	ldr	r3, [pc, #208]	; (800cf5c <xTaskResumeAll+0x11c>)
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	3318      	adds	r3, #24
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe fc8a 	bl	800b7b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fe fc85 	bl	800b7b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceaa:	4b2d      	ldr	r3, [pc, #180]	; (800cf60 <xTaskResumeAll+0x120>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d903      	bls.n	800ceba <xTaskResumeAll+0x7a>
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb6:	4a2a      	ldr	r2, [pc, #168]	; (800cf60 <xTaskResumeAll+0x120>)
 800ceb8:	6013      	str	r3, [r2, #0]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebe:	4613      	mov	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4a27      	ldr	r2, [pc, #156]	; (800cf64 <xTaskResumeAll+0x124>)
 800cec8:	441a      	add	r2, r3
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	3304      	adds	r3, #4
 800cece:	4619      	mov	r1, r3
 800ced0:	4610      	mov	r0, r2
 800ced2:	f7fe fc10 	bl	800b6f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceda:	4b23      	ldr	r3, [pc, #140]	; (800cf68 <xTaskResumeAll+0x128>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d302      	bcc.n	800ceea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cee4:	4b21      	ldr	r3, [pc, #132]	; (800cf6c <xTaskResumeAll+0x12c>)
 800cee6:	2201      	movs	r2, #1
 800cee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ceea:	4b1c      	ldr	r3, [pc, #112]	; (800cf5c <xTaskResumeAll+0x11c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1cb      	bne.n	800ce8a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cef8:	f000 fb6e 	bl	800d5d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cefc:	4b1c      	ldr	r3, [pc, #112]	; (800cf70 <xTaskResumeAll+0x130>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d010      	beq.n	800cf2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf08:	f000 f846 	bl	800cf98 <xTaskIncrementTick>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d002      	beq.n	800cf18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cf12:	4b16      	ldr	r3, [pc, #88]	; (800cf6c <xTaskResumeAll+0x12c>)
 800cf14:	2201      	movs	r2, #1
 800cf16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d1f1      	bne.n	800cf08 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800cf24:	4b12      	ldr	r3, [pc, #72]	; (800cf70 <xTaskResumeAll+0x130>)
 800cf26:	2200      	movs	r2, #0
 800cf28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf2a:	4b10      	ldr	r3, [pc, #64]	; (800cf6c <xTaskResumeAll+0x12c>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d009      	beq.n	800cf46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf32:	2301      	movs	r3, #1
 800cf34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf36:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <xTaskResumeAll+0x134>)
 800cf38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf46:	f001 fbd7 	bl	800e6f8 <vPortExitCritical>

	return xAlreadyYielded;
 800cf4a:	68bb      	ldr	r3, [r7, #8]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	200020f0 	.word	0x200020f0
 800cf58:	200020c8 	.word	0x200020c8
 800cf5c:	20002088 	.word	0x20002088
 800cf60:	200020d0 	.word	0x200020d0
 800cf64:	20001bf8 	.word	0x20001bf8
 800cf68:	20001bf4 	.word	0x20001bf4
 800cf6c:	200020dc 	.word	0x200020dc
 800cf70:	200020d8 	.word	0x200020d8
 800cf74:	e000ed04 	.word	0xe000ed04

0800cf78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf7e:	4b05      	ldr	r3, [pc, #20]	; (800cf94 <xTaskGetTickCount+0x1c>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf84:	687b      	ldr	r3, [r7, #4]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	200020cc 	.word	0x200020cc

0800cf98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfa2:	4b4e      	ldr	r3, [pc, #312]	; (800d0dc <xTaskIncrementTick+0x144>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f040 8088 	bne.w	800d0bc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfac:	4b4c      	ldr	r3, [pc, #304]	; (800d0e0 <xTaskIncrementTick+0x148>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfb4:	4a4a      	ldr	r2, [pc, #296]	; (800d0e0 <xTaskIncrementTick+0x148>)
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d11f      	bne.n	800d000 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfc0:	4b48      	ldr	r3, [pc, #288]	; (800d0e4 <xTaskIncrementTick+0x14c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d009      	beq.n	800cfde <xTaskIncrementTick+0x46>
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	603b      	str	r3, [r7, #0]
 800cfdc:	e7fe      	b.n	800cfdc <xTaskIncrementTick+0x44>
 800cfde:	4b41      	ldr	r3, [pc, #260]	; (800d0e4 <xTaskIncrementTick+0x14c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	60fb      	str	r3, [r7, #12]
 800cfe4:	4b40      	ldr	r3, [pc, #256]	; (800d0e8 <xTaskIncrementTick+0x150>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a3e      	ldr	r2, [pc, #248]	; (800d0e4 <xTaskIncrementTick+0x14c>)
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	4a3e      	ldr	r2, [pc, #248]	; (800d0e8 <xTaskIncrementTick+0x150>)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6013      	str	r3, [r2, #0]
 800cff2:	4b3e      	ldr	r3, [pc, #248]	; (800d0ec <xTaskIncrementTick+0x154>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3301      	adds	r3, #1
 800cff8:	4a3c      	ldr	r2, [pc, #240]	; (800d0ec <xTaskIncrementTick+0x154>)
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	f000 faec 	bl	800d5d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d000:	4b3b      	ldr	r3, [pc, #236]	; (800d0f0 <xTaskIncrementTick+0x158>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	429a      	cmp	r2, r3
 800d008:	d349      	bcc.n	800d09e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d00a:	4b36      	ldr	r3, [pc, #216]	; (800d0e4 <xTaskIncrementTick+0x14c>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d104      	bne.n	800d01e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d014:	4b36      	ldr	r3, [pc, #216]	; (800d0f0 <xTaskIncrementTick+0x158>)
 800d016:	f04f 32ff 	mov.w	r2, #4294967295
 800d01a:	601a      	str	r2, [r3, #0]
					break;
 800d01c:	e03f      	b.n	800d09e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d01e:	4b31      	ldr	r3, [pc, #196]	; (800d0e4 <xTaskIncrementTick+0x14c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d02e:	693a      	ldr	r2, [r7, #16]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	429a      	cmp	r2, r3
 800d034:	d203      	bcs.n	800d03e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d036:	4a2e      	ldr	r2, [pc, #184]	; (800d0f0 <xTaskIncrementTick+0x158>)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d03c:	e02f      	b.n	800d09e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	3304      	adds	r3, #4
 800d042:	4618      	mov	r0, r3
 800d044:	f7fe fbb4 	bl	800b7b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d004      	beq.n	800d05a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	3318      	adds	r3, #24
 800d054:	4618      	mov	r0, r3
 800d056:	f7fe fbab 	bl	800b7b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05e:	4b25      	ldr	r3, [pc, #148]	; (800d0f4 <xTaskIncrementTick+0x15c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	429a      	cmp	r2, r3
 800d064:	d903      	bls.n	800d06e <xTaskIncrementTick+0xd6>
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06a:	4a22      	ldr	r2, [pc, #136]	; (800d0f4 <xTaskIncrementTick+0x15c>)
 800d06c:	6013      	str	r3, [r2, #0]
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d072:	4613      	mov	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4a1f      	ldr	r2, [pc, #124]	; (800d0f8 <xTaskIncrementTick+0x160>)
 800d07c:	441a      	add	r2, r3
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	3304      	adds	r3, #4
 800d082:	4619      	mov	r1, r3
 800d084:	4610      	mov	r0, r2
 800d086:	f7fe fb36 	bl	800b6f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08e:	4b1b      	ldr	r3, [pc, #108]	; (800d0fc <xTaskIncrementTick+0x164>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d094:	429a      	cmp	r2, r3
 800d096:	d3b8      	bcc.n	800d00a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d098:	2301      	movs	r3, #1
 800d09a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d09c:	e7b5      	b.n	800d00a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d09e:	4b17      	ldr	r3, [pc, #92]	; (800d0fc <xTaskIncrementTick+0x164>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a4:	4914      	ldr	r1, [pc, #80]	; (800d0f8 <xTaskIncrementTick+0x160>)
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4413      	add	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	440b      	add	r3, r1
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d907      	bls.n	800d0c6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	617b      	str	r3, [r7, #20]
 800d0ba:	e004      	b.n	800d0c6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d0bc:	4b10      	ldr	r3, [pc, #64]	; (800d100 <xTaskIncrementTick+0x168>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	4a0f      	ldr	r2, [pc, #60]	; (800d100 <xTaskIncrementTick+0x168>)
 800d0c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d0c6:	4b0f      	ldr	r3, [pc, #60]	; (800d104 <xTaskIncrementTick+0x16c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d0d2:	697b      	ldr	r3, [r7, #20]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3718      	adds	r7, #24
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	200020f0 	.word	0x200020f0
 800d0e0:	200020cc 	.word	0x200020cc
 800d0e4:	20002080 	.word	0x20002080
 800d0e8:	20002084 	.word	0x20002084
 800d0ec:	200020e0 	.word	0x200020e0
 800d0f0:	200020e8 	.word	0x200020e8
 800d0f4:	200020d0 	.word	0x200020d0
 800d0f8:	20001bf8 	.word	0x20001bf8
 800d0fc:	20001bf4 	.word	0x20001bf4
 800d100:	200020d8 	.word	0x200020d8
 800d104:	200020dc 	.word	0x200020dc

0800d108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d10e:	4b27      	ldr	r3, [pc, #156]	; (800d1ac <vTaskSwitchContext+0xa4>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d116:	4b26      	ldr	r3, [pc, #152]	; (800d1b0 <vTaskSwitchContext+0xa8>)
 800d118:	2201      	movs	r2, #1
 800d11a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d11c:	e040      	b.n	800d1a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d11e:	4b24      	ldr	r3, [pc, #144]	; (800d1b0 <vTaskSwitchContext+0xa8>)
 800d120:	2200      	movs	r2, #0
 800d122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d124:	4b23      	ldr	r3, [pc, #140]	; (800d1b4 <vTaskSwitchContext+0xac>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	60fb      	str	r3, [r7, #12]
 800d12a:	e00f      	b.n	800d14c <vTaskSwitchContext+0x44>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d109      	bne.n	800d146 <vTaskSwitchContext+0x3e>
 800d132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	607b      	str	r3, [r7, #4]
 800d144:	e7fe      	b.n	800d144 <vTaskSwitchContext+0x3c>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	3b01      	subs	r3, #1
 800d14a:	60fb      	str	r3, [r7, #12]
 800d14c:	491a      	ldr	r1, [pc, #104]	; (800d1b8 <vTaskSwitchContext+0xb0>)
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	4613      	mov	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	4413      	add	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	440b      	add	r3, r1
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d0e5      	beq.n	800d12c <vTaskSwitchContext+0x24>
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	4613      	mov	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	4a13      	ldr	r2, [pc, #76]	; (800d1b8 <vTaskSwitchContext+0xb0>)
 800d16c:	4413      	add	r3, r2
 800d16e:	60bb      	str	r3, [r7, #8]
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	605a      	str	r2, [r3, #4]
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	3308      	adds	r3, #8
 800d182:	429a      	cmp	r2, r3
 800d184:	d104      	bne.n	800d190 <vTaskSwitchContext+0x88>
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	605a      	str	r2, [r3, #4]
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	4a09      	ldr	r2, [pc, #36]	; (800d1bc <vTaskSwitchContext+0xb4>)
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	4a06      	ldr	r2, [pc, #24]	; (800d1b4 <vTaskSwitchContext+0xac>)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6013      	str	r3, [r2, #0]
}
 800d1a0:	bf00      	nop
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	200020f0 	.word	0x200020f0
 800d1b0:	200020dc 	.word	0x200020dc
 800d1b4:	200020d0 	.word	0x200020d0
 800d1b8:	20001bf8 	.word	0x20001bf8
 800d1bc:	20001bf4 	.word	0x20001bf4

0800d1c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d109      	bne.n	800d1e4 <vTaskPlaceOnEventList+0x24>
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	60fb      	str	r3, [r7, #12]
 800d1e2:	e7fe      	b.n	800d1e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1e4:	4b07      	ldr	r3, [pc, #28]	; (800d204 <vTaskPlaceOnEventList+0x44>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3318      	adds	r3, #24
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7fe faa6 	bl	800b73e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1f2:	2101      	movs	r1, #1
 800d1f4:	6838      	ldr	r0, [r7, #0]
 800d1f6:	f000 fd8d 	bl	800dd14 <prvAddCurrentTaskToDelayedList>
}
 800d1fa:	bf00      	nop
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	20001bf4 	.word	0x20001bf4

0800d208 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d109      	bne.n	800d22e <vTaskPlaceOnEventListRestricted+0x26>
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	617b      	str	r3, [r7, #20]
 800d22c:	e7fe      	b.n	800d22c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d22e:	4b0a      	ldr	r3, [pc, #40]	; (800d258 <vTaskPlaceOnEventListRestricted+0x50>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	3318      	adds	r3, #24
 800d234:	4619      	mov	r1, r3
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f7fe fa5d 	bl	800b6f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d242:	f04f 33ff 	mov.w	r3, #4294967295
 800d246:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d248:	6879      	ldr	r1, [r7, #4]
 800d24a:	68b8      	ldr	r0, [r7, #8]
 800d24c:	f000 fd62 	bl	800dd14 <prvAddCurrentTaskToDelayedList>
	}
 800d250:	bf00      	nop
 800d252:	3718      	adds	r7, #24
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	20001bf4 	.word	0x20001bf4

0800d25c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b086      	sub	sp, #24
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d109      	bne.n	800d286 <xTaskRemoveFromEventList+0x2a>
 800d272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d276:	f383 8811 	msr	BASEPRI, r3
 800d27a:	f3bf 8f6f 	isb	sy
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	60fb      	str	r3, [r7, #12]
 800d284:	e7fe      	b.n	800d284 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	3318      	adds	r3, #24
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fa90 	bl	800b7b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d290:	4b1e      	ldr	r3, [pc, #120]	; (800d30c <xTaskRemoveFromEventList+0xb0>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d11f      	bne.n	800d2d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	3304      	adds	r3, #4
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fe fa87 	bl	800b7b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a6:	4b1a      	ldr	r3, [pc, #104]	; (800d310 <xTaskRemoveFromEventList+0xb4>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d903      	bls.n	800d2b6 <xTaskRemoveFromEventList+0x5a>
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b2:	4a17      	ldr	r2, [pc, #92]	; (800d310 <xTaskRemoveFromEventList+0xb4>)
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4413      	add	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4a14      	ldr	r2, [pc, #80]	; (800d314 <xTaskRemoveFromEventList+0xb8>)
 800d2c4:	441a      	add	r2, r3
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4610      	mov	r0, r2
 800d2ce:	f7fe fa12 	bl	800b6f6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800d2d2:	f000 f981 	bl	800d5d8 <prvResetNextTaskUnblockTime>
 800d2d6:	e005      	b.n	800d2e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	3318      	adds	r3, #24
 800d2dc:	4619      	mov	r1, r3
 800d2de:	480e      	ldr	r0, [pc, #56]	; (800d318 <xTaskRemoveFromEventList+0xbc>)
 800d2e0:	f7fe fa09 	bl	800b6f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e8:	4b0c      	ldr	r3, [pc, #48]	; (800d31c <xTaskRemoveFromEventList+0xc0>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d905      	bls.n	800d2fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2f6:	4b0a      	ldr	r3, [pc, #40]	; (800d320 <xTaskRemoveFromEventList+0xc4>)
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	e001      	b.n	800d302 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d2fe:	2300      	movs	r3, #0
 800d300:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d302:	697b      	ldr	r3, [r7, #20]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	200020f0 	.word	0x200020f0
 800d310:	200020d0 	.word	0x200020d0
 800d314:	20001bf8 	.word	0x20001bf8
 800d318:	20002088 	.word	0x20002088
 800d31c:	20001bf4 	.word	0x20001bf4
 800d320:	200020dc 	.word	0x200020dc

0800d324 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d32c:	4b06      	ldr	r3, [pc, #24]	; (800d348 <vTaskInternalSetTimeOutState+0x24>)
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d334:	4b05      	ldr	r3, [pc, #20]	; (800d34c <vTaskInternalSetTimeOutState+0x28>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	605a      	str	r2, [r3, #4]
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr
 800d348:	200020e0 	.word	0x200020e0
 800d34c:	200020cc 	.word	0x200020cc

0800d350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d109      	bne.n	800d374 <xTaskCheckForTimeOut+0x24>
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	613b      	str	r3, [r7, #16]
 800d372:	e7fe      	b.n	800d372 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d109      	bne.n	800d38e <xTaskCheckForTimeOut+0x3e>
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	e7fe      	b.n	800d38c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d38e:	f001 f985 	bl	800e69c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d392:	4b1d      	ldr	r3, [pc, #116]	; (800d408 <xTaskCheckForTimeOut+0xb8>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	69ba      	ldr	r2, [r7, #24]
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3aa:	d102      	bne.n	800d3b2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	e023      	b.n	800d3fa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	4b15      	ldr	r3, [pc, #84]	; (800d40c <xTaskCheckForTimeOut+0xbc>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d007      	beq.n	800d3ce <xTaskCheckForTimeOut+0x7e>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	69ba      	ldr	r2, [r7, #24]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d302      	bcc.n	800d3ce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	61fb      	str	r3, [r7, #28]
 800d3cc:	e015      	b.n	800d3fa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	697a      	ldr	r2, [r7, #20]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d20b      	bcs.n	800d3f0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	1ad2      	subs	r2, r2, r3
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff ff9d 	bl	800d324 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	61fb      	str	r3, [r7, #28]
 800d3ee:	e004      	b.n	800d3fa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3fa:	f001 f97d 	bl	800e6f8 <vPortExitCritical>

	return xReturn;
 800d3fe:	69fb      	ldr	r3, [r7, #28]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3720      	adds	r7, #32
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	200020cc 	.word	0x200020cc
 800d40c:	200020e0 	.word	0x200020e0

0800d410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d410:	b480      	push	{r7}
 800d412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d414:	4b03      	ldr	r3, [pc, #12]	; (800d424 <vTaskMissedYield+0x14>)
 800d416:	2201      	movs	r2, #1
 800d418:	601a      	str	r2, [r3, #0]
}
 800d41a:	bf00      	nop
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr
 800d424:	200020dc 	.word	0x200020dc

0800d428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d430:	f000 f878 	bl	800d524 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d434:	4b17      	ldr	r3, [pc, #92]	; (800d494 <prvIdleTask+0x6c>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d907      	bls.n	800d44c <prvIdleTask+0x24>
			{
				taskYIELD();
 800d43c:	4b16      	ldr	r3, [pc, #88]	; (800d498 <prvIdleTask+0x70>)
 800d43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800d44c:	f7ff fcc0 	bl	800cdd0 <prvGetExpectedIdleTime>
 800d450:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d9eb      	bls.n	800d430 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800d458:	f7ff fcac 	bl	800cdb4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800d45c:	4b0f      	ldr	r3, [pc, #60]	; (800d49c <prvIdleTask+0x74>)
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	4b0f      	ldr	r3, [pc, #60]	; (800d4a0 <prvIdleTask+0x78>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	429a      	cmp	r2, r3
 800d466:	d209      	bcs.n	800d47c <prvIdleTask+0x54>
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	60bb      	str	r3, [r7, #8]
 800d47a:	e7fe      	b.n	800d47a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800d47c:	f7ff fca8 	bl	800cdd0 <prvGetExpectedIdleTime>
 800d480:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d902      	bls.n	800d48e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f7f2 fff9 	bl	8000480 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800d48e:	f7ff fcd7 	bl	800ce40 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800d492:	e7cd      	b.n	800d430 <prvIdleTask+0x8>
 800d494:	20001bf8 	.word	0x20001bf8
 800d498:	e000ed04 	.word	0xe000ed04
 800d49c:	200020e8 	.word	0x200020e8
 800d4a0:	200020cc 	.word	0x200020cc

0800d4a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	607b      	str	r3, [r7, #4]
 800d4ae:	e00c      	b.n	800d4ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	4413      	add	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4a12      	ldr	r2, [pc, #72]	; (800d504 <prvInitialiseTaskLists+0x60>)
 800d4bc:	4413      	add	r3, r2
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe f8ec 	bl	800b69c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	607b      	str	r3, [r7, #4]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b37      	cmp	r3, #55	; 0x37
 800d4ce:	d9ef      	bls.n	800d4b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d4d0:	480d      	ldr	r0, [pc, #52]	; (800d508 <prvInitialiseTaskLists+0x64>)
 800d4d2:	f7fe f8e3 	bl	800b69c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d4d6:	480d      	ldr	r0, [pc, #52]	; (800d50c <prvInitialiseTaskLists+0x68>)
 800d4d8:	f7fe f8e0 	bl	800b69c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d4dc:	480c      	ldr	r0, [pc, #48]	; (800d510 <prvInitialiseTaskLists+0x6c>)
 800d4de:	f7fe f8dd 	bl	800b69c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d4e2:	480c      	ldr	r0, [pc, #48]	; (800d514 <prvInitialiseTaskLists+0x70>)
 800d4e4:	f7fe f8da 	bl	800b69c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d4e8:	480b      	ldr	r0, [pc, #44]	; (800d518 <prvInitialiseTaskLists+0x74>)
 800d4ea:	f7fe f8d7 	bl	800b69c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d4ee:	4b0b      	ldr	r3, [pc, #44]	; (800d51c <prvInitialiseTaskLists+0x78>)
 800d4f0:	4a05      	ldr	r2, [pc, #20]	; (800d508 <prvInitialiseTaskLists+0x64>)
 800d4f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d4f4:	4b0a      	ldr	r3, [pc, #40]	; (800d520 <prvInitialiseTaskLists+0x7c>)
 800d4f6:	4a05      	ldr	r2, [pc, #20]	; (800d50c <prvInitialiseTaskLists+0x68>)
 800d4f8:	601a      	str	r2, [r3, #0]
}
 800d4fa:	bf00      	nop
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	20001bf8 	.word	0x20001bf8
 800d508:	20002058 	.word	0x20002058
 800d50c:	2000206c 	.word	0x2000206c
 800d510:	20002088 	.word	0x20002088
 800d514:	2000209c 	.word	0x2000209c
 800d518:	200020b4 	.word	0x200020b4
 800d51c:	20002080 	.word	0x20002080
 800d520:	20002084 	.word	0x20002084

0800d524 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d52a:	e019      	b.n	800d560 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d52c:	f001 f8b6 	bl	800e69c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d530:	4b0f      	ldr	r3, [pc, #60]	; (800d570 <prvCheckTasksWaitingTermination+0x4c>)
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	3304      	adds	r3, #4
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7fe f937 	bl	800b7b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d542:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <prvCheckTasksWaitingTermination+0x50>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3b01      	subs	r3, #1
 800d548:	4a0a      	ldr	r2, [pc, #40]	; (800d574 <prvCheckTasksWaitingTermination+0x50>)
 800d54a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d54c:	4b0a      	ldr	r3, [pc, #40]	; (800d578 <prvCheckTasksWaitingTermination+0x54>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	3b01      	subs	r3, #1
 800d552:	4a09      	ldr	r2, [pc, #36]	; (800d578 <prvCheckTasksWaitingTermination+0x54>)
 800d554:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d556:	f001 f8cf 	bl	800e6f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 f80e 	bl	800d57c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d560:	4b05      	ldr	r3, [pc, #20]	; (800d578 <prvCheckTasksWaitingTermination+0x54>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1e1      	bne.n	800d52c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	2000209c 	.word	0x2000209c
 800d574:	200020c8 	.word	0x200020c8
 800d578:	200020b0 	.word	0x200020b0

0800d57c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d108      	bne.n	800d5a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d592:	4618      	mov	r0, r3
 800d594:	f001 fa5e 	bl	800ea54 <vPortFree>
				vPortFree( pxTCB );
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f001 fa5b 	bl	800ea54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d59e:	e017      	b.n	800d5d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d103      	bne.n	800d5b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f001 fa52 	bl	800ea54 <vPortFree>
	}
 800d5b0:	e00e      	b.n	800d5d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	d009      	beq.n	800d5d0 <prvDeleteTCB+0x54>
 800d5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	e7fe      	b.n	800d5ce <prvDeleteTCB+0x52>
	}
 800d5d0:	bf00      	nop
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5de:	4b0c      	ldr	r3, [pc, #48]	; (800d610 <prvResetNextTaskUnblockTime+0x38>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d104      	bne.n	800d5f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5e8:	4b0a      	ldr	r3, [pc, #40]	; (800d614 <prvResetNextTaskUnblockTime+0x3c>)
 800d5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5f0:	e008      	b.n	800d604 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5f2:	4b07      	ldr	r3, [pc, #28]	; (800d610 <prvResetNextTaskUnblockTime+0x38>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	4a04      	ldr	r2, [pc, #16]	; (800d614 <prvResetNextTaskUnblockTime+0x3c>)
 800d602:	6013      	str	r3, [r2, #0]
}
 800d604:	bf00      	nop
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr
 800d610:	20002080 	.word	0x20002080
 800d614:	200020e8 	.word	0x200020e8

0800d618 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d61e:	4b05      	ldr	r3, [pc, #20]	; (800d634 <xTaskGetCurrentTaskHandle+0x1c>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d624:	687b      	ldr	r3, [r7, #4]
	}
 800d626:	4618      	mov	r0, r3
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop
 800d634:	20001bf4 	.word	0x20001bf4

0800d638 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d63e:	4b0b      	ldr	r3, [pc, #44]	; (800d66c <xTaskGetSchedulerState+0x34>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d102      	bne.n	800d64c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d646:	2301      	movs	r3, #1
 800d648:	607b      	str	r3, [r7, #4]
 800d64a:	e008      	b.n	800d65e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d64c:	4b08      	ldr	r3, [pc, #32]	; (800d670 <xTaskGetSchedulerState+0x38>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d102      	bne.n	800d65a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d654:	2302      	movs	r3, #2
 800d656:	607b      	str	r3, [r7, #4]
 800d658:	e001      	b.n	800d65e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d65a:	2300      	movs	r3, #0
 800d65c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d65e:	687b      	ldr	r3, [r7, #4]
	}
 800d660:	4618      	mov	r0, r3
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr
 800d66c:	200020d4 	.word	0x200020d4
 800d670:	200020f0 	.word	0x200020f0

0800d674 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d680:	2300      	movs	r3, #0
 800d682:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d051      	beq.n	800d72e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68e:	4b2a      	ldr	r3, [pc, #168]	; (800d738 <xTaskPriorityInherit+0xc4>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d694:	429a      	cmp	r2, r3
 800d696:	d241      	bcs.n	800d71c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	699b      	ldr	r3, [r3, #24]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	db06      	blt.n	800d6ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6a0:	4b25      	ldr	r3, [pc, #148]	; (800d738 <xTaskPriorityInherit+0xc4>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	6959      	ldr	r1, [r3, #20]
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4a1f      	ldr	r2, [pc, #124]	; (800d73c <xTaskPriorityInherit+0xc8>)
 800d6c0:	4413      	add	r3, r2
 800d6c2:	4299      	cmp	r1, r3
 800d6c4:	d122      	bne.n	800d70c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fe f870 	bl	800b7b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6d0:	4b19      	ldr	r3, [pc, #100]	; (800d738 <xTaskPriorityInherit+0xc4>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6de:	4b18      	ldr	r3, [pc, #96]	; (800d740 <xTaskPriorityInherit+0xcc>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d903      	bls.n	800d6ee <xTaskPriorityInherit+0x7a>
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ea:	4a15      	ldr	r2, [pc, #84]	; (800d740 <xTaskPriorityInherit+0xcc>)
 800d6ec:	6013      	str	r3, [r2, #0]
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	4413      	add	r3, r2
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	4a10      	ldr	r2, [pc, #64]	; (800d73c <xTaskPriorityInherit+0xc8>)
 800d6fc:	441a      	add	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	3304      	adds	r3, #4
 800d702:	4619      	mov	r1, r3
 800d704:	4610      	mov	r0, r2
 800d706:	f7fd fff6 	bl	800b6f6 <vListInsertEnd>
 800d70a:	e004      	b.n	800d716 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d70c:	4b0a      	ldr	r3, [pc, #40]	; (800d738 <xTaskPriorityInherit+0xc4>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d716:	2301      	movs	r3, #1
 800d718:	60fb      	str	r3, [r7, #12]
 800d71a:	e008      	b.n	800d72e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d720:	4b05      	ldr	r3, [pc, #20]	; (800d738 <xTaskPriorityInherit+0xc4>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d726:	429a      	cmp	r2, r3
 800d728:	d201      	bcs.n	800d72e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d72a:	2301      	movs	r3, #1
 800d72c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d72e:	68fb      	ldr	r3, [r7, #12]
	}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	20001bf4 	.word	0x20001bf4
 800d73c:	20001bf8 	.word	0x20001bf8
 800d740:	200020d0 	.word	0x200020d0

0800d744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d750:	2300      	movs	r3, #0
 800d752:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d054      	beq.n	800d804 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d75a:	4b2d      	ldr	r3, [pc, #180]	; (800d810 <xTaskPriorityDisinherit+0xcc>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	693a      	ldr	r2, [r7, #16]
 800d760:	429a      	cmp	r2, r3
 800d762:	d009      	beq.n	800d778 <xTaskPriorityDisinherit+0x34>
 800d764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	e7fe      	b.n	800d776 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d109      	bne.n	800d794 <xTaskPriorityDisinherit+0x50>
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	60bb      	str	r3, [r7, #8]
 800d792:	e7fe      	b.n	800d792 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d798:	1e5a      	subs	r2, r3, #1
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d02c      	beq.n	800d804 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d128      	bne.n	800d804 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fd fffa 	bl	800b7b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d4:	4b0f      	ldr	r3, [pc, #60]	; (800d814 <xTaskPriorityDisinherit+0xd0>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d903      	bls.n	800d7e4 <xTaskPriorityDisinherit+0xa0>
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e0:	4a0c      	ldr	r2, [pc, #48]	; (800d814 <xTaskPriorityDisinherit+0xd0>)
 800d7e2:	6013      	str	r3, [r2, #0]
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4a09      	ldr	r2, [pc, #36]	; (800d818 <xTaskPriorityDisinherit+0xd4>)
 800d7f2:	441a      	add	r2, r3
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	f7fd ff7b 	bl	800b6f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d800:	2301      	movs	r3, #1
 800d802:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d804:	697b      	ldr	r3, [r7, #20]
	}
 800d806:	4618      	mov	r0, r3
 800d808:	3718      	adds	r7, #24
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	20001bf4 	.word	0x20001bf4
 800d814:	200020d0 	.word	0x200020d0
 800d818:	20001bf8 	.word	0x20001bf8

0800d81c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b088      	sub	sp, #32
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d82a:	2301      	movs	r3, #1
 800d82c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d068      	beq.n	800d906 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d109      	bne.n	800d850 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800d83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d840:	f383 8811 	msr	BASEPRI, r3
 800d844:	f3bf 8f6f 	isb	sy
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	60fb      	str	r3, [r7, #12]
 800d84e:	e7fe      	b.n	800d84e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	429a      	cmp	r2, r3
 800d858:	d902      	bls.n	800d860 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	61fb      	str	r3, [r7, #28]
 800d85e:	e002      	b.n	800d866 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d864:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	69fa      	ldr	r2, [r7, #28]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d04a      	beq.n	800d906 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	429a      	cmp	r2, r3
 800d878:	d145      	bne.n	800d906 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d87a:	4b25      	ldr	r3, [pc, #148]	; (800d910 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	69ba      	ldr	r2, [r7, #24]
 800d880:	429a      	cmp	r2, r3
 800d882:	d109      	bne.n	800d898 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	60bb      	str	r3, [r7, #8]
 800d896:	e7fe      	b.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	69fa      	ldr	r2, [r7, #28]
 800d8a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	699b      	ldr	r3, [r3, #24]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	db04      	blt.n	800d8b6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	6959      	ldr	r1, [r3, #20]
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	4613      	mov	r3, r2
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	4413      	add	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4a13      	ldr	r2, [pc, #76]	; (800d914 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d8c6:	4413      	add	r3, r2
 800d8c8:	4299      	cmp	r1, r3
 800d8ca:	d11c      	bne.n	800d906 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fd ff6d 	bl	800b7b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8da:	4b0f      	ldr	r3, [pc, #60]	; (800d918 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d903      	bls.n	800d8ea <vTaskPriorityDisinheritAfterTimeout+0xce>
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e6:	4a0c      	ldr	r2, [pc, #48]	; (800d918 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d8e8:	6013      	str	r3, [r2, #0]
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4a07      	ldr	r2, [pc, #28]	; (800d914 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d8f8:	441a      	add	r2, r3
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	4619      	mov	r1, r3
 800d900:	4610      	mov	r0, r2
 800d902:	f7fd fef8 	bl	800b6f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d906:	bf00      	nop
 800d908:	3720      	adds	r7, #32
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	20001bf4 	.word	0x20001bf4
 800d914:	20001bf8 	.word	0x20001bf8
 800d918:	200020d0 	.word	0x200020d0

0800d91c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d91c:	b480      	push	{r7}
 800d91e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d920:	4b07      	ldr	r3, [pc, #28]	; (800d940 <pvTaskIncrementMutexHeldCount+0x24>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d004      	beq.n	800d932 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d928:	4b05      	ldr	r3, [pc, #20]	; (800d940 <pvTaskIncrementMutexHeldCount+0x24>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d92e:	3201      	adds	r2, #1
 800d930:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d932:	4b03      	ldr	r3, [pc, #12]	; (800d940 <pvTaskIncrementMutexHeldCount+0x24>)
 800d934:	681b      	ldr	r3, [r3, #0]
	}
 800d936:	4618      	mov	r0, r3
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	20001bf4 	.word	0x20001bf4

0800d944 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d952:	f000 fea3 	bl	800e69c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d956:	4b26      	ldr	r3, [pc, #152]	; (800d9f0 <xTaskNotifyWait+0xac>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b02      	cmp	r3, #2
 800d962:	d01a      	beq.n	800d99a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d964:	4b22      	ldr	r3, [pc, #136]	; (800d9f0 <xTaskNotifyWait+0xac>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	43d2      	mvns	r2, r2
 800d96e:	400a      	ands	r2, r1
 800d970:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d972:	4b1f      	ldr	r3, [pc, #124]	; (800d9f0 <xTaskNotifyWait+0xac>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2201      	movs	r2, #1
 800d978:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00b      	beq.n	800d99a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d982:	2101      	movs	r1, #1
 800d984:	6838      	ldr	r0, [r7, #0]
 800d986:	f000 f9c5 	bl	800dd14 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d98a:	4b1a      	ldr	r3, [pc, #104]	; (800d9f4 <xTaskNotifyWait+0xb0>)
 800d98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d99a:	f000 fead 	bl	800e6f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d99e:	f000 fe7d 	bl	800e69c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d004      	beq.n	800d9b2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d9a8:	4b11      	ldr	r3, [pc, #68]	; (800d9f0 <xTaskNotifyWait+0xac>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d9b2:	4b0f      	ldr	r3, [pc, #60]	; (800d9f0 <xTaskNotifyWait+0xac>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d002      	beq.n	800d9c6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	617b      	str	r3, [r7, #20]
 800d9c4:	e008      	b.n	800d9d8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d9c6:	4b0a      	ldr	r3, [pc, #40]	; (800d9f0 <xTaskNotifyWait+0xac>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	43d2      	mvns	r2, r2
 800d9d0:	400a      	ands	r2, r1
 800d9d2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9d8:	4b05      	ldr	r3, [pc, #20]	; (800d9f0 <xTaskNotifyWait+0xac>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800d9e2:	f000 fe89 	bl	800e6f8 <vPortExitCritical>

		return xReturn;
 800d9e6:	697b      	ldr	r3, [r7, #20]
	}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	20001bf4 	.word	0x20001bf4
 800d9f4:	e000ed04 	.word	0xe000ed04

0800d9f8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08a      	sub	sp, #40	; 0x28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	603b      	str	r3, [r7, #0]
 800da04:	4613      	mov	r3, r2
 800da06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800da08:	2301      	movs	r3, #1
 800da0a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d109      	bne.n	800da26 <xTaskGenericNotify+0x2e>
 800da12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da16:	f383 8811 	msr	BASEPRI, r3
 800da1a:	f3bf 8f6f 	isb	sy
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	61bb      	str	r3, [r7, #24]
 800da24:	e7fe      	b.n	800da24 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800da2a:	f000 fe37 	bl	800e69c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d003      	beq.n	800da3c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800da42:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	2202      	movs	r2, #2
 800da48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800da4c:	79fb      	ldrb	r3, [r7, #7]
 800da4e:	2b04      	cmp	r3, #4
 800da50:	d827      	bhi.n	800daa2 <xTaskGenericNotify+0xaa>
 800da52:	a201      	add	r2, pc, #4	; (adr r2, 800da58 <xTaskGenericNotify+0x60>)
 800da54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da58:	0800dac1 	.word	0x0800dac1
 800da5c:	0800da6d 	.word	0x0800da6d
 800da60:	0800da7b 	.word	0x0800da7b
 800da64:	0800da87 	.word	0x0800da87
 800da68:	0800da8f 	.word	0x0800da8f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	431a      	orrs	r2, r3
 800da74:	6a3b      	ldr	r3, [r7, #32]
 800da76:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800da78:	e025      	b.n	800dac6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800da7a:	6a3b      	ldr	r3, [r7, #32]
 800da7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800da84:	e01f      	b.n	800dac6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800da86:	6a3b      	ldr	r3, [r7, #32]
 800da88:	68ba      	ldr	r2, [r7, #8]
 800da8a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800da8c:	e01b      	b.n	800dac6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800da8e:	7ffb      	ldrb	r3, [r7, #31]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d003      	beq.n	800da9c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800da94:	6a3b      	ldr	r3, [r7, #32]
 800da96:	68ba      	ldr	r2, [r7, #8]
 800da98:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800da9a:	e014      	b.n	800dac6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800da9c:	2300      	movs	r3, #0
 800da9e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800daa0:	e011      	b.n	800dac6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800daa2:	6a3b      	ldr	r3, [r7, #32]
 800daa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daaa:	d00b      	beq.n	800dac4 <xTaskGenericNotify+0xcc>
 800daac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	617b      	str	r3, [r7, #20]
 800dabe:	e7fe      	b.n	800dabe <xTaskGenericNotify+0xc6>
					break;
 800dac0:	bf00      	nop
 800dac2:	e000      	b.n	800dac6 <xTaskGenericNotify+0xce>

					break;
 800dac4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dac6:	7ffb      	ldrb	r3, [r7, #31]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d13b      	bne.n	800db44 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dacc:	6a3b      	ldr	r3, [r7, #32]
 800dace:	3304      	adds	r3, #4
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fd fe6d 	bl	800b7b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dada:	4b1e      	ldr	r3, [pc, #120]	; (800db54 <xTaskGenericNotify+0x15c>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d903      	bls.n	800daea <xTaskGenericNotify+0xf2>
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae6:	4a1b      	ldr	r2, [pc, #108]	; (800db54 <xTaskGenericNotify+0x15c>)
 800dae8:	6013      	str	r3, [r2, #0]
 800daea:	6a3b      	ldr	r3, [r7, #32]
 800daec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daee:	4613      	mov	r3, r2
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	4413      	add	r3, r2
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4a18      	ldr	r2, [pc, #96]	; (800db58 <xTaskGenericNotify+0x160>)
 800daf8:	441a      	add	r2, r3
 800dafa:	6a3b      	ldr	r3, [r7, #32]
 800dafc:	3304      	adds	r3, #4
 800dafe:	4619      	mov	r1, r3
 800db00:	4610      	mov	r0, r2
 800db02:	f7fd fdf8 	bl	800b6f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800db06:	6a3b      	ldr	r3, [r7, #32]
 800db08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d009      	beq.n	800db22 <xTaskGenericNotify+0x12a>
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	613b      	str	r3, [r7, #16]
 800db20:	e7fe      	b.n	800db20 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800db22:	f7ff fd59 	bl	800d5d8 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db26:	6a3b      	ldr	r3, [r7, #32]
 800db28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2a:	4b0c      	ldr	r3, [pc, #48]	; (800db5c <xTaskGenericNotify+0x164>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db30:	429a      	cmp	r2, r3
 800db32:	d907      	bls.n	800db44 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800db34:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <xTaskGenericNotify+0x168>)
 800db36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db3a:	601a      	str	r2, [r3, #0]
 800db3c:	f3bf 8f4f 	dsb	sy
 800db40:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800db44:	f000 fdd8 	bl	800e6f8 <vPortExitCritical>

		return xReturn;
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3728      	adds	r7, #40	; 0x28
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	200020d0 	.word	0x200020d0
 800db58:	20001bf8 	.word	0x20001bf8
 800db5c:	20001bf4 	.word	0x20001bf4
 800db60:	e000ed04 	.word	0xe000ed04

0800db64 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08e      	sub	sp, #56	; 0x38
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	603b      	str	r3, [r7, #0]
 800db70:	4613      	mov	r3, r2
 800db72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800db74:	2301      	movs	r3, #1
 800db76:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d109      	bne.n	800db92 <xTaskGenericNotifyFromISR+0x2e>
 800db7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	627b      	str	r3, [r7, #36]	; 0x24
 800db90:	e7fe      	b.n	800db90 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db92:	f000 fe5f 	bl	800e854 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800db9a:	f3ef 8211 	mrs	r2, BASEPRI
 800db9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	623a      	str	r2, [r7, #32]
 800dbb0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800dbb2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d003      	beq.n	800dbc4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800dbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dbca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	2202      	movs	r2, #2
 800dbd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800dbd6:	79fb      	ldrb	r3, [r7, #7]
 800dbd8:	2b04      	cmp	r3, #4
 800dbda:	d829      	bhi.n	800dc30 <xTaskGenericNotifyFromISR+0xcc>
 800dbdc:	a201      	add	r2, pc, #4	; (adr r2, 800dbe4 <xTaskGenericNotifyFromISR+0x80>)
 800dbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe2:	bf00      	nop
 800dbe4:	0800dc4f 	.word	0x0800dc4f
 800dbe8:	0800dbf9 	.word	0x0800dbf9
 800dbec:	0800dc07 	.word	0x0800dc07
 800dbf0:	0800dc13 	.word	0x0800dc13
 800dbf4:	0800dc1b 	.word	0x0800dc1b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	431a      	orrs	r2, r3
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800dc04:	e026      	b.n	800dc54 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc0a:	1c5a      	adds	r2, r3, #1
 800dc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800dc10:	e020      	b.n	800dc54 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800dc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800dc18:	e01c      	b.n	800dc54 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dc1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc1e:	2b02      	cmp	r3, #2
 800dc20:	d003      	beq.n	800dc2a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dc28:	e014      	b.n	800dc54 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800dc2e:	e011      	b.n	800dc54 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc38:	d00b      	beq.n	800dc52 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	61bb      	str	r3, [r7, #24]
 800dc4c:	e7fe      	b.n	800dc4c <xTaskGenericNotifyFromISR+0xe8>
					break;
 800dc4e:	bf00      	nop
 800dc50:	e000      	b.n	800dc54 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800dc52:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dc54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d145      	bne.n	800dce8 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d009      	beq.n	800dc78 <xTaskGenericNotifyFromISR+0x114>
 800dc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc68:	f383 8811 	msr	BASEPRI, r3
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	e7fe      	b.n	800dc76 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc78:	4b20      	ldr	r3, [pc, #128]	; (800dcfc <xTaskGenericNotifyFromISR+0x198>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d11d      	bne.n	800dcbc <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc82:	3304      	adds	r3, #4
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fd fd93 	bl	800b7b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc8e:	4b1c      	ldr	r3, [pc, #112]	; (800dd00 <xTaskGenericNotifyFromISR+0x19c>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d903      	bls.n	800dc9e <xTaskGenericNotifyFromISR+0x13a>
 800dc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9a:	4a19      	ldr	r2, [pc, #100]	; (800dd00 <xTaskGenericNotifyFromISR+0x19c>)
 800dc9c:	6013      	str	r3, [r2, #0]
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca2:	4613      	mov	r3, r2
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	4413      	add	r3, r2
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4a16      	ldr	r2, [pc, #88]	; (800dd04 <xTaskGenericNotifyFromISR+0x1a0>)
 800dcac:	441a      	add	r2, r3
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	f7fd fd1e 	bl	800b6f6 <vListInsertEnd>
 800dcba:	e005      	b.n	800dcc8 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbe:	3318      	adds	r3, #24
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	4811      	ldr	r0, [pc, #68]	; (800dd08 <xTaskGenericNotifyFromISR+0x1a4>)
 800dcc4:	f7fd fd17 	bl	800b6f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dccc:	4b0f      	ldr	r3, [pc, #60]	; (800dd0c <xTaskGenericNotifyFromISR+0x1a8>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d908      	bls.n	800dce8 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800dcd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800dcdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcde:	2201      	movs	r2, #1
 800dce0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800dce2:	4b0b      	ldr	r3, [pc, #44]	; (800dd10 <xTaskGenericNotifyFromISR+0x1ac>)
 800dce4:	2201      	movs	r2, #1
 800dce6:	601a      	str	r2, [r3, #0]
 800dce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcea:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800dcf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3738      	adds	r7, #56	; 0x38
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	200020f0 	.word	0x200020f0
 800dd00:	200020d0 	.word	0x200020d0
 800dd04:	20001bf8 	.word	0x20001bf8
 800dd08:	20002088 	.word	0x20002088
 800dd0c:	20001bf4 	.word	0x20001bf4
 800dd10:	200020dc 	.word	0x200020dc

0800dd14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd1e:	4b21      	ldr	r3, [pc, #132]	; (800dda4 <prvAddCurrentTaskToDelayedList+0x90>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd24:	4b20      	ldr	r3, [pc, #128]	; (800dda8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	3304      	adds	r3, #4
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fd fd40 	bl	800b7b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd36:	d10a      	bne.n	800dd4e <prvAddCurrentTaskToDelayedList+0x3a>
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d007      	beq.n	800dd4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd3e:	4b1a      	ldr	r3, [pc, #104]	; (800dda8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	3304      	adds	r3, #4
 800dd44:	4619      	mov	r1, r3
 800dd46:	4819      	ldr	r0, [pc, #100]	; (800ddac <prvAddCurrentTaskToDelayedList+0x98>)
 800dd48:	f7fd fcd5 	bl	800b6f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd4c:	e026      	b.n	800dd9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4413      	add	r3, r2
 800dd54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd56:	4b14      	ldr	r3, [pc, #80]	; (800dda8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d209      	bcs.n	800dd7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd66:	4b12      	ldr	r3, [pc, #72]	; (800ddb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	4b0f      	ldr	r3, [pc, #60]	; (800dda8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3304      	adds	r3, #4
 800dd70:	4619      	mov	r1, r3
 800dd72:	4610      	mov	r0, r2
 800dd74:	f7fd fce3 	bl	800b73e <vListInsert>
}
 800dd78:	e010      	b.n	800dd9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd7a:	4b0e      	ldr	r3, [pc, #56]	; (800ddb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	4b0a      	ldr	r3, [pc, #40]	; (800dda8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4619      	mov	r1, r3
 800dd86:	4610      	mov	r0, r2
 800dd88:	f7fd fcd9 	bl	800b73e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dd8c:	4b0a      	ldr	r3, [pc, #40]	; (800ddb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d202      	bcs.n	800dd9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dd96:	4a08      	ldr	r2, [pc, #32]	; (800ddb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	6013      	str	r3, [r2, #0]
}
 800dd9c:	bf00      	nop
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	200020cc 	.word	0x200020cc
 800dda8:	20001bf4 	.word	0x20001bf4
 800ddac:	200020b4 	.word	0x200020b4
 800ddb0:	20002084 	.word	0x20002084
 800ddb4:	20002080 	.word	0x20002080
 800ddb8:	200020e8 	.word	0x200020e8

0800ddbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08a      	sub	sp, #40	; 0x28
 800ddc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ddc6:	f000 faff 	bl	800e3c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ddca:	4b1c      	ldr	r3, [pc, #112]	; (800de3c <xTimerCreateTimerTask+0x80>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d021      	beq.n	800de16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ddda:	1d3a      	adds	r2, r7, #4
 800dddc:	f107 0108 	add.w	r1, r7, #8
 800dde0:	f107 030c 	add.w	r3, r7, #12
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fd fc3f 	bl	800b668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ddea:	6879      	ldr	r1, [r7, #4]
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	9202      	str	r2, [sp, #8]
 800ddf2:	9301      	str	r3, [sp, #4]
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	460a      	mov	r2, r1
 800ddfc:	4910      	ldr	r1, [pc, #64]	; (800de40 <xTimerCreateTimerTask+0x84>)
 800ddfe:	4811      	ldr	r0, [pc, #68]	; (800de44 <xTimerCreateTimerTask+0x88>)
 800de00:	f7fe fda2 	bl	800c948 <xTaskCreateStatic>
 800de04:	4602      	mov	r2, r0
 800de06:	4b10      	ldr	r3, [pc, #64]	; (800de48 <xTimerCreateTimerTask+0x8c>)
 800de08:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de0a:	4b0f      	ldr	r3, [pc, #60]	; (800de48 <xTimerCreateTimerTask+0x8c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d001      	beq.n	800de16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800de12:	2301      	movs	r3, #1
 800de14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d109      	bne.n	800de30 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	613b      	str	r3, [r7, #16]
 800de2e:	e7fe      	b.n	800de2e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800de30:	697b      	ldr	r3, [r7, #20]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	20002124 	.word	0x20002124
 800de40:	08010900 	.word	0x08010900
 800de44:	0800df7d 	.word	0x0800df7d
 800de48:	20002128 	.word	0x20002128

0800de4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08a      	sub	sp, #40	; 0x28
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
 800de58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800de5a:	2300      	movs	r3, #0
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d109      	bne.n	800de78 <xTimerGenericCommand+0x2c>
 800de64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	623b      	str	r3, [r7, #32]
 800de76:	e7fe      	b.n	800de76 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800de78:	4b19      	ldr	r3, [pc, #100]	; (800dee0 <xTimerGenericCommand+0x94>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d02a      	beq.n	800ded6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	2b05      	cmp	r3, #5
 800de90:	dc18      	bgt.n	800dec4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de92:	f7ff fbd1 	bl	800d638 <xTaskGetSchedulerState>
 800de96:	4603      	mov	r3, r0
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d109      	bne.n	800deb0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de9c:	4b10      	ldr	r3, [pc, #64]	; (800dee0 <xTimerGenericCommand+0x94>)
 800de9e:	6818      	ldr	r0, [r3, #0]
 800dea0:	f107 0110 	add.w	r1, r7, #16
 800dea4:	2300      	movs	r3, #0
 800dea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dea8:	f7fd ff04 	bl	800bcb4 <xQueueGenericSend>
 800deac:	6278      	str	r0, [r7, #36]	; 0x24
 800deae:	e012      	b.n	800ded6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800deb0:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <xTimerGenericCommand+0x94>)
 800deb2:	6818      	ldr	r0, [r3, #0]
 800deb4:	f107 0110 	add.w	r1, r7, #16
 800deb8:	2300      	movs	r3, #0
 800deba:	2200      	movs	r2, #0
 800debc:	f7fd fefa 	bl	800bcb4 <xQueueGenericSend>
 800dec0:	6278      	str	r0, [r7, #36]	; 0x24
 800dec2:	e008      	b.n	800ded6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dec4:	4b06      	ldr	r3, [pc, #24]	; (800dee0 <xTimerGenericCommand+0x94>)
 800dec6:	6818      	ldr	r0, [r3, #0]
 800dec8:	f107 0110 	add.w	r1, r7, #16
 800decc:	2300      	movs	r3, #0
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	f7fd ffea 	bl	800bea8 <xQueueGenericSendFromISR>
 800ded4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ded6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3728      	adds	r7, #40	; 0x28
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	20002124 	.word	0x20002124

0800dee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b088      	sub	sp, #32
 800dee8:	af02      	add	r7, sp, #8
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deee:	4b22      	ldr	r3, [pc, #136]	; (800df78 <prvProcessExpiredTimer+0x94>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	3304      	adds	r3, #4
 800defc:	4618      	mov	r0, r3
 800defe:	f7fd fc57 	bl	800b7b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df08:	f003 0304 	and.w	r3, r3, #4
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d021      	beq.n	800df54 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	699a      	ldr	r2, [r3, #24]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	18d1      	adds	r1, r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	683a      	ldr	r2, [r7, #0]
 800df1c:	6978      	ldr	r0, [r7, #20]
 800df1e:	f000 f8d1 	bl	800e0c4 <prvInsertTimerInActiveList>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d01e      	beq.n	800df66 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df28:	2300      	movs	r3, #0
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	2300      	movs	r3, #0
 800df2e:	687a      	ldr	r2, [r7, #4]
 800df30:	2100      	movs	r1, #0
 800df32:	6978      	ldr	r0, [r7, #20]
 800df34:	f7ff ff8a 	bl	800de4c <xTimerGenericCommand>
 800df38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d112      	bne.n	800df66 <prvProcessExpiredTimer+0x82>
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	60fb      	str	r3, [r7, #12]
 800df52:	e7fe      	b.n	800df52 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df5a:	f023 0301 	bic.w	r3, r3, #1
 800df5e:	b2da      	uxtb	r2, r3
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	6a1b      	ldr	r3, [r3, #32]
 800df6a:	6978      	ldr	r0, [r7, #20]
 800df6c:	4798      	blx	r3
}
 800df6e:	bf00      	nop
 800df70:	3718      	adds	r7, #24
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	2000211c 	.word	0x2000211c

0800df7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df84:	f107 0308 	add.w	r3, r7, #8
 800df88:	4618      	mov	r0, r3
 800df8a:	f000 f857 	bl	800e03c <prvGetNextExpireTime>
 800df8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	4619      	mov	r1, r3
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f000 f803 	bl	800dfa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800df9a:	f000 f8d5 	bl	800e148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df9e:	e7f1      	b.n	800df84 <prvTimerTask+0x8>

0800dfa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dfaa:	f7fe ff03 	bl	800cdb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dfae:	f107 0308 	add.w	r3, r7, #8
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f000 f866 	bl	800e084 <prvSampleTimeNow>
 800dfb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d130      	bne.n	800e022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10a      	bne.n	800dfdc <prvProcessTimerOrBlockTask+0x3c>
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d806      	bhi.n	800dfdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dfce:	f7fe ff37 	bl	800ce40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dfd2:	68f9      	ldr	r1, [r7, #12]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff ff85 	bl	800dee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dfda:	e024      	b.n	800e026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d008      	beq.n	800dff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dfe2:	4b13      	ldr	r3, [pc, #76]	; (800e030 <prvProcessTimerOrBlockTask+0x90>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d101      	bne.n	800dff0 <prvProcessTimerOrBlockTask+0x50>
 800dfec:	2301      	movs	r3, #1
 800dfee:	e000      	b.n	800dff2 <prvProcessTimerOrBlockTask+0x52>
 800dff0:	2300      	movs	r3, #0
 800dff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dff4:	4b0f      	ldr	r3, [pc, #60]	; (800e034 <prvProcessTimerOrBlockTask+0x94>)
 800dff6:	6818      	ldr	r0, [r3, #0]
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	683a      	ldr	r2, [r7, #0]
 800e000:	4619      	mov	r1, r3
 800e002:	f7fe fc6d 	bl	800c8e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e006:	f7fe ff1b 	bl	800ce40 <xTaskResumeAll>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d10a      	bne.n	800e026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e010:	4b09      	ldr	r3, [pc, #36]	; (800e038 <prvProcessTimerOrBlockTask+0x98>)
 800e012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e016:	601a      	str	r2, [r3, #0]
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	f3bf 8f6f 	isb	sy
}
 800e020:	e001      	b.n	800e026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e022:	f7fe ff0d 	bl	800ce40 <xTaskResumeAll>
}
 800e026:	bf00      	nop
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20002120 	.word	0x20002120
 800e034:	20002124 	.word	0x20002124
 800e038:	e000ed04 	.word	0xe000ed04

0800e03c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e03c:	b480      	push	{r7}
 800e03e:	b085      	sub	sp, #20
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e044:	4b0e      	ldr	r3, [pc, #56]	; (800e080 <prvGetNextExpireTime+0x44>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d101      	bne.n	800e052 <prvGetNextExpireTime+0x16>
 800e04e:	2201      	movs	r2, #1
 800e050:	e000      	b.n	800e054 <prvGetNextExpireTime+0x18>
 800e052:	2200      	movs	r2, #0
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d105      	bne.n	800e06c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e060:	4b07      	ldr	r3, [pc, #28]	; (800e080 <prvGetNextExpireTime+0x44>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	60fb      	str	r3, [r7, #12]
 800e06a:	e001      	b.n	800e070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e06c:	2300      	movs	r3, #0
 800e06e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e070:	68fb      	ldr	r3, [r7, #12]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	2000211c 	.word	0x2000211c

0800e084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e08c:	f7fe ff74 	bl	800cf78 <xTaskGetTickCount>
 800e090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e092:	4b0b      	ldr	r3, [pc, #44]	; (800e0c0 <prvSampleTimeNow+0x3c>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d205      	bcs.n	800e0a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e09c:	f000 f930 	bl	800e300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	e002      	b.n	800e0ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e0ae:	4a04      	ldr	r2, [pc, #16]	; (800e0c0 <prvSampleTimeNow+0x3c>)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	2000212c 	.word	0x2000212c

0800e0c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	60b9      	str	r1, [r7, #8]
 800e0ce:	607a      	str	r2, [r7, #4]
 800e0d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	68ba      	ldr	r2, [r7, #8]
 800e0da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	68fa      	ldr	r2, [r7, #12]
 800e0e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e0e2:	68ba      	ldr	r2, [r7, #8]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d812      	bhi.n	800e110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	1ad2      	subs	r2, r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	699b      	ldr	r3, [r3, #24]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d302      	bcc.n	800e0fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	617b      	str	r3, [r7, #20]
 800e0fc:	e01b      	b.n	800e136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e0fe:	4b10      	ldr	r3, [pc, #64]	; (800e140 <prvInsertTimerInActiveList+0x7c>)
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3304      	adds	r3, #4
 800e106:	4619      	mov	r1, r3
 800e108:	4610      	mov	r0, r2
 800e10a:	f7fd fb18 	bl	800b73e <vListInsert>
 800e10e:	e012      	b.n	800e136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	429a      	cmp	r2, r3
 800e116:	d206      	bcs.n	800e126 <prvInsertTimerInActiveList+0x62>
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d302      	bcc.n	800e126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e120:	2301      	movs	r3, #1
 800e122:	617b      	str	r3, [r7, #20]
 800e124:	e007      	b.n	800e136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e126:	4b07      	ldr	r3, [pc, #28]	; (800e144 <prvInsertTimerInActiveList+0x80>)
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	3304      	adds	r3, #4
 800e12e:	4619      	mov	r1, r3
 800e130:	4610      	mov	r0, r2
 800e132:	f7fd fb04 	bl	800b73e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e136:	697b      	ldr	r3, [r7, #20]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3718      	adds	r7, #24
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	20002120 	.word	0x20002120
 800e144:	2000211c 	.word	0x2000211c

0800e148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b08e      	sub	sp, #56	; 0x38
 800e14c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e14e:	e0c6      	b.n	800e2de <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	da17      	bge.n	800e186 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e156:	1d3b      	adds	r3, r7, #4
 800e158:	3304      	adds	r3, #4
 800e15a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d109      	bne.n	800e176 <prvProcessReceivedCommands+0x2e>
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	61fb      	str	r3, [r7, #28]
 800e174:	e7fe      	b.n	800e174 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e17c:	6850      	ldr	r0, [r2, #4]
 800e17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e180:	6892      	ldr	r2, [r2, #8]
 800e182:	4611      	mov	r1, r2
 800e184:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f2c0 80a7 	blt.w	800e2dc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e194:	695b      	ldr	r3, [r3, #20]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d004      	beq.n	800e1a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19c:	3304      	adds	r3, #4
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fd fb06 	bl	800b7b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1a4:	463b      	mov	r3, r7
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7ff ff6c 	bl	800e084 <prvSampleTimeNow>
 800e1ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b09      	cmp	r3, #9
 800e1b2:	f200 8094 	bhi.w	800e2de <prvProcessReceivedCommands+0x196>
 800e1b6:	a201      	add	r2, pc, #4	; (adr r2, 800e1bc <prvProcessReceivedCommands+0x74>)
 800e1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1bc:	0800e1e5 	.word	0x0800e1e5
 800e1c0:	0800e1e5 	.word	0x0800e1e5
 800e1c4:	0800e1e5 	.word	0x0800e1e5
 800e1c8:	0800e257 	.word	0x0800e257
 800e1cc:	0800e26b 	.word	0x0800e26b
 800e1d0:	0800e2b3 	.word	0x0800e2b3
 800e1d4:	0800e1e5 	.word	0x0800e1e5
 800e1d8:	0800e1e5 	.word	0x0800e1e5
 800e1dc:	0800e257 	.word	0x0800e257
 800e1e0:	0800e26b 	.word	0x0800e26b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1ea:	f043 0301 	orr.w	r3, r3, #1
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e1f6:	68ba      	ldr	r2, [r7, #8]
 800e1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	18d1      	adds	r1, r2, r3
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e204:	f7ff ff5e 	bl	800e0c4 <prvInsertTimerInActiveList>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d067      	beq.n	800e2de <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e210:	6a1b      	ldr	r3, [r3, #32]
 800e212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e214:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e21c:	f003 0304 	and.w	r3, r3, #4
 800e220:	2b00      	cmp	r3, #0
 800e222:	d05c      	beq.n	800e2de <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e224:	68ba      	ldr	r2, [r7, #8]
 800e226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	441a      	add	r2, r3
 800e22c:	2300      	movs	r3, #0
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	2300      	movs	r3, #0
 800e232:	2100      	movs	r1, #0
 800e234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e236:	f7ff fe09 	bl	800de4c <xTimerGenericCommand>
 800e23a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d14d      	bne.n	800e2de <prvProcessReceivedCommands+0x196>
 800e242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e246:	f383 8811 	msr	BASEPRI, r3
 800e24a:	f3bf 8f6f 	isb	sy
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	61bb      	str	r3, [r7, #24]
 800e254:	e7fe      	b.n	800e254 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e25c:	f023 0301 	bic.w	r3, r3, #1
 800e260:	b2da      	uxtb	r2, r3
 800e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e264:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e268:	e039      	b.n	800e2de <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e270:	f043 0301 	orr.w	r3, r3, #1
 800e274:	b2da      	uxtb	r2, r3
 800e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e278:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e280:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e284:	699b      	ldr	r3, [r3, #24]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d109      	bne.n	800e29e <prvProcessReceivedCommands+0x156>
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	617b      	str	r3, [r7, #20]
 800e29c:	e7fe      	b.n	800e29c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a0:	699a      	ldr	r2, [r3, #24]
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a4:	18d1      	adds	r1, r2, r3
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2ac:	f7ff ff0a 	bl	800e0c4 <prvInsertTimerInActiveList>
					break;
 800e2b0:	e015      	b.n	800e2de <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2b8:	f003 0302 	and.w	r3, r3, #2
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d103      	bne.n	800e2c8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800e2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2c2:	f000 fbc7 	bl	800ea54 <vPortFree>
 800e2c6:	e00a      	b.n	800e2de <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2ce:	f023 0301 	bic.w	r3, r3, #1
 800e2d2:	b2da      	uxtb	r2, r3
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e2da:	e000      	b.n	800e2de <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e2dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2de:	4b07      	ldr	r3, [pc, #28]	; (800e2fc <prvProcessReceivedCommands+0x1b4>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	1d39      	adds	r1, r7, #4
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fd fefc 	bl	800c0e4 <xQueueReceive>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f47f af2e 	bne.w	800e150 <prvProcessReceivedCommands+0x8>
	}
}
 800e2f4:	bf00      	nop
 800e2f6:	3730      	adds	r7, #48	; 0x30
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	20002124 	.word	0x20002124

0800e300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b088      	sub	sp, #32
 800e304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e306:	e047      	b.n	800e398 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e308:	4b2d      	ldr	r3, [pc, #180]	; (800e3c0 <prvSwitchTimerLists+0xc0>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e312:	4b2b      	ldr	r3, [pc, #172]	; (800e3c0 <prvSwitchTimerLists+0xc0>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	3304      	adds	r3, #4
 800e320:	4618      	mov	r0, r3
 800e322:	f7fd fa45 	bl	800b7b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6a1b      	ldr	r3, [r3, #32]
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e334:	f003 0304 	and.w	r3, r3, #4
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d02d      	beq.n	800e398 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	699b      	ldr	r3, [r3, #24]
 800e340:	693a      	ldr	r2, [r7, #16]
 800e342:	4413      	add	r3, r2
 800e344:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e346:	68ba      	ldr	r2, [r7, #8]
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d90e      	bls.n	800e36c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e35a:	4b19      	ldr	r3, [pc, #100]	; (800e3c0 <prvSwitchTimerLists+0xc0>)
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3304      	adds	r3, #4
 800e362:	4619      	mov	r1, r3
 800e364:	4610      	mov	r0, r2
 800e366:	f7fd f9ea 	bl	800b73e <vListInsert>
 800e36a:	e015      	b.n	800e398 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e36c:	2300      	movs	r3, #0
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	2300      	movs	r3, #0
 800e372:	693a      	ldr	r2, [r7, #16]
 800e374:	2100      	movs	r1, #0
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f7ff fd68 	bl	800de4c <xTimerGenericCommand>
 800e37c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d109      	bne.n	800e398 <prvSwitchTimerLists+0x98>
 800e384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e388:	f383 8811 	msr	BASEPRI, r3
 800e38c:	f3bf 8f6f 	isb	sy
 800e390:	f3bf 8f4f 	dsb	sy
 800e394:	603b      	str	r3, [r7, #0]
 800e396:	e7fe      	b.n	800e396 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e398:	4b09      	ldr	r3, [pc, #36]	; (800e3c0 <prvSwitchTimerLists+0xc0>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1b2      	bne.n	800e308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e3a2:	4b07      	ldr	r3, [pc, #28]	; (800e3c0 <prvSwitchTimerLists+0xc0>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e3a8:	4b06      	ldr	r3, [pc, #24]	; (800e3c4 <prvSwitchTimerLists+0xc4>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a04      	ldr	r2, [pc, #16]	; (800e3c0 <prvSwitchTimerLists+0xc0>)
 800e3ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e3b0:	4a04      	ldr	r2, [pc, #16]	; (800e3c4 <prvSwitchTimerLists+0xc4>)
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	6013      	str	r3, [r2, #0]
}
 800e3b6:	bf00      	nop
 800e3b8:	3718      	adds	r7, #24
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	2000211c 	.word	0x2000211c
 800e3c4:	20002120 	.word	0x20002120

0800e3c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e3ce:	f000 f965 	bl	800e69c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e3d2:	4b15      	ldr	r3, [pc, #84]	; (800e428 <prvCheckForValidListAndQueue+0x60>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d120      	bne.n	800e41c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e3da:	4814      	ldr	r0, [pc, #80]	; (800e42c <prvCheckForValidListAndQueue+0x64>)
 800e3dc:	f7fd f95e 	bl	800b69c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e3e0:	4813      	ldr	r0, [pc, #76]	; (800e430 <prvCheckForValidListAndQueue+0x68>)
 800e3e2:	f7fd f95b 	bl	800b69c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e3e6:	4b13      	ldr	r3, [pc, #76]	; (800e434 <prvCheckForValidListAndQueue+0x6c>)
 800e3e8:	4a10      	ldr	r2, [pc, #64]	; (800e42c <prvCheckForValidListAndQueue+0x64>)
 800e3ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e3ec:	4b12      	ldr	r3, [pc, #72]	; (800e438 <prvCheckForValidListAndQueue+0x70>)
 800e3ee:	4a10      	ldr	r2, [pc, #64]	; (800e430 <prvCheckForValidListAndQueue+0x68>)
 800e3f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	9300      	str	r3, [sp, #0]
 800e3f6:	4b11      	ldr	r3, [pc, #68]	; (800e43c <prvCheckForValidListAndQueue+0x74>)
 800e3f8:	4a11      	ldr	r2, [pc, #68]	; (800e440 <prvCheckForValidListAndQueue+0x78>)
 800e3fa:	2110      	movs	r1, #16
 800e3fc:	200a      	movs	r0, #10
 800e3fe:	f7fd fa69 	bl	800b8d4 <xQueueGenericCreateStatic>
 800e402:	4602      	mov	r2, r0
 800e404:	4b08      	ldr	r3, [pc, #32]	; (800e428 <prvCheckForValidListAndQueue+0x60>)
 800e406:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e408:	4b07      	ldr	r3, [pc, #28]	; (800e428 <prvCheckForValidListAndQueue+0x60>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d005      	beq.n	800e41c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e410:	4b05      	ldr	r3, [pc, #20]	; (800e428 <prvCheckForValidListAndQueue+0x60>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	490b      	ldr	r1, [pc, #44]	; (800e444 <prvCheckForValidListAndQueue+0x7c>)
 800e416:	4618      	mov	r0, r3
 800e418:	f7fe fa10 	bl	800c83c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e41c:	f000 f96c 	bl	800e6f8 <vPortExitCritical>
}
 800e420:	bf00      	nop
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	20002124 	.word	0x20002124
 800e42c:	200020f4 	.word	0x200020f4
 800e430:	20002108 	.word	0x20002108
 800e434:	2000211c 	.word	0x2000211c
 800e438:	20002120 	.word	0x20002120
 800e43c:	200021d0 	.word	0x200021d0
 800e440:	20002130 	.word	0x20002130
 800e444:	08010908 	.word	0x08010908

0800e448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	3b04      	subs	r3, #4
 800e458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3b04      	subs	r3, #4
 800e466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	f023 0201 	bic.w	r2, r3, #1
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3b04      	subs	r3, #4
 800e476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e478:	4a0c      	ldr	r2, [pc, #48]	; (800e4ac <pxPortInitialiseStack+0x64>)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	3b14      	subs	r3, #20
 800e482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3b04      	subs	r3, #4
 800e48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f06f 0202 	mvn.w	r2, #2
 800e496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3b20      	subs	r3, #32
 800e49c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e49e:	68fb      	ldr	r3, [r7, #12]
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3714      	adds	r7, #20
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	0800e4b1 	.word	0x0800e4b1

0800e4b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4ba:	4b11      	ldr	r3, [pc, #68]	; (800e500 <prvTaskExitError+0x50>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c2:	d009      	beq.n	800e4d8 <prvTaskExitError+0x28>
 800e4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	60fb      	str	r3, [r7, #12]
 800e4d6:	e7fe      	b.n	800e4d6 <prvTaskExitError+0x26>
 800e4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e4ea:	bf00      	nop
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d0fc      	beq.n	800e4ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e4f2:	bf00      	nop
 800e4f4:	3714      	adds	r7, #20
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	20000144 	.word	0x20000144
	...

0800e510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e510:	4b07      	ldr	r3, [pc, #28]	; (800e530 <pxCurrentTCBConst2>)
 800e512:	6819      	ldr	r1, [r3, #0]
 800e514:	6808      	ldr	r0, [r1, #0]
 800e516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51a:	f380 8809 	msr	PSP, r0
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f04f 0000 	mov.w	r0, #0
 800e526:	f380 8811 	msr	BASEPRI, r0
 800e52a:	4770      	bx	lr
 800e52c:	f3af 8000 	nop.w

0800e530 <pxCurrentTCBConst2>:
 800e530:	20001bf4 	.word	0x20001bf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e534:	bf00      	nop
 800e536:	bf00      	nop

0800e538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e538:	4808      	ldr	r0, [pc, #32]	; (800e55c <prvPortStartFirstTask+0x24>)
 800e53a:	6800      	ldr	r0, [r0, #0]
 800e53c:	6800      	ldr	r0, [r0, #0]
 800e53e:	f380 8808 	msr	MSP, r0
 800e542:	f04f 0000 	mov.w	r0, #0
 800e546:	f380 8814 	msr	CONTROL, r0
 800e54a:	b662      	cpsie	i
 800e54c:	b661      	cpsie	f
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	df00      	svc	0
 800e558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e55a:	bf00      	nop
 800e55c:	e000ed08 	.word	0xe000ed08

0800e560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b086      	sub	sp, #24
 800e564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e566:	4b44      	ldr	r3, [pc, #272]	; (800e678 <xPortStartScheduler+0x118>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a44      	ldr	r2, [pc, #272]	; (800e67c <xPortStartScheduler+0x11c>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d109      	bne.n	800e584 <xPortStartScheduler+0x24>
 800e570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e574:	f383 8811 	msr	BASEPRI, r3
 800e578:	f3bf 8f6f 	isb	sy
 800e57c:	f3bf 8f4f 	dsb	sy
 800e580:	613b      	str	r3, [r7, #16]
 800e582:	e7fe      	b.n	800e582 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e584:	4b3c      	ldr	r3, [pc, #240]	; (800e678 <xPortStartScheduler+0x118>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a3d      	ldr	r2, [pc, #244]	; (800e680 <xPortStartScheduler+0x120>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d109      	bne.n	800e5a2 <xPortStartScheduler+0x42>
 800e58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e592:	f383 8811 	msr	BASEPRI, r3
 800e596:	f3bf 8f6f 	isb	sy
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	60fb      	str	r3, [r7, #12]
 800e5a0:	e7fe      	b.n	800e5a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5a2:	4b38      	ldr	r3, [pc, #224]	; (800e684 <xPortStartScheduler+0x124>)
 800e5a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	22ff      	movs	r2, #255	; 0xff
 800e5b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5bc:	78fb      	ldrb	r3, [r7, #3]
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5c4:	b2da      	uxtb	r2, r3
 800e5c6:	4b30      	ldr	r3, [pc, #192]	; (800e688 <xPortStartScheduler+0x128>)
 800e5c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5ca:	4b30      	ldr	r3, [pc, #192]	; (800e68c <xPortStartScheduler+0x12c>)
 800e5cc:	2207      	movs	r2, #7
 800e5ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5d0:	e009      	b.n	800e5e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e5d2:	4b2e      	ldr	r3, [pc, #184]	; (800e68c <xPortStartScheduler+0x12c>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	4a2c      	ldr	r2, [pc, #176]	; (800e68c <xPortStartScheduler+0x12c>)
 800e5da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e5dc:	78fb      	ldrb	r3, [r7, #3]
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	005b      	lsls	r3, r3, #1
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5e6:	78fb      	ldrb	r3, [r7, #3]
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ee:	2b80      	cmp	r3, #128	; 0x80
 800e5f0:	d0ef      	beq.n	800e5d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e5f2:	4b26      	ldr	r3, [pc, #152]	; (800e68c <xPortStartScheduler+0x12c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f1c3 0307 	rsb	r3, r3, #7
 800e5fa:	2b04      	cmp	r3, #4
 800e5fc:	d009      	beq.n	800e612 <xPortStartScheduler+0xb2>
 800e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	60bb      	str	r3, [r7, #8]
 800e610:	e7fe      	b.n	800e610 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e612:	4b1e      	ldr	r3, [pc, #120]	; (800e68c <xPortStartScheduler+0x12c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	021b      	lsls	r3, r3, #8
 800e618:	4a1c      	ldr	r2, [pc, #112]	; (800e68c <xPortStartScheduler+0x12c>)
 800e61a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e61c:	4b1b      	ldr	r3, [pc, #108]	; (800e68c <xPortStartScheduler+0x12c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e624:	4a19      	ldr	r2, [pc, #100]	; (800e68c <xPortStartScheduler+0x12c>)
 800e626:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e630:	4b17      	ldr	r3, [pc, #92]	; (800e690 <xPortStartScheduler+0x130>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4a16      	ldr	r2, [pc, #88]	; (800e690 <xPortStartScheduler+0x130>)
 800e636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e63a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e63c:	4b14      	ldr	r3, [pc, #80]	; (800e690 <xPortStartScheduler+0x130>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4a13      	ldr	r2, [pc, #76]	; (800e690 <xPortStartScheduler+0x130>)
 800e642:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e646:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e648:	f000 f8d6 	bl	800e7f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e64c:	4b11      	ldr	r3, [pc, #68]	; (800e694 <xPortStartScheduler+0x134>)
 800e64e:	2200      	movs	r2, #0
 800e650:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e652:	f000 f8f5 	bl	800e840 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e656:	4b10      	ldr	r3, [pc, #64]	; (800e698 <xPortStartScheduler+0x138>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a0f      	ldr	r2, [pc, #60]	; (800e698 <xPortStartScheduler+0x138>)
 800e65c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e660:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e662:	f7ff ff69 	bl	800e538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e666:	f7fe fd4f 	bl	800d108 <vTaskSwitchContext>
	prvTaskExitError();
 800e66a:	f7ff ff21 	bl	800e4b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e66e:	2300      	movs	r3, #0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3718      	adds	r7, #24
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	e000ed00 	.word	0xe000ed00
 800e67c:	410fc271 	.word	0x410fc271
 800e680:	410fc270 	.word	0x410fc270
 800e684:	e000e400 	.word	0xe000e400
 800e688:	20002220 	.word	0x20002220
 800e68c:	20002224 	.word	0x20002224
 800e690:	e000ed20 	.word	0xe000ed20
 800e694:	20000144 	.word	0x20000144
 800e698:	e000ef34 	.word	0xe000ef34

0800e69c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a6:	f383 8811 	msr	BASEPRI, r3
 800e6aa:	f3bf 8f6f 	isb	sy
 800e6ae:	f3bf 8f4f 	dsb	sy
 800e6b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6b4:	4b0e      	ldr	r3, [pc, #56]	; (800e6f0 <vPortEnterCritical+0x54>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	4a0d      	ldr	r2, [pc, #52]	; (800e6f0 <vPortEnterCritical+0x54>)
 800e6bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6be:	4b0c      	ldr	r3, [pc, #48]	; (800e6f0 <vPortEnterCritical+0x54>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d10e      	bne.n	800e6e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6c6:	4b0b      	ldr	r3, [pc, #44]	; (800e6f4 <vPortEnterCritical+0x58>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d009      	beq.n	800e6e4 <vPortEnterCritical+0x48>
 800e6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	603b      	str	r3, [r7, #0]
 800e6e2:	e7fe      	b.n	800e6e2 <vPortEnterCritical+0x46>
	}
}
 800e6e4:	bf00      	nop
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	20000144 	.word	0x20000144
 800e6f4:	e000ed04 	.word	0xe000ed04

0800e6f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e6fe:	4b11      	ldr	r3, [pc, #68]	; (800e744 <vPortExitCritical+0x4c>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d109      	bne.n	800e71a <vPortExitCritical+0x22>
 800e706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e70a:	f383 8811 	msr	BASEPRI, r3
 800e70e:	f3bf 8f6f 	isb	sy
 800e712:	f3bf 8f4f 	dsb	sy
 800e716:	607b      	str	r3, [r7, #4]
 800e718:	e7fe      	b.n	800e718 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e71a:	4b0a      	ldr	r3, [pc, #40]	; (800e744 <vPortExitCritical+0x4c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	3b01      	subs	r3, #1
 800e720:	4a08      	ldr	r2, [pc, #32]	; (800e744 <vPortExitCritical+0x4c>)
 800e722:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e724:	4b07      	ldr	r3, [pc, #28]	; (800e744 <vPortExitCritical+0x4c>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d104      	bne.n	800e736 <vPortExitCritical+0x3e>
 800e72c:	2300      	movs	r3, #0
 800e72e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e736:	bf00      	nop
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop
 800e744:	20000144 	.word	0x20000144
	...

0800e750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e750:	f3ef 8009 	mrs	r0, PSP
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	4b15      	ldr	r3, [pc, #84]	; (800e7b0 <pxCurrentTCBConst>)
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	f01e 0f10 	tst.w	lr, #16
 800e760:	bf08      	it	eq
 800e762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76a:	6010      	str	r0, [r2, #0]
 800e76c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e770:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e774:	f380 8811 	msr	BASEPRI, r0
 800e778:	f3bf 8f4f 	dsb	sy
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f7fe fcc2 	bl	800d108 <vTaskSwitchContext>
 800e784:	f04f 0000 	mov.w	r0, #0
 800e788:	f380 8811 	msr	BASEPRI, r0
 800e78c:	bc09      	pop	{r0, r3}
 800e78e:	6819      	ldr	r1, [r3, #0]
 800e790:	6808      	ldr	r0, [r1, #0]
 800e792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e796:	f01e 0f10 	tst.w	lr, #16
 800e79a:	bf08      	it	eq
 800e79c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7a0:	f380 8809 	msr	PSP, r0
 800e7a4:	f3bf 8f6f 	isb	sy
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	f3af 8000 	nop.w

0800e7b0 <pxCurrentTCBConst>:
 800e7b0:	20001bf4 	.word	0x20001bf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7b4:	bf00      	nop
 800e7b6:	bf00      	nop

0800e7b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e7d0:	f7fe fbe2 	bl	800cf98 <xTaskIncrementTick>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7da:	4b06      	ldr	r3, [pc, #24]	; (800e7f4 <SysTick_Handler+0x3c>)
 800e7dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7e0:	601a      	str	r2, [r3, #0]
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e7ec:	bf00      	nop
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	e000ed04 	.word	0xe000ed04

0800e7f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e7fc:	4b0b      	ldr	r3, [pc, #44]	; (800e82c <vPortSetupTimerInterrupt+0x34>)
 800e7fe:	2200      	movs	r2, #0
 800e800:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e802:	4b0b      	ldr	r3, [pc, #44]	; (800e830 <vPortSetupTimerInterrupt+0x38>)
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e808:	4b0a      	ldr	r3, [pc, #40]	; (800e834 <vPortSetupTimerInterrupt+0x3c>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a0a      	ldr	r2, [pc, #40]	; (800e838 <vPortSetupTimerInterrupt+0x40>)
 800e80e:	fba2 2303 	umull	r2, r3, r2, r3
 800e812:	099b      	lsrs	r3, r3, #6
 800e814:	4a09      	ldr	r2, [pc, #36]	; (800e83c <vPortSetupTimerInterrupt+0x44>)
 800e816:	3b01      	subs	r3, #1
 800e818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e81a:	4b04      	ldr	r3, [pc, #16]	; (800e82c <vPortSetupTimerInterrupt+0x34>)
 800e81c:	2207      	movs	r2, #7
 800e81e:	601a      	str	r2, [r3, #0]
}
 800e820:	bf00      	nop
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	e000e010 	.word	0xe000e010
 800e830:	e000e018 	.word	0xe000e018
 800e834:	20000028 	.word	0x20000028
 800e838:	10624dd3 	.word	0x10624dd3
 800e83c:	e000e014 	.word	0xe000e014

0800e840 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e840:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e850 <vPortEnableVFP+0x10>
 800e844:	6801      	ldr	r1, [r0, #0]
 800e846:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e84a:	6001      	str	r1, [r0, #0]
 800e84c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e84e:	bf00      	nop
 800e850:	e000ed88 	.word	0xe000ed88

0800e854 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e85a:	f3ef 8305 	mrs	r3, IPSR
 800e85e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2b0f      	cmp	r3, #15
 800e864:	d913      	bls.n	800e88e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e866:	4a16      	ldr	r2, [pc, #88]	; (800e8c0 <vPortValidateInterruptPriority+0x6c>)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	4413      	add	r3, r2
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e870:	4b14      	ldr	r3, [pc, #80]	; (800e8c4 <vPortValidateInterruptPriority+0x70>)
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	7afa      	ldrb	r2, [r7, #11]
 800e876:	429a      	cmp	r2, r3
 800e878:	d209      	bcs.n	800e88e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	607b      	str	r3, [r7, #4]
 800e88c:	e7fe      	b.n	800e88c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e88e:	4b0e      	ldr	r3, [pc, #56]	; (800e8c8 <vPortValidateInterruptPriority+0x74>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e896:	4b0d      	ldr	r3, [pc, #52]	; (800e8cc <vPortValidateInterruptPriority+0x78>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d909      	bls.n	800e8b2 <vPortValidateInterruptPriority+0x5e>
 800e89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	603b      	str	r3, [r7, #0]
 800e8b0:	e7fe      	b.n	800e8b0 <vPortValidateInterruptPriority+0x5c>
	}
 800e8b2:	bf00      	nop
 800e8b4:	3714      	adds	r7, #20
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	e000e3f0 	.word	0xe000e3f0
 800e8c4:	20002220 	.word	0x20002220
 800e8c8:	e000ed0c 	.word	0xe000ed0c
 800e8cc:	20002224 	.word	0x20002224

0800e8d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b08a      	sub	sp, #40	; 0x28
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e8dc:	f7fe fa6a 	bl	800cdb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e8e0:	4b57      	ldr	r3, [pc, #348]	; (800ea40 <pvPortMalloc+0x170>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d101      	bne.n	800e8ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e8e8:	f000 f90c 	bl	800eb04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e8ec:	4b55      	ldr	r3, [pc, #340]	; (800ea44 <pvPortMalloc+0x174>)
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4013      	ands	r3, r2
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f040 808c 	bne.w	800ea12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d01c      	beq.n	800e93a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e900:	2208      	movs	r2, #8
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4413      	add	r3, r2
 800e906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f003 0307 	and.w	r3, r3, #7
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d013      	beq.n	800e93a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f023 0307 	bic.w	r3, r3, #7
 800e918:	3308      	adds	r3, #8
 800e91a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f003 0307 	and.w	r3, r3, #7
 800e922:	2b00      	cmp	r3, #0
 800e924:	d009      	beq.n	800e93a <pvPortMalloc+0x6a>
 800e926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	617b      	str	r3, [r7, #20]
 800e938:	e7fe      	b.n	800e938 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d068      	beq.n	800ea12 <pvPortMalloc+0x142>
 800e940:	4b41      	ldr	r3, [pc, #260]	; (800ea48 <pvPortMalloc+0x178>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	429a      	cmp	r2, r3
 800e948:	d863      	bhi.n	800ea12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e94a:	4b40      	ldr	r3, [pc, #256]	; (800ea4c <pvPortMalloc+0x17c>)
 800e94c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e94e:	4b3f      	ldr	r3, [pc, #252]	; (800ea4c <pvPortMalloc+0x17c>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e954:	e004      	b.n	800e960 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	429a      	cmp	r2, r3
 800e968:	d903      	bls.n	800e972 <pvPortMalloc+0xa2>
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1f1      	bne.n	800e956 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e972:	4b33      	ldr	r3, [pc, #204]	; (800ea40 <pvPortMalloc+0x170>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e978:	429a      	cmp	r2, r3
 800e97a:	d04a      	beq.n	800ea12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e97c:	6a3b      	ldr	r3, [r7, #32]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2208      	movs	r2, #8
 800e982:	4413      	add	r3, r2
 800e984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	6a3b      	ldr	r3, [r7, #32]
 800e98c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	685a      	ldr	r2, [r3, #4]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	1ad2      	subs	r2, r2, r3
 800e996:	2308      	movs	r3, #8
 800e998:	005b      	lsls	r3, r3, #1
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d91e      	bls.n	800e9dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	f003 0307 	and.w	r3, r3, #7
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d009      	beq.n	800e9c4 <pvPortMalloc+0xf4>
 800e9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b4:	f383 8811 	msr	BASEPRI, r3
 800e9b8:	f3bf 8f6f 	isb	sy
 800e9bc:	f3bf 8f4f 	dsb	sy
 800e9c0:	613b      	str	r3, [r7, #16]
 800e9c2:	e7fe      	b.n	800e9c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c6:	685a      	ldr	r2, [r3, #4]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	1ad2      	subs	r2, r2, r3
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9d6:	69b8      	ldr	r0, [r7, #24]
 800e9d8:	f000 f8f6 	bl	800ebc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9dc:	4b1a      	ldr	r3, [pc, #104]	; (800ea48 <pvPortMalloc+0x178>)
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	4a18      	ldr	r2, [pc, #96]	; (800ea48 <pvPortMalloc+0x178>)
 800e9e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9ea:	4b17      	ldr	r3, [pc, #92]	; (800ea48 <pvPortMalloc+0x178>)
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	4b18      	ldr	r3, [pc, #96]	; (800ea50 <pvPortMalloc+0x180>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d203      	bcs.n	800e9fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e9f6:	4b14      	ldr	r3, [pc, #80]	; (800ea48 <pvPortMalloc+0x178>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a15      	ldr	r2, [pc, #84]	; (800ea50 <pvPortMalloc+0x180>)
 800e9fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	4b10      	ldr	r3, [pc, #64]	; (800ea44 <pvPortMalloc+0x174>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	431a      	orrs	r2, r3
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0e:	2200      	movs	r2, #0
 800ea10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea12:	f7fe fa15 	bl	800ce40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	f003 0307 	and.w	r3, r3, #7
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d009      	beq.n	800ea34 <pvPortMalloc+0x164>
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	e7fe      	b.n	800ea32 <pvPortMalloc+0x162>
	return pvReturn;
 800ea34:	69fb      	ldr	r3, [r7, #28]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3728      	adds	r7, #40	; 0x28
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	20004940 	.word	0x20004940
 800ea44:	2000494c 	.word	0x2000494c
 800ea48:	20004944 	.word	0x20004944
 800ea4c:	20004938 	.word	0x20004938
 800ea50:	20004948 	.word	0x20004948

0800ea54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d046      	beq.n	800eaf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea66:	2308      	movs	r3, #8
 800ea68:	425b      	negs	r3, r3
 800ea6a:	697a      	ldr	r2, [r7, #20]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	685a      	ldr	r2, [r3, #4]
 800ea78:	4b20      	ldr	r3, [pc, #128]	; (800eafc <vPortFree+0xa8>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4013      	ands	r3, r2
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d109      	bne.n	800ea96 <vPortFree+0x42>
 800ea82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea86:	f383 8811 	msr	BASEPRI, r3
 800ea8a:	f3bf 8f6f 	isb	sy
 800ea8e:	f3bf 8f4f 	dsb	sy
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	e7fe      	b.n	800ea94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d009      	beq.n	800eab2 <vPortFree+0x5e>
 800ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	60bb      	str	r3, [r7, #8]
 800eab0:	e7fe      	b.n	800eab0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	685a      	ldr	r2, [r3, #4]
 800eab6:	4b11      	ldr	r3, [pc, #68]	; (800eafc <vPortFree+0xa8>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4013      	ands	r3, r2
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d019      	beq.n	800eaf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d115      	bne.n	800eaf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	4b0b      	ldr	r3, [pc, #44]	; (800eafc <vPortFree+0xa8>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	43db      	mvns	r3, r3
 800ead2:	401a      	ands	r2, r3
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ead8:	f7fe f96c 	bl	800cdb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	4b07      	ldr	r3, [pc, #28]	; (800eb00 <vPortFree+0xac>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4413      	add	r3, r2
 800eae6:	4a06      	ldr	r2, [pc, #24]	; (800eb00 <vPortFree+0xac>)
 800eae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eaea:	6938      	ldr	r0, [r7, #16]
 800eaec:	f000 f86c 	bl	800ebc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eaf0:	f7fe f9a6 	bl	800ce40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eaf4:	bf00      	nop
 800eaf6:	3718      	adds	r7, #24
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	2000494c 	.word	0x2000494c
 800eb00:	20004944 	.word	0x20004944

0800eb04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb0a:	f242 7310 	movw	r3, #10000	; 0x2710
 800eb0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb10:	4b27      	ldr	r3, [pc, #156]	; (800ebb0 <prvHeapInit+0xac>)
 800eb12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f003 0307 	and.w	r3, r3, #7
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00c      	beq.n	800eb38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	3307      	adds	r3, #7
 800eb22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f023 0307 	bic.w	r3, r3, #7
 800eb2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	4a1f      	ldr	r2, [pc, #124]	; (800ebb0 <prvHeapInit+0xac>)
 800eb34:	4413      	add	r3, r2
 800eb36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb3c:	4a1d      	ldr	r2, [pc, #116]	; (800ebb4 <prvHeapInit+0xb0>)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb42:	4b1c      	ldr	r3, [pc, #112]	; (800ebb4 <prvHeapInit+0xb0>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	68ba      	ldr	r2, [r7, #8]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb50:	2208      	movs	r2, #8
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	1a9b      	subs	r3, r3, r2
 800eb56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f023 0307 	bic.w	r3, r3, #7
 800eb5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	4a15      	ldr	r2, [pc, #84]	; (800ebb8 <prvHeapInit+0xb4>)
 800eb64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb66:	4b14      	ldr	r3, [pc, #80]	; (800ebb8 <prvHeapInit+0xb4>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb6e:	4b12      	ldr	r3, [pc, #72]	; (800ebb8 <prvHeapInit+0xb4>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2200      	movs	r2, #0
 800eb74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	1ad2      	subs	r2, r2, r3
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb84:	4b0c      	ldr	r3, [pc, #48]	; (800ebb8 <prvHeapInit+0xb4>)
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	4a0a      	ldr	r2, [pc, #40]	; (800ebbc <prvHeapInit+0xb8>)
 800eb92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	4a09      	ldr	r2, [pc, #36]	; (800ebc0 <prvHeapInit+0xbc>)
 800eb9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb9c:	4b09      	ldr	r3, [pc, #36]	; (800ebc4 <prvHeapInit+0xc0>)
 800eb9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eba2:	601a      	str	r2, [r3, #0]
}
 800eba4:	bf00      	nop
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr
 800ebb0:	20002228 	.word	0x20002228
 800ebb4:	20004938 	.word	0x20004938
 800ebb8:	20004940 	.word	0x20004940
 800ebbc:	20004948 	.word	0x20004948
 800ebc0:	20004944 	.word	0x20004944
 800ebc4:	2000494c 	.word	0x2000494c

0800ebc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ebd0:	4b28      	ldr	r3, [pc, #160]	; (800ec74 <prvInsertBlockIntoFreeList+0xac>)
 800ebd2:	60fb      	str	r3, [r7, #12]
 800ebd4:	e002      	b.n	800ebdc <prvInsertBlockIntoFreeList+0x14>
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	60fb      	str	r3, [r7, #12]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d8f7      	bhi.n	800ebd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	68ba      	ldr	r2, [r7, #8]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d108      	bne.n	800ec0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	685a      	ldr	r2, [r3, #4]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	441a      	add	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	68ba      	ldr	r2, [r7, #8]
 800ec14:	441a      	add	r2, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d118      	bne.n	800ec50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	4b15      	ldr	r3, [pc, #84]	; (800ec78 <prvInsertBlockIntoFreeList+0xb0>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d00d      	beq.n	800ec46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	685a      	ldr	r2, [r3, #4]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	441a      	add	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	601a      	str	r2, [r3, #0]
 800ec44:	e008      	b.n	800ec58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec46:	4b0c      	ldr	r3, [pc, #48]	; (800ec78 <prvInsertBlockIntoFreeList+0xb0>)
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	e003      	b.n	800ec58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d002      	beq.n	800ec66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec66:	bf00      	nop
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	20004938 	.word	0x20004938
 800ec78:	20004940 	.word	0x20004940

0800ec7c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 800ec82:	f000 f985 	bl	800ef90 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 800ec86:	480e      	ldr	r0, [pc, #56]	; (800ecc0 <APP_THREAD_Init+0x44>)
 800ec88:	f000 fbf6 	bl	800f478 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800ec8c:	2101      	movs	r1, #1
 800ec8e:	2002      	movs	r0, #2
 800ec90:	f001 fd66 	bl	8010760 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 800ec94:	f000 fce8 	bl	800f668 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 800ec98:	f000 fcd4 	bl	800f644 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800ec9c:	f7fa f966 	bl	8008f6c <SHCI_C2_THREAD_Init>
 800eca0:	4603      	mov	r3, r0
 800eca2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 800eca4:	4a07      	ldr	r2, [pc, #28]	; (800ecc4 <APP_THREAD_Init+0x48>)
 800eca6:	2100      	movs	r1, #0
 800eca8:	4807      	ldr	r0, [pc, #28]	; (800ecc8 <APP_THREAD_Init+0x4c>)
 800ecaa:	f7fc f855 	bl	800ad58 <osThreadNew>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	4b06      	ldr	r3, [pc, #24]	; (800eccc <APP_THREAD_Init+0x50>)
 800ecb2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 800ecb4:	f000 f86c 	bl	800ed90 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 800ecb8:	bf00      	nop
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	20030834 	.word	0x20030834
 800ecc4:	08010cf4 	.word	0x08010cf4
 800ecc8:	0800f04d 	.word	0x0800f04d
 800eccc:	20004a64 	.word	0x20004a64

0800ecd0 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2b07      	cmp	r3, #7
 800ecde:	d83b      	bhi.n	800ed58 <APP_THREAD_Error+0x88>
 800ece0:	a201      	add	r2, pc, #4	; (adr r2, 800ece8 <APP_THREAD_Error+0x18>)
 800ece2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece6:	bf00      	nop
 800ece8:	0800ed09 	.word	0x0800ed09
 800ecec:	0800ed13 	.word	0x0800ed13
 800ecf0:	0800ed1d 	.word	0x0800ed1d
 800ecf4:	0800ed27 	.word	0x0800ed27
 800ecf8:	0800ed31 	.word	0x0800ed31
 800ecfc:	0800ed3b 	.word	0x0800ed3b
 800ed00:	0800ed45 	.word	0x0800ed45
 800ed04:	0800ed4f 	.word	0x0800ed4f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	4818      	ldr	r0, [pc, #96]	; (800ed6c <APP_THREAD_Error+0x9c>)
 800ed0c:	f000 f934 	bl	800ef78 <APP_THREAD_TraceError>
    break;
 800ed10:	e027      	b.n	800ed62 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	4816      	ldr	r0, [pc, #88]	; (800ed70 <APP_THREAD_Error+0xa0>)
 800ed16:	f000 f92f 	bl	800ef78 <APP_THREAD_TraceError>
    break;
 800ed1a:	e022      	b.n	800ed62 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	4815      	ldr	r0, [pc, #84]	; (800ed74 <APP_THREAD_Error+0xa4>)
 800ed20:	f000 f92a 	bl	800ef78 <APP_THREAD_TraceError>
    break;
 800ed24:	e01d      	b.n	800ed62 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 800ed26:	6839      	ldr	r1, [r7, #0]
 800ed28:	4813      	ldr	r0, [pc, #76]	; (800ed78 <APP_THREAD_Error+0xa8>)
 800ed2a:	f000 f925 	bl	800ef78 <APP_THREAD_TraceError>
    break;
 800ed2e:	e018      	b.n	800ed62 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 800ed30:	6839      	ldr	r1, [r7, #0]
 800ed32:	4812      	ldr	r0, [pc, #72]	; (800ed7c <APP_THREAD_Error+0xac>)
 800ed34:	f000 f920 	bl	800ef78 <APP_THREAD_TraceError>
    break;
 800ed38:	e013      	b.n	800ed62 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 800ed3a:	6839      	ldr	r1, [r7, #0]
 800ed3c:	4810      	ldr	r0, [pc, #64]	; (800ed80 <APP_THREAD_Error+0xb0>)
 800ed3e:	f000 f91b 	bl	800ef78 <APP_THREAD_TraceError>
    break;
 800ed42:	e00e      	b.n	800ed62 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 800ed44:	6839      	ldr	r1, [r7, #0]
 800ed46:	480f      	ldr	r0, [pc, #60]	; (800ed84 <APP_THREAD_Error+0xb4>)
 800ed48:	f000 f916 	bl	800ef78 <APP_THREAD_TraceError>
    break;
 800ed4c:	e009      	b.n	800ed62 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	480d      	ldr	r0, [pc, #52]	; (800ed88 <APP_THREAD_Error+0xb8>)
 800ed52:	f000 f911 	bl	800ef78 <APP_THREAD_TraceError>
    break;
 800ed56:	e004      	b.n	800ed62 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 800ed58:	2100      	movs	r1, #0
 800ed5a:	480c      	ldr	r0, [pc, #48]	; (800ed8c <APP_THREAD_Error+0xbc>)
 800ed5c:	f000 f90c 	bl	800ef78 <APP_THREAD_TraceError>
    break;
 800ed60:	bf00      	nop
  }
}
 800ed62:	bf00      	nop
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	08010964 	.word	0x08010964
 800ed70:	08010988 	.word	0x08010988
 800ed74:	080109ac 	.word	0x080109ac
 800ed78:	080109cc 	.word	0x080109cc
 800ed7c:	080109ec 	.word	0x080109ec
 800ed80:	08010a0c 	.word	0x08010a0c
 800ed84:	08010a28 	.word	0x08010a28
 800ed88:	08010a54 	.word	0x08010a54
 800ed8c:	08010a78 	.word	0x08010a78

0800ed90 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 800ed96:	2000      	movs	r0, #0
 800ed98:	f7fb f91e 	bl	8009fd8 <otInstanceErasePersistentInfo>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800eda0:	79fb      	ldrb	r3, [r7, #7]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d004      	beq.n	800edb0 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 800eda6:	79fb      	ldrb	r3, [r7, #7]
 800eda8:	4619      	mov	r1, r3
 800edaa:	2006      	movs	r0, #6
 800edac:	f7ff ff90 	bl	800ecd0 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 800edb0:	2000      	movs	r0, #0
 800edb2:	f7fb f8b5 	bl	8009f20 <otInstanceFinalize>
  otInstanceInitSingle();
 800edb6:	f7fb f88c 	bl	8009ed2 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800edba:	2200      	movs	r2, #0
 800edbc:	4955      	ldr	r1, [pc, #340]	; (800ef14 <APP_THREAD_DeviceConfig+0x184>)
 800edbe:	2000      	movs	r0, #0
 800edc0:	f7fb f8d4 	bl	8009f6c <otSetStateChangedCallback>
 800edc4:	4603      	mov	r3, r0
 800edc6:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800edc8:	79fb      	ldrb	r3, [r7, #7]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d004      	beq.n	800edd8 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 800edce:	79fb      	ldrb	r3, [r7, #7]
 800edd0:	4619      	mov	r1, r3
 800edd2:	2001      	movs	r0, #1
 800edd4:	f7ff ff7c 	bl	800ecd0 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800edd8:	2117      	movs	r1, #23
 800edda:	2000      	movs	r0, #0
 800eddc:	f7fb fa04 	bl	800a1e8 <otLinkSetChannel>
 800ede0:	4603      	mov	r3, r0
 800ede2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ede4:	79fb      	ldrb	r3, [r7, #7]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d004      	beq.n	800edf4 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 800edea:	79fb      	ldrb	r3, [r7, #7]
 800edec:	4619      	mov	r1, r3
 800edee:	2002      	movs	r0, #2
 800edf0:	f7ff ff6e 	bl	800ecd0 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 800edf4:	f241 2134 	movw	r1, #4660	; 0x1234
 800edf8:	2000      	movs	r0, #0
 800edfa:	f7fb fa25 	bl	800a248 <otLinkSetPanId>
 800edfe:	4603      	mov	r3, r0
 800ee00:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d004      	beq.n	800ee12 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 800ee08:	79fb      	ldrb	r3, [r7, #7]
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	2003      	movs	r0, #3
 800ee0e:	f7ff ff5f 	bl	800ecd0 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 800ee12:	2101      	movs	r1, #1
 800ee14:	2000      	movs	r0, #0
 800ee16:	f7fb f908 	bl	800a02a <otIp6SetEnabled>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ee1e:	79fb      	ldrb	r3, [r7, #7]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d004      	beq.n	800ee2e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 800ee24:	79fb      	ldrb	r3, [r7, #7]
 800ee26:	4619      	mov	r1, r3
 800ee28:	2004      	movs	r0, #4
 800ee2a:	f7ff ff51 	bl	800ecd0 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 800ee2e:	2101      	movs	r1, #1
 800ee30:	2000      	movs	r0, #0
 800ee32:	f7fb fd3e 	bl	800a8b2 <otThreadSetEnabled>
 800ee36:	4603      	mov	r3, r0
 800ee38:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ee3a:	79fb      	ldrb	r3, [r7, #7]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d004      	beq.n	800ee4a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 800ee40:	79fb      	ldrb	r3, [r7, #7]
 800ee42:	4619      	mov	r1, r3
 800ee44:	2005      	movs	r0, #5
 800ee46:	f7ff ff43 	bl	800ecd0 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	f7fb fd30 	bl	800a8b2 <otThreadSetEnabled>
 800ee52:	4603      	mov	r3, r0
 800ee54:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800ee56:	79fb      	ldrb	r3, [r7, #7]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d004      	beq.n	800ee66 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	4619      	mov	r1, r3
 800ee60:	2005      	movs	r0, #5
 800ee62:	f7ff ff35 	bl	800ecd0 <APP_THREAD_Error>
  	}


  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 800ee66:	2106      	movs	r1, #6
 800ee68:	2000      	movs	r0, #0
 800ee6a:	f7fb fcef 	bl	800a84c <otPlatRadioSetTransmitPower>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800ee72:	79fb      	ldrb	r3, [r7, #7]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d004      	beq.n	800ee82 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 800ee78:	79fb      	ldrb	r3, [r7, #7]
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	2002      	movs	r0, #2
 800ee7e:	f7ff ff27 	bl	800ecd0 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 800ee82:	2103      	movs	r1, #3
 800ee84:	2000      	movs	r0, #0
 800ee86:	f7fb fd44 	bl	800a912 <otThreadSetChildTimeout>
//  	error = otThreadSetMasterKey(NULL, &masterKey);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 800ee8a:	4923      	ldr	r1, [pc, #140]	; (800ef18 <APP_THREAD_DeviceConfig+0x188>)
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	f7fb fdbc 	bl	800aa0a <otThreadSetNetworkName>
 800ee92:	4603      	mov	r3, r0
 800ee94:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d004      	beq.n	800eea6 <APP_THREAD_DeviceConfig+0x116>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 800ee9c:	79fb      	ldrb	r3, [r7, #7]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	2002      	movs	r0, #2
 800eea2:	f7ff ff15 	bl	800ecd0 <APP_THREAD_Error>
//  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otIp6SetEnabled(NULL, true);
 800eea6:	2101      	movs	r1, #1
 800eea8:	2000      	movs	r0, #0
 800eeaa:	f7fb f8be 	bl	800a02a <otIp6SetEnabled>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800eeb2:	79fb      	ldrb	r3, [r7, #7]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d004      	beq.n	800eec2 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 800eeb8:	79fb      	ldrb	r3, [r7, #7]
 800eeba:	4619      	mov	r1, r3
 800eebc:	2004      	movs	r0, #4
 800eebe:	f7ff ff07 	bl	800ecd0 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 800eec2:	2101      	movs	r1, #1
 800eec4:	2000      	movs	r0, #0
 800eec6:	f7fb fcf4 	bl	800a8b2 <otThreadSetEnabled>
 800eeca:	4603      	mov	r3, r0
 800eecc:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800eece:	79fb      	ldrb	r3, [r7, #7]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d004      	beq.n	800eede <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 800eed4:	79fb      	ldrb	r3, [r7, #7]
 800eed6:	4619      	mov	r1, r3
 800eed8:	2005      	movs	r0, #5
 800eeda:	f7ff fef9 	bl	800ecd0 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 800eede:	f241 6133 	movw	r1, #5683	; 0x1633
 800eee2:	2000      	movs	r0, #0
 800eee4:	f7fa ff63 	bl	8009dae <otCoapStart>
 800eee8:	4603      	mov	r3, r0
 800eeea:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 800eeec:	490b      	ldr	r1, [pc, #44]	; (800ef1c <APP_THREAD_DeviceConfig+0x18c>)
 800eeee:	2000      	movs	r0, #0
 800eef0:	f7fa ff8d 	bl	8009e0e <otCoapAddResource>
 800eef4:	4603      	mov	r3, r0
 800eef6:	71fb      	strb	r3, [r7, #7]
  	error = otCoapAddResource(NULL, &OT_Node_Spot_Ressource);
 800eef8:	4909      	ldr	r1, [pc, #36]	; (800ef20 <APP_THREAD_DeviceConfig+0x190>)
 800eefa:	2000      	movs	r0, #0
 800eefc:	f7fa ff87 	bl	8009e0e <otCoapAddResource>
 800ef00:	4603      	mov	r3, r0
 800ef02:	71fb      	strb	r3, [r7, #7]
  #ifndef DONGLE_CODE
//      error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
  #endif
  	// set default multicast address for border router
  //    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
  	otIp6AddressFromString("ff03::1", &multicastAddr);
 800ef04:	4907      	ldr	r1, [pc, #28]	; (800ef24 <APP_THREAD_DeviceConfig+0x194>)
 800ef06:	4808      	ldr	r0, [pc, #32]	; (800ef28 <APP_THREAD_DeviceConfig+0x198>)
 800ef08:	f7fb f93c 	bl	800a184 <otIp6AddressFromString>
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	0800ef2d 	.word	0x0800ef2d
 800ef18:	08010d3c 	.word	0x08010d3c
 800ef1c:	20000148 	.word	0x20000148
 800ef20:	20000158 	.word	0x20000158
 800ef24:	20004eb0 	.word	0x20004eb0
 800ef28:	08010a88 	.word	0x08010a88

0800ef2c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f003 0304 	and.w	r3, r3, #4
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d013      	beq.n	800ef68 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 800ef40:	2000      	movs	r0, #0
 800ef42:	f7fb fd91 	bl	800aa68 <otThreadGetDeviceRole>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b04      	cmp	r3, #4
 800ef4a:	d80f      	bhi.n	800ef6c <APP_THREAD_StateNotif+0x40>
 800ef4c:	a201      	add	r2, pc, #4	; (adr r2, 800ef54 <APP_THREAD_StateNotif+0x28>)
 800ef4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef52:	bf00      	nop
 800ef54:	0800ef6d 	.word	0x0800ef6d
 800ef58:	0800ef6d 	.word	0x0800ef6d
 800ef5c:	0800ef6d 	.word	0x0800ef6d
 800ef60:	0800ef6d 	.word	0x0800ef6d
 800ef64:	0800ef6d 	.word	0x0800ef6d
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 800ef68:	bf00      	nop
 800ef6a:	e000      	b.n	800ef6e <APP_THREAD_StateNotif+0x42>
      break;
 800ef6c:	bf00      	nop
}
 800ef6e:	bf00      	nop
 800ef70:	3708      	adds	r7, #8
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop

0800ef78 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 800ef82:	bf00      	nop
 800ef84:	370c      	adds	r7, #12
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
	...

0800ef90 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b088      	sub	sp, #32
 800ef94:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 800ef96:	1d3b      	adds	r3, r7, #4
 800ef98:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800ef9a:	6978      	ldr	r0, [r7, #20]
 800ef9c:	f7fa f812 	bl	8008fc4 <SHCI_GetWirelessFwInfo>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d004      	beq.n	800efb0 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800efa6:	2101      	movs	r1, #1
 800efa8:	2007      	movs	r0, #7
 800efaa:	f7ff fe91 	bl	800ecd0 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 800efae:	e03d      	b.n	800f02c <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 800efb0:	4a20      	ldr	r2, [pc, #128]	; (800f034 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 800efb2:	2101      	movs	r1, #1
 800efb4:	2000      	movs	r0, #0
 800efb6:	f7f2 fea1 	bl	8001cfc <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800efba:	4a1f      	ldr	r2, [pc, #124]	; (800f038 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 800efbc:	2101      	movs	r1, #1
 800efbe:	2000      	movs	r0, #0
 800efc0:	f7f2 fe9c 	bl	8001cfc <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	4619      	mov	r1, r3
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	785b      	ldrb	r3, [r3, #1]
 800efce:	461a      	mov	r2, r3
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	789b      	ldrb	r3, [r3, #2]
 800efd4:	9301      	str	r3, [sp, #4]
 800efd6:	9200      	str	r2, [sp, #0]
 800efd8:	460b      	mov	r3, r1
 800efda:	4a18      	ldr	r2, [pc, #96]	; (800f03c <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 800efdc:	2101      	movs	r1, #1
 800efde:	2000      	movs	r0, #0
 800efe0:	f7f2 fe8c 	bl	8001cfc <logApplication>
    switch(p_wireless_info->StackType)
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	7a5b      	ldrb	r3, [r3, #9]
 800efe8:	2b11      	cmp	r3, #17
 800efea:	d009      	beq.n	800f000 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 800efec:	2b50      	cmp	r3, #80	; 0x50
 800efee:	d00d      	beq.n	800f00c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 800eff0:	2b10      	cmp	r3, #16
 800eff2:	d111      	bne.n	800f018 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 800eff4:	4a12      	ldr	r2, [pc, #72]	; (800f040 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 800eff6:	2101      	movs	r1, #1
 800eff8:	2000      	movs	r0, #0
 800effa:	f7f2 fe7f 	bl	8001cfc <logApplication>
      break;
 800effe:	e010      	b.n	800f022 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 800f000:	4a10      	ldr	r2, [pc, #64]	; (800f044 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 800f002:	2101      	movs	r1, #1
 800f004:	2000      	movs	r0, #0
 800f006:	f7f2 fe79 	bl	8001cfc <logApplication>
      break;
 800f00a:	e00a      	b.n	800f022 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800f00c:	4a0e      	ldr	r2, [pc, #56]	; (800f048 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 800f00e:	2101      	movs	r1, #1
 800f010:	2000      	movs	r0, #0
 800f012:	f7f2 fe73 	bl	8001cfc <logApplication>
      break;
 800f016:	e004      	b.n	800f022 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800f018:	2101      	movs	r1, #1
 800f01a:	2007      	movs	r0, #7
 800f01c:	f7ff fe58 	bl	800ecd0 <APP_THREAD_Error>
      break;
 800f020:	bf00      	nop
    APP_DBG("**********************************************************");
 800f022:	4a04      	ldr	r2, [pc, #16]	; (800f034 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 800f024:	2101      	movs	r1, #1
 800f026:	2000      	movs	r0, #0
 800f028:	f7f2 fe68 	bl	8001cfc <logApplication>
}
 800f02c:	bf00      	nop
 800f02e:	3718      	adds	r7, #24
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	08010a90 	.word	0x08010a90
 800f038:	08010acc 	.word	0x08010acc
 800f03c:	08010ae8 	.word	0x08010ae8
 800f040:	08010b00 	.word	0x08010b00
 800f044:	08010b18 	.word	0x08010b18
 800f048:	08010b30 	.word	0x08010b30

0800f04c <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800f054:	f04f 32ff 	mov.w	r2, #4294967295
 800f058:	2101      	movs	r1, #1
 800f05a:	2001      	movs	r0, #1
 800f05c:	f7fb ff84 	bl	800af68 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 800f060:	f000 fb34 	bl	800f6cc <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800f064:	e7f6      	b.n	800f054 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

0800f066 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 800f066:	b580      	push	{r7, lr}
 800f068:	b082      	sub	sp, #8
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800f06e:	f04f 32ff 	mov.w	r2, #4294967295
 800f072:	2101      	movs	r1, #1
 800f074:	2001      	movs	r0, #1
 800f076:	f7fb ff77 	bl	800af68 <osThreadFlagsWait>
    Send_CLI_To_M0();
 800f07a:	f000 faa9 	bl	800f5d0 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800f07e:	e7f6      	b.n	800f06e <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0800f080 <APP_THREAD_CoapNodeSpotRequestHandler>:
//}

static void APP_THREAD_CoapNodeSpotRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 800f080:	b580      	push	{r7, lr}
 800f082:	b08a      	sub	sp, #40	; 0x28
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
 800f08c:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		struct MeasMsg receivedMeasMsg;
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedMeasMsg, sizeof(receivedMeasMsg))
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7fb f935 	bl	800a2fe <otMessageGetOffset>
 800f094:	4603      	mov	r3, r0
 800f096:	4619      	mov	r1, r3
 800f098:	f107 0214 	add.w	r2, r7, #20
 800f09c:	2314      	movs	r3, #20
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7fb f992 	bl	800a3c8 <otMessageRead>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b14      	cmp	r3, #20
 800f0a8:	d119      	bne.n	800f0de <APP_THREAD_CoapNodeSpotRequestHandler+0x5e>
				== sizeof(receivedMeasMsg)) {


			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 800f0aa:	68b8      	ldr	r0, [r7, #8]
 800f0ac:	f7fa fd60 	bl	8009b70 <otCoapHeaderGetCode>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	d109      	bne.n	800f0ca <APP_THREAD_CoapNodeSpotRequestHandler+0x4a>
			{
				measMsgReceivedFromNode(&receivedMeasMsg);
 800f0b6:	f107 0314 	add.w	r3, r7, #20
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7f2 fc20 	bl	8001900 <measMsgReceivedFromNode>
				toggleLed(0,0,1);
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	f7f2 f913 	bl	80012f0 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800f0ca:	68b8      	ldr	r0, [r7, #8]
 800f0cc:	f7fa fd22 	bl	8009b14 <otCoapHeaderGetType>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d103      	bne.n	800f0de <APP_THREAD_CoapNodeSpotRequestHandler+0x5e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 800f0d6:	6839      	ldr	r1, [r7, #0]
 800f0d8:	68b8      	ldr	r0, [r7, #8]
 800f0da:	f000 f851 	bl	800f180 <APP_THREAD_CoapSendDataResponse>
			}

		}
}
 800f0de:	bf00      	nop
 800f0e0:	3728      	adds	r7, #40	; 0x28
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
	...

0800f0e8 <APP_THREAD_CoapNodeCalRequestHandler>:

struct CalMsg receivedCalMsg;
static void APP_THREAD_CoapNodeCalRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b086      	sub	sp, #24
 800f0ec:	af02      	add	r7, sp, #8
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedCalMsg, sizeof(receivedCalMsg))
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7fb f901 	bl	800a2fe <otMessageGetOffset>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	4619      	mov	r1, r3
 800f100:	230c      	movs	r3, #12
 800f102:	4a1e      	ldr	r2, [pc, #120]	; (800f17c <APP_THREAD_CoapNodeCalRequestHandler+0x94>)
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f7fb f95f 	bl	800a3c8 <otMessageRead>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b0c      	cmp	r3, #12
 800f10e:	d131      	bne.n	800f174 <APP_THREAD_CoapNodeCalRequestHandler+0x8c>
				== sizeof(receivedCalMsg)) {

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 800f110:	68b8      	ldr	r0, [r7, #8]
 800f112:	f7fa fd2d 	bl	8009b70 <otCoapHeaderGetCode>
 800f116:	4603      	mov	r3, r0
 800f118:	2b03      	cmp	r3, #3
 800f11a:	d107      	bne.n	800f12c <APP_THREAD_CoapNodeCalRequestHandler+0x44>
			{
				if(receivedCalMsg.cal_fcn == CALIBRATION_START_COMMAND){
 800f11c:	4b17      	ldr	r3, [pc, #92]	; (800f17c <APP_THREAD_CoapNodeCalRequestHandler+0x94>)
 800f11e:	789b      	ldrb	r3, [r3, #2]
 800f120:	2b01      	cmp	r3, #1
					// TODO: start calibration

				}else if(receivedCalMsg.cal_fcn == CALIBRATION_STOP_COMMAND){
					// TODO: stop calibration
				}
				toggleLed(0,0,1);
 800f122:	2201      	movs	r2, #1
 800f124:	2100      	movs	r1, #0
 800f126:	2000      	movs	r0, #0
 800f128:	f7f2 f8e2 	bl	80012f0 <toggleLed>
			}

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 800f12c:	68b8      	ldr	r0, [r7, #8]
 800f12e:	f7fa fd1f 	bl	8009b70 <otCoapHeaderGetCode>
 800f132:	4603      	mov	r3, r0
 800f134:	2b01      	cmp	r3, #1
 800f136:	d113      	bne.n	800f160 <APP_THREAD_CoapNodeCalRequestHandler+0x78>
			{
				if(receivedCalMsg.cal_fcn == CALIBRATION_GET_MEAS){
 800f138:	4b10      	ldr	r3, [pc, #64]	; (800f17c <APP_THREAD_CoapNodeCalRequestHandler+0x94>)
 800f13a:	789b      	ldrb	r3, [r3, #2]
 800f13c:	2b02      	cmp	r3, #2
 800f13e:	d10a      	bne.n	800f156 <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
					// send measurement to Spotlight
					// 		TODO this can be done in an ACK but doing it now in a separate PUT request to the nodeSpot resource
					sendPowerMeasurement(pMessageInfo->mPeerAddr, receivedCalMsg.angle_1, receivedCalMsg.angle_2);
 800f140:	4b0e      	ldr	r3, [pc, #56]	; (800f17c <APP_THREAD_CoapNodeCalRequestHandler+0x94>)
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	4b0d      	ldr	r3, [pc, #52]	; (800f17c <APP_THREAD_CoapNodeCalRequestHandler+0x94>)
 800f146:	6899      	ldr	r1, [r3, #8]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	9101      	str	r1, [sp, #4]
 800f14c:	9200      	str	r2, [sp, #0]
 800f14e:	3310      	adds	r3, #16
 800f150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f152:	f7f2 fbff 	bl	8001954 <sendPowerMeasurement>
				}
				toggleLed(1,0,0);
 800f156:	2200      	movs	r2, #0
 800f158:	2100      	movs	r1, #0
 800f15a:	2001      	movs	r0, #1
 800f15c:	f7f2 f8c8 	bl	80012f0 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800f160:	68b8      	ldr	r0, [r7, #8]
 800f162:	f7fa fcd7 	bl	8009b14 <otCoapHeaderGetType>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d103      	bne.n	800f174 <APP_THREAD_CoapNodeCalRequestHandler+0x8c>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	68b8      	ldr	r0, [r7, #8]
 800f170:	f000 f806 	bl	800f180 <APP_THREAD_CoapSendDataResponse>
//
//		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
//			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
//		}

}
 800f174:	bf00      	nop
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	20004ecc 	.word	0x20004ecc

0800f180 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 800f180:	b590      	push	{r4, r7, lr}
 800f182:	b085      	sub	sp, #20
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 800f18a:	2300      	movs	r3, #0
 800f18c:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 800f18e:	4a25      	ldr	r2, [pc, #148]	; (800f224 <APP_THREAD_CoapSendDataResponse+0xa4>)
 800f190:	2101      	movs	r1, #1
 800f192:	2000      	movs	r0, #0
 800f194:	f7f2 fdb2 	bl	8001cfc <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 800f198:	2244      	movs	r2, #68	; 0x44
 800f19a:	2120      	movs	r1, #32
 800f19c:	4822      	ldr	r0, [pc, #136]	; (800f228 <APP_THREAD_CoapSendDataResponse+0xa8>)
 800f19e:	f7fa fb5d 	bl	800985c <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7fa fd12 	bl	8009bcc <otCoapHeaderGetMessageId>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	481e      	ldr	r0, [pc, #120]	; (800f228 <APP_THREAD_CoapSendDataResponse+0xa8>)
 800f1ae:	f7fa fc81 	bl	8009ab4 <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7fa fd66 	bl	8009c84 <otCoapHeaderGetToken>
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7fa fd34 	bl	8009c28 <otCoapHeaderGetTokenLength>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	4818      	ldr	r0, [pc, #96]	; (800f228 <APP_THREAD_CoapSendDataResponse+0xa8>)
 800f1c8:	f7fa fb7d 	bl	80098c6 <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800f1cc:	4916      	ldr	r1, [pc, #88]	; (800f228 <APP_THREAD_CoapSendDataResponse+0xa8>)
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	f7fa fd85 	bl	8009cde <otCoapNewMessage>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	4b15      	ldr	r3, [pc, #84]	; (800f22c <APP_THREAD_CoapSendDataResponse+0xac>)
 800f1d8:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 800f1da:	4b14      	ldr	r3, [pc, #80]	; (800f22c <APP_THREAD_CoapSendDataResponse+0xac>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d106      	bne.n	800f1f0 <APP_THREAD_CoapSendDataResponse+0x70>
    {
      APP_DBG("WARNING : pOT_Message = NULL ! -> exit now");
 800f1e2:	4a13      	ldr	r2, [pc, #76]	; (800f230 <APP_THREAD_CoapSendDataResponse+0xb0>)
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	f7f2 fd88 	bl	8001cfc <logApplication>
      break;
 800f1ec:	bf00      	nop
    {
      otMessageFree(pOT_Message);
//      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 800f1ee:	e014      	b.n	800f21a <APP_THREAD_CoapSendDataResponse+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 800f1f0:	4b0e      	ldr	r3, [pc, #56]	; (800f22c <APP_THREAD_CoapSendDataResponse+0xac>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	f7fa fe37 	bl	8009e6c <otCoapSendResponse>
 800f1fe:	4603      	mov	r3, r0
 800f200:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800f202:	7bfb      	ldrb	r3, [r7, #15]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d008      	beq.n	800f21a <APP_THREAD_CoapSendDataResponse+0x9a>
 800f208:	4b08      	ldr	r3, [pc, #32]	; (800f22c <APP_THREAD_CoapSendDataResponse+0xac>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d004      	beq.n	800f21a <APP_THREAD_CoapSendDataResponse+0x9a>
      otMessageFree(pOT_Message);
 800f210:	4b06      	ldr	r3, [pc, #24]	; (800f22c <APP_THREAD_CoapSendDataResponse+0xac>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4618      	mov	r0, r3
 800f216:	f7fb f847 	bl	800a2a8 <otMessageFree>
}
 800f21a:	bf00      	nop
 800f21c:	3714      	adds	r7, #20
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd90      	pop	{r4, r7, pc}
 800f222:	bf00      	nop
 800f224:	08010b5c 	.word	0x08010b5c
 800f228:	20004abc 	.word	0x20004abc
 800f22c:	20004a6c 	.word	0x20004a6c
 800f230:	08010b94 	.word	0x08010b94

0800f234 <APP_THREAD_SendCoapMsg>:
//		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
//	}
//}

void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, const char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 800f234:	b590      	push	{r4, r7, lr}
 800f236:	b087      	sub	sp, #28
 800f238:	af02      	add	r7, sp, #8
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	607a      	str	r2, [r7, #4]
 800f23e:	603b      	str	r3, [r7, #0]
 800f240:	460b      	mov	r3, r1
 800f242:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 800f244:	2000      	movs	r0, #0
 800f246:	f7fb fc38 	bl	800aaba <otThreadGetRloc16>
 800f24a:	4603      	mov	r3, r0
 800f24c:	461a      	mov	r2, r3
 800f24e:	4b7e      	ldr	r3, [pc, #504]	; (800f448 <APP_THREAD_SendCoapMsg+0x214>)
 800f250:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 800f252:	2000      	movs	r0, #0
 800f254:	f7fa ff46 	bl	800a0e4 <otIp6GetUnicastAddresses>
 800f258:	4602      	mov	r2, r0
 800f25a:	4b7c      	ldr	r3, [pc, #496]	; (800f44c <APP_THREAD_SendCoapMsg+0x218>)
 800f25c:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 800f25e:	2000      	movs	r0, #0
 800f260:	f7fa ff13 	bl	800a08a <otIp6IsEnabled>
 800f264:	4603      	mov	r3, r0
 800f266:	461a      	mov	r2, r3
 800f268:	4b79      	ldr	r3, [pc, #484]	; (800f450 <APP_THREAD_SendCoapMsg+0x21c>)
 800f26a:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 800f26c:	2000      	movs	r0, #0
 800f26e:	f7fa ff61 	bl	800a134 <otIp6GetMulticastAddresses>
 800f272:	4602      	mov	r2, r0
 800f274:	4b77      	ldr	r3, [pc, #476]	; (800f454 <APP_THREAD_SendCoapMsg+0x220>)
 800f276:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 800f278:	2000      	movs	r0, #0
 800f27a:	f7fb fb76 	bl	800a96a <otThreadGetMeshLocalEid>
 800f27e:	4602      	mov	r2, r0
 800f280:	4b75      	ldr	r3, [pc, #468]	; (800f458 <APP_THREAD_SendCoapMsg+0x224>)
 800f282:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 800f284:	2000      	movs	r0, #0
 800f286:	f7fb fb98 	bl	800a9ba <otThreadGetLinkLocalIp6Address>
 800f28a:	4602      	mov	r2, r0
 800f28c:	4b73      	ldr	r3, [pc, #460]	; (800f45c <APP_THREAD_SendCoapMsg+0x228>)
 800f28e:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800f290:	222c      	movs	r2, #44	; 0x2c
 800f292:	2100      	movs	r1, #0
 800f294:	4872      	ldr	r0, [pc, #456]	; (800f460 <APP_THREAD_SendCoapMsg+0x22c>)
 800f296:	f001 fac0 	bl	801081a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 800f29a:	897b      	ldrh	r3, [r7, #10]
 800f29c:	2b64      	cmp	r3, #100	; 0x64
 800f29e:	d914      	bls.n	800f2ca <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 800f2a0:	4b6f      	ldr	r3, [pc, #444]	; (800f460 <APP_THREAD_SendCoapMsg+0x22c>)
 800f2a2:	4a70      	ldr	r2, [pc, #448]	; (800f464 <APP_THREAD_SendCoapMsg+0x230>)
 800f2a4:	f103 0410 	add.w	r4, r3, #16
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f2ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	f7fb fb5a 	bl	800a96a <otThreadGetMeshLocalEid>
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	4b69      	ldr	r3, [pc, #420]	; (800f460 <APP_THREAD_SendCoapMsg+0x22c>)
 800f2ba:	461c      	mov	r4, r3
 800f2bc:	4613      	mov	r3, r2
 800f2be:	6818      	ldr	r0, [r3, #0]
 800f2c0:	6859      	ldr	r1, [r3, #4]
 800f2c2:	689a      	ldr	r2, [r3, #8]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2c8:	e015      	b.n	800f2f6 <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 800f2ca:	4b65      	ldr	r3, [pc, #404]	; (800f460 <APP_THREAD_SendCoapMsg+0x22c>)
 800f2cc:	4a66      	ldr	r2, [pc, #408]	; (800f468 <APP_THREAD_SendCoapMsg+0x234>)
 800f2ce:	f103 0410 	add.w	r4, r3, #16
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	6818      	ldr	r0, [r3, #0]
 800f2d6:	6859      	ldr	r1, [r3, #4]
 800f2d8:	689a      	ldr	r2, [r3, #8]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800f2de:	2000      	movs	r0, #0
 800f2e0:	f7fb fb43 	bl	800a96a <otThreadGetMeshLocalEid>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	4b5e      	ldr	r3, [pc, #376]	; (800f460 <APP_THREAD_SendCoapMsg+0x22c>)
 800f2e8:	461c      	mov	r4, r3
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	6818      	ldr	r0, [r3, #0]
 800f2ee:	6859      	ldr	r1, [r3, #4]
 800f2f0:	689a      	ldr	r2, [r3, #8]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 800f2f6:	4b5a      	ldr	r3, [pc, #360]	; (800f460 <APP_THREAD_SendCoapMsg+0x22c>)
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800f2fe:	4b58      	ldr	r3, [pc, #352]	; (800f460 <APP_THREAD_SendCoapMsg+0x22c>)
 800f300:	f241 6233 	movw	r2, #5683	; 0x1633
 800f304:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 800f306:	4b56      	ldr	r3, [pc, #344]	; (800f460 <APP_THREAD_SendCoapMsg+0x22c>)
 800f308:	2240      	movs	r2, #64	; 0x40
 800f30a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 800f30e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d009      	beq.n	800f32a <APP_THREAD_SendCoapMsg+0xf6>
 800f316:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f31a:	2b03      	cmp	r3, #3
 800f31c:	d105      	bne.n	800f32a <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 800f31e:	2203      	movs	r2, #3
 800f320:	2100      	movs	r1, #0
 800f322:	4852      	ldr	r0, [pc, #328]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f324:	f7fa fa9a 	bl	800985c <otCoapHeaderInit>
 800f328:	e04a      	b.n	800f3c0 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 800f32a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d009      	beq.n	800f346 <APP_THREAD_SendCoapMsg+0x112>
 800f332:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f336:	2b01      	cmp	r3, #1
 800f338:	d105      	bne.n	800f346 <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 800f33a:	2201      	movs	r2, #1
 800f33c:	2100      	movs	r1, #0
 800f33e:	484b      	ldr	r0, [pc, #300]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f340:	f7fa fa8c 	bl	800985c <otCoapHeaderInit>
 800f344:	e03c      	b.n	800f3c0 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 800f346:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d009      	beq.n	800f362 <APP_THREAD_SendCoapMsg+0x12e>
 800f34e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f352:	2b02      	cmp	r3, #2
 800f354:	d105      	bne.n	800f362 <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 800f356:	2202      	movs	r2, #2
 800f358:	2100      	movs	r1, #0
 800f35a:	4844      	ldr	r0, [pc, #272]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f35c:	f7fa fa7e 	bl	800985c <otCoapHeaderInit>
 800f360:	e02e      	b.n	800f3c0 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 800f362:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d109      	bne.n	800f37e <APP_THREAD_SendCoapMsg+0x14a>
 800f36a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f36e:	2b03      	cmp	r3, #3
 800f370:	d105      	bne.n	800f37e <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800f372:	2203      	movs	r2, #3
 800f374:	2110      	movs	r1, #16
 800f376:	483d      	ldr	r0, [pc, #244]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f378:	f7fa fa70 	bl	800985c <otCoapHeaderInit>
 800f37c:	e020      	b.n	800f3c0 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 800f37e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d109      	bne.n	800f39a <APP_THREAD_SendCoapMsg+0x166>
 800f386:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d105      	bne.n	800f39a <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 800f38e:	2201      	movs	r2, #1
 800f390:	2110      	movs	r1, #16
 800f392:	4836      	ldr	r0, [pc, #216]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f394:	f7fa fa62 	bl	800985c <otCoapHeaderInit>
 800f398:	e012      	b.n	800f3c0 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 800f39a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d109      	bne.n	800f3b6 <APP_THREAD_SendCoapMsg+0x182>
 800f3a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3a6:	2b02      	cmp	r3, #2
 800f3a8:	d105      	bne.n	800f3b6 <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 800f3aa:	2202      	movs	r2, #2
 800f3ac:	2110      	movs	r1, #16
 800f3ae:	482f      	ldr	r0, [pc, #188]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f3b0:	f7fa fa54 	bl	800985c <otCoapHeaderInit>
 800f3b4:	e004      	b.n	800f3c0 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 800f3b6:	2102      	movs	r1, #2
 800f3b8:	482c      	ldr	r0, [pc, #176]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f3ba:	f7fa fab8 	bl	800992e <otCoapHeaderGenerateToken>
 800f3be:	e040      	b.n	800f442 <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 800f3c0:	6839      	ldr	r1, [r7, #0]
 800f3c2:	482a      	ldr	r0, [pc, #168]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f3c4:	f7fa fb16 	bl	80099f4 <otCoapHeaderAppendUriPathOptions>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	4b28      	ldr	r3, [pc, #160]	; (800f470 <APP_THREAD_SendCoapMsg+0x23c>)
 800f3ce:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 800f3d0:	212a      	movs	r1, #42	; 0x2a
 800f3d2:	4826      	ldr	r0, [pc, #152]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f3d4:	f7fa fadb 	bl	800998e <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 800f3d8:	897b      	ldrh	r3, [r7, #10]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 800f3de:	4823      	ldr	r0, [pc, #140]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f3e0:	f7fa fb3a 	bl	8009a58 <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800f3e4:	4921      	ldr	r1, [pc, #132]	; (800f46c <APP_THREAD_SendCoapMsg+0x238>)
 800f3e6:	2000      	movs	r0, #0
 800f3e8:	f7fa fc79 	bl	8009cde <otCoapNewMessage>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	4b21      	ldr	r3, [pc, #132]	; (800f474 <APP_THREAD_SendCoapMsg+0x240>)
 800f3f0:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 800f3f2:	897b      	ldrh	r3, [r7, #10]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00a      	beq.n	800f40e <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 800f3f8:	4b1e      	ldr	r3, [pc, #120]	; (800f474 <APP_THREAD_SendCoapMsg+0x240>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	897a      	ldrh	r2, [r7, #10]
 800f3fe:	68f9      	ldr	r1, [r7, #12]
 800f400:	4618      	mov	r0, r3
 800f402:	f7fa ffaa 	bl	800a35a <otMessageAppend>
 800f406:	4603      	mov	r3, r0
 800f408:	461a      	mov	r2, r3
 800f40a:	4b19      	ldr	r3, [pc, #100]	; (800f470 <APP_THREAD_SendCoapMsg+0x23c>)
 800f40c:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 800f40e:	4b19      	ldr	r3, [pc, #100]	; (800f474 <APP_THREAD_SendCoapMsg+0x240>)
 800f410:	6819      	ldr	r1, [r3, #0]
 800f412:	2300      	movs	r3, #0
 800f414:	9300      	str	r3, [sp, #0]
 800f416:	2300      	movs	r3, #0
 800f418:	4a11      	ldr	r2, [pc, #68]	; (800f460 <APP_THREAD_SendCoapMsg+0x22c>)
 800f41a:	2000      	movs	r0, #0
 800f41c:	f7fa fc8d 	bl	8009d3a <otCoapSendRequest>
 800f420:	4603      	mov	r3, r0
 800f422:	461a      	mov	r2, r3
 800f424:	4b12      	ldr	r3, [pc, #72]	; (800f470 <APP_THREAD_SendCoapMsg+0x23c>)
 800f426:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 800f428:	4b11      	ldr	r3, [pc, #68]	; (800f470 <APP_THREAD_SendCoapMsg+0x23c>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d008      	beq.n	800f442 <APP_THREAD_SendCoapMsg+0x20e>
 800f430:	4b10      	ldr	r3, [pc, #64]	; (800f474 <APP_THREAD_SendCoapMsg+0x240>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d004      	beq.n	800f442 <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 800f438:	4b0e      	ldr	r3, [pc, #56]	; (800f474 <APP_THREAD_SendCoapMsg+0x240>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fa ff33 	bl	800a2a8 <otMessageFree>
		}

	} while (false);
}
 800f442:	3714      	adds	r7, #20
 800f444:	46bd      	mov	sp, r7
 800f446:	bd90      	pop	{r4, r7, pc}
 800f448:	20004edc 	.word	0x20004edc
 800f44c:	20004ee0 	.word	0x20004ee0
 800f450:	20004ec0 	.word	0x20004ec0
 800f454:	20004ea8 	.word	0x20004ea8
 800f458:	20004ed8 	.word	0x20004ed8
 800f45c:	20004eac 	.word	0x20004eac
 800f460:	20004a90 	.word	0x20004a90
 800f464:	20004a78 	.word	0x20004a78
 800f468:	20004eb0 	.word	0x20004eb0
 800f46c:	20004abc 	.word	0x20004abc
 800f470:	20004a70 	.word	0x20004a70
 800f474:	20004a6c 	.word	0x20004a6c

0800f478 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 800f480:	4a04      	ldr	r2, [pc, #16]	; (800f494 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6013      	str	r3, [r2, #0]
}
 800f486:	bf00      	nop
 800f488:	370c      	adds	r7, #12
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	20004a54 	.word	0x20004a54

0800f498 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 800f498:	b480      	push	{r7}
 800f49a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800f49c:	4b03      	ldr	r3, [pc, #12]	; (800f4ac <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	330c      	adds	r3, #12
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr
 800f4ac:	20004a54 	.word	0x20004a54

0800f4b0 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800f4b4:	4b03      	ldr	r3, [pc, #12]	; (800f4c4 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	330b      	adds	r3, #11
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr
 800f4c4:	20004a54 	.word	0x20004a54

0800f4c8 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800f4cc:	4b03      	ldr	r3, [pc, #12]	; (800f4dc <THREAD_Get_NotificationPayloadBuffer+0x14>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	330b      	adds	r3, #11
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr
 800f4dc:	20004a58 	.word	0x20004a58

0800f4e0 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800f4e6:	4b0f      	ldr	r3, [pc, #60]	; (800f524 <Ot_Cmd_Transfer+0x44>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f4f0:	725a      	strb	r2, [r3, #9]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f042 0202 	orr.w	r2, r2, #2
 800f4f8:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800f4fa:	4b0a      	ldr	r3, [pc, #40]	; (800f524 <Ot_Cmd_Transfer+0x44>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	330c      	adds	r3, #12
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	3302      	adds	r3, #2
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800f508:	4b06      	ldr	r3, [pc, #24]	; (800f524 <Ot_Cmd_Transfer+0x44>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	b2d2      	uxtb	r2, r2
 800f510:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 800f512:	f7fa f84d 	bl	80095b0 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800f516:	f000 f829 	bl	800f56c <Wait_Getting_Ack_From_M0>
}
 800f51a:	bf00      	nop
 800f51c:	3708      	adds	r7, #8
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	20004a54 	.word	0x20004a54

0800f528 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800f530:	f000 f82e 	bl	800f590 <Receive_Ack_From_M0>
}
 800f534:	bf00      	nop
 800f536:	3708      	adds	r7, #8
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 800f544:	4a04      	ldr	r2, [pc, #16]	; (800f558 <TL_THREAD_NotReceived+0x1c>)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800f54a:	f000 f82d 	bl	800f5a8 <Receive_Notification_From_M0>
}
 800f54e:	bf00      	nop
 800f550:	3708      	adds	r7, #8
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	20004a58 	.word	0x20004a58

0800f55c <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 800f55c:	b480      	push	{r7}
 800f55e:	af00      	add	r7, sp, #0

}
 800f560:	bf00      	nop
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr
	...

0800f56c <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 800f56c:	b480      	push	{r7}
 800f56e:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 800f570:	bf00      	nop
 800f572:	4b06      	ldr	r3, [pc, #24]	; (800f58c <Wait_Getting_Ack_From_M0+0x20>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d0fb      	beq.n	800f572 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 800f57a:	4b04      	ldr	r3, [pc, #16]	; (800f58c <Wait_Getting_Ack_From_M0+0x20>)
 800f57c:	2200      	movs	r2, #0
 800f57e:	601a      	str	r2, [r3, #0]
}
 800f580:	bf00      	nop
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	20004a60 	.word	0x20004a60

0800f590 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 800f590:	b480      	push	{r7}
 800f592:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 800f594:	4b03      	ldr	r3, [pc, #12]	; (800f5a4 <Receive_Ack_From_M0+0x14>)
 800f596:	2201      	movs	r2, #1
 800f598:	601a      	str	r2, [r3, #0]
}
 800f59a:	bf00      	nop
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr
 800f5a4:	20004a60 	.word	0x20004a60

0800f5a8 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 800f5ac:	4b06      	ldr	r3, [pc, #24]	; (800f5c8 <Receive_Notification_From_M0+0x20>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	4a05      	ldr	r2, [pc, #20]	; (800f5c8 <Receive_Notification_From_M0+0x20>)
 800f5b4:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800f5b6:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <Receive_Notification_From_M0+0x24>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2101      	movs	r1, #1
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fb fc71 	bl	800aea4 <osThreadFlagsSet>
}
 800f5c2:	bf00      	nop
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	20004a5c 	.word	0x20004a5c
 800f5cc:	20004a64 	.word	0x20004a64

0800f5d0 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 800f5d4:	22ff      	movs	r2, #255	; 0xff
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	4812      	ldr	r0, [pc, #72]	; (800f624 <Send_CLI_To_M0+0x54>)
 800f5da:	f001 f91e 	bl	801081a <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 800f5de:	4b12      	ldr	r3, [pc, #72]	; (800f628 <Send_CLI_To_M0+0x58>)
 800f5e0:	881b      	ldrh	r3, [r3, #0]
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	4911      	ldr	r1, [pc, #68]	; (800f62c <Send_CLI_To_M0+0x5c>)
 800f5e8:	480e      	ldr	r0, [pc, #56]	; (800f624 <Send_CLI_To_M0+0x54>)
 800f5ea:	f001 f90b 	bl	8010804 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800f5ee:	4b0e      	ldr	r3, [pc, #56]	; (800f628 <Send_CLI_To_M0+0x58>)
 800f5f0:	881b      	ldrh	r3, [r3, #0]
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	4b0e      	ldr	r3, [pc, #56]	; (800f630 <Send_CLI_To_M0+0x60>)
 800f5f8:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 800f5fa:	4b0d      	ldr	r3, [pc, #52]	; (800f630 <Send_CLI_To_M0+0x60>)
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	725a      	strb	r2, [r3, #9]
 800f600:	2200      	movs	r2, #0
 800f602:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 800f604:	4b0b      	ldr	r3, [pc, #44]	; (800f634 <Send_CLI_To_M0+0x64>)
 800f606:	2200      	movs	r2, #0
 800f608:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 800f60a:	4b07      	ldr	r3, [pc, #28]	; (800f628 <Send_CLI_To_M0+0x58>)
 800f60c:	2200      	movs	r2, #0
 800f60e:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800f610:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f614:	2100      	movs	r1, #0
 800f616:	4805      	ldr	r0, [pc, #20]	; (800f62c <Send_CLI_To_M0+0x5c>)
 800f618:	f001 f8ff 	bl	801081a <memset>

  TL_CLI_SendCmd();
 800f61c:	f7f9 ffd6 	bl	80095cc <TL_CLI_SendCmd>
}
 800f620:	bf00      	nop
 800f622:	bd80      	pop	{r7, pc}
 800f624:	20030a58 	.word	0x20030a58
 800f628:	20004a50 	.word	0x20004a50
 800f62c:	20004950 	.word	0x20004950
 800f630:	20030a4c 	.word	0x20030a4c
 800f634:	20004a52 	.word	0x20004a52

0800f638 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800f63c:	f7f9 ffe2 	bl	8009604 <TL_THREAD_CliSendAck>
}
 800f640:	bf00      	nop
 800f642:	bd80      	pop	{r7, pc}

0800f644 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 800f648:	4a04      	ldr	r2, [pc, #16]	; (800f65c <APP_THREAD_Init_UART_CLI+0x18>)
 800f64a:	2100      	movs	r1, #0
 800f64c:	4804      	ldr	r0, [pc, #16]	; (800f660 <APP_THREAD_Init_UART_CLI+0x1c>)
 800f64e:	f7fb fb83 	bl	800ad58 <osThreadNew>
 800f652:	4602      	mov	r2, r0
 800f654:	4b03      	ldr	r3, [pc, #12]	; (800f664 <APP_THREAD_Init_UART_CLI+0x20>)
 800f656:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 800f658:	bf00      	nop
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	08010d18 	.word	0x08010d18
 800f660:	0800f067 	.word	0x0800f067
 800f664:	20004a68 	.word	0x20004a68

0800f668 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 800f66c:	4b06      	ldr	r3, [pc, #24]	; (800f688 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800f66e:	4a07      	ldr	r2, [pc, #28]	; (800f68c <APP_THREAD_TL_THREAD_INIT+0x24>)
 800f670:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800f672:	4b05      	ldr	r3, [pc, #20]	; (800f688 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800f674:	4a06      	ldr	r2, [pc, #24]	; (800f690 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800f676:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800f678:	4b03      	ldr	r3, [pc, #12]	; (800f688 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800f67a:	4a06      	ldr	r2, [pc, #24]	; (800f694 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 800f67c:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 800f67e:	4802      	ldr	r0, [pc, #8]	; (800f688 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800f680:	f7f9 ff7a 	bl	8009578 <TL_THREAD_Init>
}
 800f684:	bf00      	nop
 800f686:	bd80      	pop	{r7, pc}
 800f688:	200300d4 	.word	0x200300d4
 800f68c:	20030834 	.word	0x20030834
 800f690:	20030940 	.word	0x20030940
 800f694:	20030a4c 	.word	0x20030a4c

0800f698 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	7adb      	ldrb	r3, [r3, #11]
 800f6a8:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	330c      	adds	r3, #12
 800f6ae:	4906      	ldr	r1, [pc, #24]	; (800f6c8 <TL_THREAD_CliNotReceived+0x30>)
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7f0 fd65 	bl	8000180 <strcmp>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d101      	bne.n	800f6c0 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 800f6bc:	f7ff ffbc 	bl	800f638 <Send_CLI_Ack_For_OT>
  }
}
 800f6c0:	bf00      	nop
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	08010bc0 	.word	0x08010bc0

0800f6cc <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 800f6d0:	4b09      	ldr	r3, [pc, #36]	; (800f6f8 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00d      	beq.n	800f6f4 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 800f6d8:	4b07      	ldr	r3, [pc, #28]	; (800f6f8 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d904      	bls.n	800f6ea <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 800f6e0:	2100      	movs	r1, #0
 800f6e2:	2000      	movs	r0, #0
 800f6e4:	f7ff faf4 	bl	800ecd0 <APP_THREAD_Error>
 800f6e8:	e001      	b.n	800f6ee <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 800f6ea:	f7fa fea9 	bl	800a440 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 800f6ee:	4b02      	ldr	r3, [pc, #8]	; (800f6f8 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	601a      	str	r2, [r3, #0]
  }
}
 800f6f4:	bf00      	nop
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	20004a5c 	.word	0x20004a5c

0800f6fc <LL_PWR_EnableBootC2>:
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f700:	4b05      	ldr	r3, [pc, #20]	; (800f718 <LL_PWR_EnableBootC2+0x1c>)
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	4a04      	ldr	r2, [pc, #16]	; (800f718 <LL_PWR_EnableBootC2+0x1c>)
 800f706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f70a:	60d3      	str	r3, [r2, #12]
}
 800f70c:	bf00      	nop
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	58000400 	.word	0x58000400

0800f71c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f724:	4b06      	ldr	r3, [pc, #24]	; (800f740 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f726:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800f72a:	4905      	ldr	r1, [pc, #20]	; (800f740 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4313      	orrs	r3, r2
 800f730:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800f734:	bf00      	nop
 800f736:	370c      	adds	r7, #12
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr
 800f740:	58000800 	.word	0x58000800

0800f744 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f74c:	4b05      	ldr	r3, [pc, #20]	; (800f764 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f74e:	6a1a      	ldr	r2, [r3, #32]
 800f750:	4904      	ldr	r1, [pc, #16]	; (800f764 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4313      	orrs	r3, r2
 800f756:	620b      	str	r3, [r1, #32]
}
 800f758:	bf00      	nop
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr
 800f764:	58000800 	.word	0x58000800

0800f768 <LL_AHB3_GRP1_EnableClock>:
{
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4013      	ands	r3, r2
 800f78a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f78c:	68fb      	ldr	r3, [r7, #12]
}
 800f78e:	bf00      	nop
 800f790:	3714      	adds	r7, #20
 800f792:	46bd      	mov	sp, r7
 800f794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f798:	4770      	bx	lr

0800f79a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f79a:	b480      	push	{r7}
 800f79c:	b085      	sub	sp, #20
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f7a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f7aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f7b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
}
 800f7c6:	bf00      	nop
 800f7c8:	3714      	adds	r7, #20
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr

0800f7d2 <LL_C1_IPCC_EnableIT_TXF>:
{
 800f7d2:	b480      	push	{r7}
 800f7d4:	b083      	sub	sp, #12
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	601a      	str	r2, [r3, #0]
}
 800f7e6:	bf00      	nop
 800f7e8:	370c      	adds	r7, #12
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <LL_C1_IPCC_EnableIT_RXO>:
{
 800f7f2:	b480      	push	{r7}
 800f7f4:	b083      	sub	sp, #12
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f043 0201 	orr.w	r2, r3, #1
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	601a      	str	r2, [r3, #0]
}
 800f806:	bf00      	nop
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800f812:	b480      	push	{r7}
 800f814:	b083      	sub	sp, #12
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
 800f81a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	685a      	ldr	r2, [r3, #4]
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	041b      	lsls	r3, r3, #16
 800f824:	43db      	mvns	r3, r3
 800f826:	401a      	ands	r2, r3
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	605a      	str	r2, [r3, #4]
}
 800f82c:	bf00      	nop
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	685a      	ldr	r2, [r3, #4]
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	041b      	lsls	r3, r3, #16
 800f84a:	431a      	orrs	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	605a      	str	r2, [r3, #4]
}
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	685a      	ldr	r2, [r3, #4]
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	43db      	mvns	r3, r3
 800f86e:	401a      	ands	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	605a      	str	r2, [r3, #4]
}
 800f874:	bf00      	nop
 800f876:	370c      	adds	r7, #12
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <LL_C1_IPCC_DisableReceiveChannel>:
{
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	685a      	ldr	r2, [r3, #4]
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	431a      	orrs	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	605a      	str	r2, [r3, #4]
}
 800f896:	bf00      	nop
 800f898:	370c      	adds	r7, #12
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr

0800f8a2 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800f8a2:	b480      	push	{r7}
 800f8a4:	b083      	sub	sp, #12
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
 800f8aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	683a      	ldr	r2, [r7, #0]
 800f8b0:	609a      	str	r2, [r3, #8]
}
 800f8b2:	bf00      	nop
 800f8b4:	370c      	adds	r7, #12
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr

0800f8be <LL_C1_IPCC_SetFlag_CHx>:
{
 800f8be:	b480      	push	{r7}
 800f8c0:	b083      	sub	sp, #12
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
 800f8c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	041a      	lsls	r2, r3, #16
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	609a      	str	r2, [r3, #8]
}
 800f8d0:	bf00      	nop
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	68da      	ldr	r2, [r3, #12]
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	4013      	ands	r3, r2
 800f8ee:	683a      	ldr	r2, [r7, #0]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d101      	bne.n	800f8f8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e000      	b.n	800f8fa <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f8f8:	2300      	movs	r3, #0
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	69da      	ldr	r2, [r3, #28]
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	4013      	ands	r3, r2
 800f918:	683a      	ldr	r2, [r7, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d101      	bne.n	800f922 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f91e:	2301      	movs	r3, #1
 800f920:	e000      	b.n	800f924 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f922:	2300      	movs	r3, #0
}
 800f924:	4618      	mov	r0, r3
 800f926:	370c      	adds	r7, #12
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr

0800f930 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f934:	2102      	movs	r1, #2
 800f936:	482a      	ldr	r0, [pc, #168]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f938:	f7ff ffe5 	bl	800f906 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d009      	beq.n	800f956 <HW_IPCC_Rx_Handler+0x26>
 800f942:	4b27      	ldr	r3, [pc, #156]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	43db      	mvns	r3, r3
 800f948:	f003 0302 	and.w	r3, r3, #2
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d002      	beq.n	800f956 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800f950:	f000 f90a 	bl	800fb68 <HW_IPCC_SYS_EvtHandler>
 800f954:	e041      	b.n	800f9da <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800f956:	2104      	movs	r1, #4
 800f958:	4821      	ldr	r0, [pc, #132]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f95a:	f7ff ffd4 	bl	800f906 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d009      	beq.n	800f978 <HW_IPCC_Rx_Handler+0x48>
 800f964:	4b1e      	ldr	r3, [pc, #120]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	43db      	mvns	r3, r3
 800f96a:	f003 0304 	and.w	r3, r3, #4
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d002      	beq.n	800f978 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800f972:	f000 f953 	bl	800fc1c <HW_IPCC_THREAD_NotEvtHandler>
 800f976:	e030      	b.n	800f9da <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800f978:	2110      	movs	r1, #16
 800f97a:	4819      	ldr	r0, [pc, #100]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f97c:	f7ff ffc3 	bl	800f906 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d009      	beq.n	800f99a <HW_IPCC_Rx_Handler+0x6a>
 800f986:	4b16      	ldr	r3, [pc, #88]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	43db      	mvns	r3, r3
 800f98c:	f003 0310 	and.w	r3, r3, #16
 800f990:	2b00      	cmp	r3, #0
 800f992:	d002      	beq.n	800f99a <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800f994:	f000 f94e 	bl	800fc34 <HW_IPCC_THREAD_CliNotEvtHandler>
 800f998:	e01f      	b.n	800f9da <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f99a:	2101      	movs	r1, #1
 800f99c:	4810      	ldr	r0, [pc, #64]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f99e:	f7ff ffb2 	bl	800f906 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d008      	beq.n	800f9ba <HW_IPCC_Rx_Handler+0x8a>
 800f9a8:	4b0d      	ldr	r3, [pc, #52]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	f003 0301 	and.w	r3, r3, #1
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d102      	bne.n	800f9ba <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800f9b4:	f000 f89c 	bl	800faf0 <HW_IPCC_BLE_EvtHandler>
 800f9b8:	e00f      	b.n	800f9da <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800f9ba:	2108      	movs	r1, #8
 800f9bc:	4808      	ldr	r0, [pc, #32]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f9be:	f7ff ffa2 	bl	800f906 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d009      	beq.n	800f9dc <HW_IPCC_Rx_Handler+0xac>
 800f9c8:	4b05      	ldr	r3, [pc, #20]	; (800f9e0 <HW_IPCC_Rx_Handler+0xb0>)
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	43db      	mvns	r3, r3
 800f9ce:	f003 0308 	and.w	r3, r3, #8
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d002      	beq.n	800f9dc <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800f9d6:	f000 f979 	bl	800fccc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800f9da:	bf00      	nop
 800f9dc:	bf00      	nop
}
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	58000c00 	.word	0x58000c00

0800f9e4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800f9e8:	2102      	movs	r1, #2
 800f9ea:	482b      	ldr	r0, [pc, #172]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800f9ec:	f7ff ff76 	bl	800f8dc <LL_C1_IPCC_IsActiveFlag_CHx>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d109      	bne.n	800fa0a <HW_IPCC_Tx_Handler+0x26>
 800f9f6:	4b28      	ldr	r3, [pc, #160]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	43db      	mvns	r3, r3
 800f9fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fa04:	f000 f8a4 	bl	800fb50 <HW_IPCC_SYS_CmdEvtHandler>
 800fa08:	e042      	b.n	800fa90 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800fa0a:	2104      	movs	r1, #4
 800fa0c:	4822      	ldr	r0, [pc, #136]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800fa0e:	f7ff ff65 	bl	800f8dc <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d109      	bne.n	800fa2c <HW_IPCC_Tx_Handler+0x48>
 800fa18:	4b1f      	ldr	r3, [pc, #124]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	43db      	mvns	r3, r3
 800fa1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d002      	beq.n	800fa2c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 800fa26:	f000 f8ed 	bl	800fc04 <HW_IPCC_OT_CmdEvtHandler>
 800fa2a:	e031      	b.n	800fa90 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800fa2c:	2102      	movs	r1, #2
 800fa2e:	481a      	ldr	r0, [pc, #104]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800fa30:	f7ff ff54 	bl	800f8dc <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d109      	bne.n	800fa4e <HW_IPCC_Tx_Handler+0x6a>
 800fa3a:	4b17      	ldr	r3, [pc, #92]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	43db      	mvns	r3, r3
 800fa40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d002      	beq.n	800fa4e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fa48:	f000 f882 	bl	800fb50 <HW_IPCC_SYS_CmdEvtHandler>
 800fa4c:	e020      	b.n	800fa90 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800fa4e:	2108      	movs	r1, #8
 800fa50:	4811      	ldr	r0, [pc, #68]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800fa52:	f7ff ff43 	bl	800f8dc <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d109      	bne.n	800fa70 <HW_IPCC_Tx_Handler+0x8c>
 800fa5c:	4b0e      	ldr	r3, [pc, #56]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	43db      	mvns	r3, r3
 800fa62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d002      	beq.n	800fa70 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 800fa6a:	f000 f911 	bl	800fc90 <HW_IPCC_MM_FreeBufHandler>
 800fa6e:	e00f      	b.n	800fa90 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800fa70:	2120      	movs	r1, #32
 800fa72:	4809      	ldr	r0, [pc, #36]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800fa74:	f7ff ff32 	bl	800f8dc <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d109      	bne.n	800fa92 <HW_IPCC_Tx_Handler+0xae>
 800fa7e:	4b06      	ldr	r3, [pc, #24]	; (800fa98 <HW_IPCC_Tx_Handler+0xb4>)
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	43db      	mvns	r3, r3
 800fa84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d002      	beq.n	800fa92 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800fa8c:	f000 f83c 	bl	800fb08 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800fa90:	bf00      	nop
 800fa92:	bf00      	nop
}
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	58000c00 	.word	0x58000c00

0800fa9c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800faa0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800faa4:	f7ff fe79 	bl	800f79a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800faa8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800faac:	f7ff fe36 	bl	800f71c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800fab0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fab4:	f7ff fe46 	bl	800f744 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800fab8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800faba:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800fabc:	f7ff fe1e 	bl	800f6fc <LL_PWR_EnableBootC2>

  return;
 800fac0:	bf00      	nop
}
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800fac8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800facc:	f7ff fe4c 	bl	800f768 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800fad0:	4806      	ldr	r0, [pc, #24]	; (800faec <HW_IPCC_Init+0x28>)
 800fad2:	f7ff fe8e 	bl	800f7f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800fad6:	4805      	ldr	r0, [pc, #20]	; (800faec <HW_IPCC_Init+0x28>)
 800fad8:	f7ff fe7b 	bl	800f7d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800fadc:	202c      	movs	r0, #44	; 0x2c
 800fade:	f7f2 fb5e 	bl	800219e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800fae2:	202d      	movs	r0, #45	; 0x2d
 800fae4:	f7f2 fb5b 	bl	800219e <HAL_NVIC_EnableIRQ>

  return;
 800fae8:	bf00      	nop
}
 800faea:	bd80      	pop	{r7, pc}
 800faec:	58000c00 	.word	0x58000c00

0800faf0 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800faf4:	f7f9 fc88 	bl	8009408 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800faf8:	2101      	movs	r1, #1
 800fafa:	4802      	ldr	r0, [pc, #8]	; (800fb04 <HW_IPCC_BLE_EvtHandler+0x14>)
 800fafc:	f7ff fed1 	bl	800f8a2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fb00:	bf00      	nop
}
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	58000c00 	.word	0x58000c00

0800fb08 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800fb0c:	2120      	movs	r1, #32
 800fb0e:	4803      	ldr	r0, [pc, #12]	; (800fb1c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800fb10:	f7ff fe92 	bl	800f838 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800fb14:	f7f9 fca8 	bl	8009468 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800fb18:	bf00      	nop
}
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	58000c00 	.word	0x58000c00

0800fb20 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fb24:	2102      	movs	r1, #2
 800fb26:	4802      	ldr	r0, [pc, #8]	; (800fb30 <HW_IPCC_SYS_Init+0x10>)
 800fb28:	f7ff fe98 	bl	800f85c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fb2c:	bf00      	nop
}
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	58000c00 	.word	0x58000c00

0800fb34 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb38:	2102      	movs	r1, #2
 800fb3a:	4804      	ldr	r0, [pc, #16]	; (800fb4c <HW_IPCC_SYS_SendCmd+0x18>)
 800fb3c:	f7ff febf 	bl	800f8be <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb40:	2102      	movs	r1, #2
 800fb42:	4802      	ldr	r0, [pc, #8]	; (800fb4c <HW_IPCC_SYS_SendCmd+0x18>)
 800fb44:	f7ff fe65 	bl	800f812 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800fb48:	bf00      	nop
}
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	58000c00 	.word	0x58000c00

0800fb50 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb54:	2102      	movs	r1, #2
 800fb56:	4803      	ldr	r0, [pc, #12]	; (800fb64 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800fb58:	f7ff fe6e 	bl	800f838 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800fb5c:	f7f9 fcd4 	bl	8009508 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800fb60:	bf00      	nop
}
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	58000c00 	.word	0x58000c00

0800fb68 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800fb6c:	f7f9 fce2 	bl	8009534 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fb70:	2102      	movs	r1, #2
 800fb72:	4802      	ldr	r0, [pc, #8]	; (800fb7c <HW_IPCC_SYS_EvtHandler+0x14>)
 800fb74:	f7ff fe95 	bl	800f8a2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fb78:	bf00      	nop
}
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	58000c00 	.word	0x58000c00

0800fb80 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800fb84:	2104      	movs	r1, #4
 800fb86:	4804      	ldr	r0, [pc, #16]	; (800fb98 <HW_IPCC_THREAD_Init+0x18>)
 800fb88:	f7ff fe68 	bl	800f85c <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800fb8c:	2110      	movs	r1, #16
 800fb8e:	4802      	ldr	r0, [pc, #8]	; (800fb98 <HW_IPCC_THREAD_Init+0x18>)
 800fb90:	f7ff fe64 	bl	800f85c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fb94:	bf00      	nop
}
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	58000c00 	.word	0x58000c00

0800fb9c <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800fba0:	2104      	movs	r1, #4
 800fba2:	4804      	ldr	r0, [pc, #16]	; (800fbb4 <HW_IPCC_OT_SendCmd+0x18>)
 800fba4:	f7ff fe8b 	bl	800f8be <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800fba8:	2104      	movs	r1, #4
 800fbaa:	4802      	ldr	r0, [pc, #8]	; (800fbb4 <HW_IPCC_OT_SendCmd+0x18>)
 800fbac:	f7ff fe31 	bl	800f812 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800fbb0:	bf00      	nop
}
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	58000c00 	.word	0x58000c00

0800fbb8 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 800fbbc:	2110      	movs	r1, #16
 800fbbe:	4802      	ldr	r0, [pc, #8]	; (800fbc8 <HW_IPCC_CLI_SendCmd+0x10>)
 800fbc0:	f7ff fe7d 	bl	800f8be <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fbc4:	bf00      	nop
}
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	58000c00 	.word	0x58000c00

0800fbcc <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800fbd0:	2104      	movs	r1, #4
 800fbd2:	4804      	ldr	r0, [pc, #16]	; (800fbe4 <HW_IPCC_THREAD_SendAck+0x18>)
 800fbd4:	f7ff fe65 	bl	800f8a2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800fbd8:	2104      	movs	r1, #4
 800fbda:	4802      	ldr	r0, [pc, #8]	; (800fbe4 <HW_IPCC_THREAD_SendAck+0x18>)
 800fbdc:	f7ff fe3e 	bl	800f85c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fbe0:	bf00      	nop
}
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	58000c00 	.word	0x58000c00

0800fbe8 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800fbec:	2110      	movs	r1, #16
 800fbee:	4804      	ldr	r0, [pc, #16]	; (800fc00 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800fbf0:	f7ff fe57 	bl	800f8a2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800fbf4:	2110      	movs	r1, #16
 800fbf6:	4802      	ldr	r0, [pc, #8]	; (800fc00 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800fbf8:	f7ff fe30 	bl	800f85c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fbfc:	bf00      	nop
}
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	58000c00 	.word	0x58000c00

0800fc04 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800fc08:	2104      	movs	r1, #4
 800fc0a:	4803      	ldr	r0, [pc, #12]	; (800fc18 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800fc0c:	f7ff fe14 	bl	800f838 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 800fc10:	f7f9 fd06 	bl	8009620 <HW_IPCC_OT_CmdEvtNot>

  return;
 800fc14:	bf00      	nop
}
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	58000c00 	.word	0x58000c00

0800fc1c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800fc20:	2104      	movs	r1, #4
 800fc22:	4803      	ldr	r0, [pc, #12]	; (800fc30 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800fc24:	f7ff fe2c 	bl	800f880 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 800fc28:	f7f9 fd06 	bl	8009638 <HW_IPCC_THREAD_EvtNot>

  return;
 800fc2c:	bf00      	nop
}
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	58000c00 	.word	0x58000c00

0800fc34 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800fc38:	2110      	movs	r1, #16
 800fc3a:	4803      	ldr	r0, [pc, #12]	; (800fc48 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800fc3c:	f7ff fe20 	bl	800f880 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 800fc40:	f7f9 fd06 	bl	8009650 <HW_IPCC_THREAD_CliEvtNot>

  return;
 800fc44:	bf00      	nop
}
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	58000c00 	.word	0x58000c00

0800fc4c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800fc54:	2108      	movs	r1, #8
 800fc56:	480c      	ldr	r0, [pc, #48]	; (800fc88 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fc58:	f7ff fe40 	bl	800f8dc <LL_C1_IPCC_IsActiveFlag_CHx>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d007      	beq.n	800fc72 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800fc62:	4a0a      	ldr	r2, [pc, #40]	; (800fc8c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fc68:	2108      	movs	r1, #8
 800fc6a:	4807      	ldr	r0, [pc, #28]	; (800fc88 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fc6c:	f7ff fdd1 	bl	800f812 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800fc70:	e006      	b.n	800fc80 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fc76:	2108      	movs	r1, #8
 800fc78:	4803      	ldr	r0, [pc, #12]	; (800fc88 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fc7a:	f7ff fe20 	bl	800f8be <LL_C1_IPCC_SetFlag_CHx>
  return;
 800fc7e:	bf00      	nop
}
 800fc80:	3708      	adds	r7, #8
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	58000c00 	.word	0x58000c00
 800fc8c:	20004b4c 	.word	0x20004b4c

0800fc90 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fc94:	2108      	movs	r1, #8
 800fc96:	4806      	ldr	r0, [pc, #24]	; (800fcb0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fc98:	f7ff fdce 	bl	800f838 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800fc9c:	4b05      	ldr	r3, [pc, #20]	; (800fcb4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fca2:	2108      	movs	r1, #8
 800fca4:	4802      	ldr	r0, [pc, #8]	; (800fcb0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fca6:	f7ff fe0a 	bl	800f8be <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fcaa:	bf00      	nop
}
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	58000c00 	.word	0x58000c00
 800fcb4:	20004b4c 	.word	0x20004b4c

0800fcb8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fcbc:	2108      	movs	r1, #8
 800fcbe:	4802      	ldr	r0, [pc, #8]	; (800fcc8 <HW_IPCC_TRACES_Init+0x10>)
 800fcc0:	f7ff fdcc 	bl	800f85c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fcc4:	bf00      	nop
}
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	58000c00 	.word	0x58000c00

0800fccc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800fcd0:	f7f9 fd50 	bl	8009774 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fcd4:	2108      	movs	r1, #8
 800fcd6:	4802      	ldr	r0, [pc, #8]	; (800fce0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800fcd8:	f7ff fde3 	bl	800f8a2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fcdc:	bf00      	nop
}
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	58000c00 	.word	0x58000c00

0800fce4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fce8:	2200      	movs	r2, #0
 800fcea:	4912      	ldr	r1, [pc, #72]	; (800fd34 <MX_USB_Device_Init+0x50>)
 800fcec:	4812      	ldr	r0, [pc, #72]	; (800fd38 <MX_USB_Device_Init+0x54>)
 800fcee:	f7f8 f82b 	bl	8007d48 <USBD_Init>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d001      	beq.n	800fcfc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fcf8:	f7f1 fc3c 	bl	8001574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fcfc:	490f      	ldr	r1, [pc, #60]	; (800fd3c <MX_USB_Device_Init+0x58>)
 800fcfe:	480e      	ldr	r0, [pc, #56]	; (800fd38 <MX_USB_Device_Init+0x54>)
 800fd00:	f7f8 f852 	bl	8007da8 <USBD_RegisterClass>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fd0a:	f7f1 fc33 	bl	8001574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fd0e:	490c      	ldr	r1, [pc, #48]	; (800fd40 <MX_USB_Device_Init+0x5c>)
 800fd10:	4809      	ldr	r0, [pc, #36]	; (800fd38 <MX_USB_Device_Init+0x54>)
 800fd12:	f7f7 ff73 	bl	8007bfc <USBD_CDC_RegisterInterface>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d001      	beq.n	800fd20 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fd1c:	f7f1 fc2a 	bl	8001574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fd20:	4805      	ldr	r0, [pc, #20]	; (800fd38 <MX_USB_Device_Init+0x54>)
 800fd22:	f7f8 f868 	bl	8007df6 <USBD_Start>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d001      	beq.n	800fd30 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fd2c:	f7f1 fc22 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fd30:	bf00      	nop
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	2000017c 	.word	0x2000017c
 800fd38:	20004ee4 	.word	0x20004ee4
 800fd3c:	20000040 	.word	0x20000040
 800fd40:	20000168 	.word	0x20000168

0800fd44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fd48:	2200      	movs	r2, #0
 800fd4a:	4905      	ldr	r1, [pc, #20]	; (800fd60 <CDC_Init_FS+0x1c>)
 800fd4c:	4805      	ldr	r0, [pc, #20]	; (800fd64 <CDC_Init_FS+0x20>)
 800fd4e:	f7f7 ff6a 	bl	8007c26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fd52:	4905      	ldr	r1, [pc, #20]	; (800fd68 <CDC_Init_FS+0x24>)
 800fd54:	4803      	ldr	r0, [pc, #12]	; (800fd64 <CDC_Init_FS+0x20>)
 800fd56:	f7f7 ff84 	bl	8007c62 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fd5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	200059b4 	.word	0x200059b4
 800fd64:	20004ee4 	.word	0x20004ee4
 800fd68:	200051b4 	.word	0x200051b4

0800fd6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fd70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	4603      	mov	r3, r0
 800fd84:	6039      	str	r1, [r7, #0]
 800fd86:	71fb      	strb	r3, [r7, #7]
 800fd88:	4613      	mov	r3, r2
 800fd8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fd8c:	79fb      	ldrb	r3, [r7, #7]
 800fd8e:	2b23      	cmp	r3, #35	; 0x23
 800fd90:	d84a      	bhi.n	800fe28 <CDC_Control_FS+0xac>
 800fd92:	a201      	add	r2, pc, #4	; (adr r2, 800fd98 <CDC_Control_FS+0x1c>)
 800fd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd98:	0800fe29 	.word	0x0800fe29
 800fd9c:	0800fe29 	.word	0x0800fe29
 800fda0:	0800fe29 	.word	0x0800fe29
 800fda4:	0800fe29 	.word	0x0800fe29
 800fda8:	0800fe29 	.word	0x0800fe29
 800fdac:	0800fe29 	.word	0x0800fe29
 800fdb0:	0800fe29 	.word	0x0800fe29
 800fdb4:	0800fe29 	.word	0x0800fe29
 800fdb8:	0800fe29 	.word	0x0800fe29
 800fdbc:	0800fe29 	.word	0x0800fe29
 800fdc0:	0800fe29 	.word	0x0800fe29
 800fdc4:	0800fe29 	.word	0x0800fe29
 800fdc8:	0800fe29 	.word	0x0800fe29
 800fdcc:	0800fe29 	.word	0x0800fe29
 800fdd0:	0800fe29 	.word	0x0800fe29
 800fdd4:	0800fe29 	.word	0x0800fe29
 800fdd8:	0800fe29 	.word	0x0800fe29
 800fddc:	0800fe29 	.word	0x0800fe29
 800fde0:	0800fe29 	.word	0x0800fe29
 800fde4:	0800fe29 	.word	0x0800fe29
 800fde8:	0800fe29 	.word	0x0800fe29
 800fdec:	0800fe29 	.word	0x0800fe29
 800fdf0:	0800fe29 	.word	0x0800fe29
 800fdf4:	0800fe29 	.word	0x0800fe29
 800fdf8:	0800fe29 	.word	0x0800fe29
 800fdfc:	0800fe29 	.word	0x0800fe29
 800fe00:	0800fe29 	.word	0x0800fe29
 800fe04:	0800fe29 	.word	0x0800fe29
 800fe08:	0800fe29 	.word	0x0800fe29
 800fe0c:	0800fe29 	.word	0x0800fe29
 800fe10:	0800fe29 	.word	0x0800fe29
 800fe14:	0800fe29 	.word	0x0800fe29
 800fe18:	0800fe29 	.word	0x0800fe29
 800fe1c:	0800fe29 	.word	0x0800fe29
 800fe20:	0800fe29 	.word	0x0800fe29
 800fe24:	0800fe29 	.word	0x0800fe29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fe28:	bf00      	nop
  }

  return (USBD_OK);
 800fe2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe42:	6879      	ldr	r1, [r7, #4]
 800fe44:	4805      	ldr	r0, [pc, #20]	; (800fe5c <CDC_Receive_FS+0x24>)
 800fe46:	f7f7 ff0c 	bl	8007c62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fe4a:	4804      	ldr	r0, [pc, #16]	; (800fe5c <CDC_Receive_FS+0x24>)
 800fe4c:	f7f7 ff52 	bl	8007cf4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fe50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	20004ee4 	.word	0x20004ee4

0800fe60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	460b      	mov	r3, r1
 800fe6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fe70:	4b0d      	ldr	r3, [pc, #52]	; (800fea8 <CDC_Transmit_FS+0x48>)
 800fe72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d001      	beq.n	800fe86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fe82:	2301      	movs	r3, #1
 800fe84:	e00b      	b.n	800fe9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fe86:	887b      	ldrh	r3, [r7, #2]
 800fe88:	461a      	mov	r2, r3
 800fe8a:	6879      	ldr	r1, [r7, #4]
 800fe8c:	4806      	ldr	r0, [pc, #24]	; (800fea8 <CDC_Transmit_FS+0x48>)
 800fe8e:	f7f7 feca 	bl	8007c26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fe92:	4805      	ldr	r0, [pc, #20]	; (800fea8 <CDC_Transmit_FS+0x48>)
 800fe94:	f7f7 fefe 	bl	8007c94 <USBD_CDC_TransmitPacket>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fe9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	20004ee4 	.word	0x20004ee4

0800feac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800feac:	b480      	push	{r7}
 800feae:	b087      	sub	sp, #28
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	4613      	mov	r3, r2
 800feb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800feba:	2300      	movs	r3, #0
 800febc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800febe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	371c      	adds	r7, #28
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr
	...

0800fed0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	4603      	mov	r3, r0
 800fed8:	6039      	str	r1, [r7, #0]
 800feda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	2212      	movs	r2, #18
 800fee0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800fee2:	4b03      	ldr	r3, [pc, #12]	; (800fef0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr
 800fef0:	2000019c 	.word	0x2000019c

0800fef4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	4603      	mov	r3, r0
 800fefc:	6039      	str	r1, [r7, #0]
 800fefe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	2204      	movs	r2, #4
 800ff04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff06:	4b03      	ldr	r3, [pc, #12]	; (800ff14 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr
 800ff14:	200001b0 	.word	0x200001b0

0800ff18 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	4603      	mov	r3, r0
 800ff20:	6039      	str	r1, [r7, #0]
 800ff22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff24:	79fb      	ldrb	r3, [r7, #7]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d105      	bne.n	800ff36 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ff2a:	683a      	ldr	r2, [r7, #0]
 800ff2c:	4907      	ldr	r1, [pc, #28]	; (800ff4c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ff2e:	4808      	ldr	r0, [pc, #32]	; (800ff50 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ff30:	f7f8 ff3c 	bl	8008dac <USBD_GetString>
 800ff34:	e004      	b.n	800ff40 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ff36:	683a      	ldr	r2, [r7, #0]
 800ff38:	4904      	ldr	r1, [pc, #16]	; (800ff4c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ff3a:	4805      	ldr	r0, [pc, #20]	; (800ff50 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ff3c:	f7f8 ff36 	bl	8008dac <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff40:	4b02      	ldr	r3, [pc, #8]	; (800ff4c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	200061b4 	.word	0x200061b4
 800ff50:	08010bc4 	.word	0x08010bc4

0800ff54 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	6039      	str	r1, [r7, #0]
 800ff5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff60:	683a      	ldr	r2, [r7, #0]
 800ff62:	4904      	ldr	r1, [pc, #16]	; (800ff74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ff64:	4804      	ldr	r0, [pc, #16]	; (800ff78 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ff66:	f7f8 ff21 	bl	8008dac <USBD_GetString>
  return USBD_StrDesc;
 800ff6a:	4b02      	ldr	r3, [pc, #8]	; (800ff74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	200061b4 	.word	0x200061b4
 800ff78:	08010bdc 	.word	0x08010bdc

0800ff7c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	4603      	mov	r3, r0
 800ff84:	6039      	str	r1, [r7, #0]
 800ff86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	221a      	movs	r2, #26
 800ff8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ff8e:	f000 f843 	bl	8010018 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ff92:	4b02      	ldr	r3, [pc, #8]	; (800ff9c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	200001b4 	.word	0x200001b4

0800ffa0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	6039      	str	r1, [r7, #0]
 800ffaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ffac:	79fb      	ldrb	r3, [r7, #7]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d105      	bne.n	800ffbe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ffb2:	683a      	ldr	r2, [r7, #0]
 800ffb4:	4907      	ldr	r1, [pc, #28]	; (800ffd4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ffb6:	4808      	ldr	r0, [pc, #32]	; (800ffd8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ffb8:	f7f8 fef8 	bl	8008dac <USBD_GetString>
 800ffbc:	e004      	b.n	800ffc8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ffbe:	683a      	ldr	r2, [r7, #0]
 800ffc0:	4904      	ldr	r1, [pc, #16]	; (800ffd4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ffc2:	4805      	ldr	r0, [pc, #20]	; (800ffd8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ffc4:	f7f8 fef2 	bl	8008dac <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffc8:	4b02      	ldr	r3, [pc, #8]	; (800ffd4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	200061b4 	.word	0x200061b4
 800ffd8:	08010bf0 	.word	0x08010bf0

0800ffdc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	6039      	str	r1, [r7, #0]
 800ffe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffe8:	79fb      	ldrb	r3, [r7, #7]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d105      	bne.n	800fffa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	4907      	ldr	r1, [pc, #28]	; (8010010 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fff2:	4808      	ldr	r0, [pc, #32]	; (8010014 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800fff4:	f7f8 feda 	bl	8008dac <USBD_GetString>
 800fff8:	e004      	b.n	8010004 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800fffa:	683a      	ldr	r2, [r7, #0]
 800fffc:	4904      	ldr	r1, [pc, #16]	; (8010010 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fffe:	4805      	ldr	r0, [pc, #20]	; (8010014 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010000:	f7f8 fed4 	bl	8008dac <USBD_GetString>
  }
  return USBD_StrDesc;
 8010004:	4b02      	ldr	r3, [pc, #8]	; (8010010 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8010006:	4618      	mov	r0, r3
 8010008:	3708      	adds	r7, #8
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	200061b4 	.word	0x200061b4
 8010014:	08010bfc 	.word	0x08010bfc

08010018 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801001e:	4b0f      	ldr	r3, [pc, #60]	; (801005c <Get_SerialNum+0x44>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010024:	4b0e      	ldr	r3, [pc, #56]	; (8010060 <Get_SerialNum+0x48>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801002a:	4b0e      	ldr	r3, [pc, #56]	; (8010064 <Get_SerialNum+0x4c>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4413      	add	r3, r2
 8010036:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d009      	beq.n	8010052 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801003e:	2208      	movs	r2, #8
 8010040:	4909      	ldr	r1, [pc, #36]	; (8010068 <Get_SerialNum+0x50>)
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f000 f814 	bl	8010070 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010048:	2204      	movs	r2, #4
 801004a:	4908      	ldr	r1, [pc, #32]	; (801006c <Get_SerialNum+0x54>)
 801004c:	68b8      	ldr	r0, [r7, #8]
 801004e:	f000 f80f 	bl	8010070 <IntToUnicode>
  }
}
 8010052:	bf00      	nop
 8010054:	3710      	adds	r7, #16
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	1fff7590 	.word	0x1fff7590
 8010060:	1fff7594 	.word	0x1fff7594
 8010064:	1fff7598 	.word	0x1fff7598
 8010068:	200001b6 	.word	0x200001b6
 801006c:	200001c6 	.word	0x200001c6

08010070 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010070:	b480      	push	{r7}
 8010072:	b087      	sub	sp, #28
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	4613      	mov	r3, r2
 801007c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010082:	2300      	movs	r3, #0
 8010084:	75fb      	strb	r3, [r7, #23]
 8010086:	e027      	b.n	80100d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	0f1b      	lsrs	r3, r3, #28
 801008c:	2b09      	cmp	r3, #9
 801008e:	d80b      	bhi.n	80100a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	0f1b      	lsrs	r3, r3, #28
 8010094:	b2da      	uxtb	r2, r3
 8010096:	7dfb      	ldrb	r3, [r7, #23]
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	4619      	mov	r1, r3
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	440b      	add	r3, r1
 80100a0:	3230      	adds	r2, #48	; 0x30
 80100a2:	b2d2      	uxtb	r2, r2
 80100a4:	701a      	strb	r2, [r3, #0]
 80100a6:	e00a      	b.n	80100be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	0f1b      	lsrs	r3, r3, #28
 80100ac:	b2da      	uxtb	r2, r3
 80100ae:	7dfb      	ldrb	r3, [r7, #23]
 80100b0:	005b      	lsls	r3, r3, #1
 80100b2:	4619      	mov	r1, r3
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	440b      	add	r3, r1
 80100b8:	3237      	adds	r2, #55	; 0x37
 80100ba:	b2d2      	uxtb	r2, r2
 80100bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	011b      	lsls	r3, r3, #4
 80100c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80100c4:	7dfb      	ldrb	r3, [r7, #23]
 80100c6:	005b      	lsls	r3, r3, #1
 80100c8:	3301      	adds	r3, #1
 80100ca:	68ba      	ldr	r2, [r7, #8]
 80100cc:	4413      	add	r3, r2
 80100ce:	2200      	movs	r2, #0
 80100d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80100d2:	7dfb      	ldrb	r3, [r7, #23]
 80100d4:	3301      	adds	r3, #1
 80100d6:	75fb      	strb	r3, [r7, #23]
 80100d8:	7dfa      	ldrb	r2, [r7, #23]
 80100da:	79fb      	ldrb	r3, [r7, #7]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d3d3      	bcc.n	8010088 <IntToUnicode+0x18>
  }
}
 80100e0:	bf00      	nop
 80100e2:	371c      	adds	r7, #28
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <LL_AHB2_GRP1_EnableClock>:
{
 80100ec:	b480      	push	{r7}
 80100ee:	b085      	sub	sp, #20
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80100f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4313      	orrs	r3, r2
 8010102:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4013      	ands	r3, r2
 801010e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010110:	68fb      	ldr	r3, [r7, #12]
}
 8010112:	bf00      	nop
 8010114:	3714      	adds	r7, #20
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr

0801011e <LL_APB1_GRP1_EnableClock>:
{
 801011e:	b480      	push	{r7}
 8010120:	b085      	sub	sp, #20
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8010126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801012a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801012c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4313      	orrs	r3, r2
 8010134:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8010136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801013a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4013      	ands	r3, r2
 8010140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010142:	68fb      	ldr	r3, [r7, #12]
}
 8010144:	bf00      	nop
 8010146:	3714      	adds	r7, #20
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr

08010150 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b088      	sub	sp, #32
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010158:	f107 030c 	add.w	r3, r7, #12
 801015c:	2200      	movs	r2, #0
 801015e:	601a      	str	r2, [r3, #0]
 8010160:	605a      	str	r2, [r3, #4]
 8010162:	609a      	str	r2, [r3, #8]
 8010164:	60da      	str	r2, [r3, #12]
 8010166:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a13      	ldr	r2, [pc, #76]	; (80101bc <HAL_PCD_MspInit+0x6c>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d120      	bne.n	80101b4 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010172:	2001      	movs	r0, #1
 8010174:	f7ff ffba 	bl	80100ec <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010178:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801017c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801017e:	2302      	movs	r3, #2
 8010180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010182:	2300      	movs	r3, #0
 8010184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010186:	2300      	movs	r3, #0
 8010188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 801018a:	230a      	movs	r3, #10
 801018c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801018e:	f107 030c 	add.w	r3, r7, #12
 8010192:	4619      	mov	r1, r3
 8010194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010198:	f7f2 f83e 	bl	8002218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801019c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80101a0:	f7ff ffbd 	bl	801011e <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80101a4:	2200      	movs	r2, #0
 80101a6:	2105      	movs	r1, #5
 80101a8:	2014      	movs	r0, #20
 80101aa:	f7f1 ffde 	bl	800216a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80101ae:	2014      	movs	r0, #20
 80101b0:	f7f1 fff5 	bl	800219e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80101b4:	bf00      	nop
 80101b6:	3720      	adds	r7, #32
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	40006800 	.word	0x40006800

080101c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80101d4:	4619      	mov	r1, r3
 80101d6:	4610      	mov	r0, r2
 80101d8:	f7f7 fe58 	bl	8007e8c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80101dc:	bf00      	nop
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	460b      	mov	r3, r1
 80101ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80101f6:	78fb      	ldrb	r3, [r7, #3]
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	015b      	lsls	r3, r3, #5
 80101fc:	4413      	add	r3, r2
 80101fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	78fb      	ldrb	r3, [r7, #3]
 8010206:	4619      	mov	r1, r3
 8010208:	f7f7 fe93 	bl	8007f32 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801020c:	bf00      	nop
 801020e:	3708      	adds	r7, #8
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	460b      	mov	r3, r1
 801021e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8010226:	78fb      	ldrb	r3, [r7, #3]
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	015b      	lsls	r3, r3, #5
 801022c:	4413      	add	r3, r2
 801022e:	333c      	adds	r3, #60	; 0x3c
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	78fb      	ldrb	r3, [r7, #3]
 8010234:	4619      	mov	r1, r3
 8010236:	f7f7 fedf 	bl	8007ff8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801023a:	bf00      	nop
 801023c:	3708      	adds	r7, #8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b082      	sub	sp, #8
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010250:	4618      	mov	r0, r3
 8010252:	f7f7 fff3 	bl	800823c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010256:	bf00      	nop
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b084      	sub	sp, #16
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010266:	2301      	movs	r3, #1
 8010268:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	2b02      	cmp	r3, #2
 8010270:	d001      	beq.n	8010276 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010272:	f7f1 f97f 	bl	8001574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801027c:	7bfa      	ldrb	r2, [r7, #15]
 801027e:	4611      	mov	r1, r2
 8010280:	4618      	mov	r0, r3
 8010282:	f7f7 ff9d 	bl	80081c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801028c:	4618      	mov	r0, r3
 801028e:	f7f7 ff49 	bl	8008124 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010292:	bf00      	nop
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
	...

0801029c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7f7 ff98 	bl	80081e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	699b      	ldr	r3, [r3, #24]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d005      	beq.n	80102c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102b8:	4b04      	ldr	r3, [pc, #16]	; (80102cc <HAL_PCD_SuspendCallback+0x30>)
 80102ba:	691b      	ldr	r3, [r3, #16]
 80102bc:	4a03      	ldr	r2, [pc, #12]	; (80102cc <HAL_PCD_SuspendCallback+0x30>)
 80102be:	f043 0306 	orr.w	r3, r3, #6
 80102c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80102c4:	bf00      	nop
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	e000ed00 	.word	0xe000ed00

080102d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	699b      	ldr	r3, [r3, #24]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d007      	beq.n	80102f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102e0:	4b08      	ldr	r3, [pc, #32]	; (8010304 <HAL_PCD_ResumeCallback+0x34>)
 80102e2:	691b      	ldr	r3, [r3, #16]
 80102e4:	4a07      	ldr	r2, [pc, #28]	; (8010304 <HAL_PCD_ResumeCallback+0x34>)
 80102e6:	f023 0306 	bic.w	r3, r3, #6
 80102ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80102ec:	f000 f9f4 	bl	80106d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7f7 ff88 	bl	800820c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80102fc:	bf00      	nop
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	e000ed00 	.word	0xe000ed00

08010308 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010310:	4a2c      	ldr	r2, [pc, #176]	; (80103c4 <USBD_LL_Init+0xbc>)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	4a2a      	ldr	r2, [pc, #168]	; (80103c4 <USBD_LL_Init+0xbc>)
 801031c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010320:	f7f3 fd88 	bl	8003e34 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8010324:	4b27      	ldr	r3, [pc, #156]	; (80103c4 <USBD_LL_Init+0xbc>)
 8010326:	4a28      	ldr	r2, [pc, #160]	; (80103c8 <USBD_LL_Init+0xc0>)
 8010328:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801032a:	4b26      	ldr	r3, [pc, #152]	; (80103c4 <USBD_LL_Init+0xbc>)
 801032c:	2208      	movs	r2, #8
 801032e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010330:	4b24      	ldr	r3, [pc, #144]	; (80103c4 <USBD_LL_Init+0xbc>)
 8010332:	2202      	movs	r2, #2
 8010334:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010336:	4b23      	ldr	r3, [pc, #140]	; (80103c4 <USBD_LL_Init+0xbc>)
 8010338:	2202      	movs	r2, #2
 801033a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801033c:	4b21      	ldr	r3, [pc, #132]	; (80103c4 <USBD_LL_Init+0xbc>)
 801033e:	2200      	movs	r2, #0
 8010340:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010342:	4b20      	ldr	r3, [pc, #128]	; (80103c4 <USBD_LL_Init+0xbc>)
 8010344:	2200      	movs	r2, #0
 8010346:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010348:	4b1e      	ldr	r3, [pc, #120]	; (80103c4 <USBD_LL_Init+0xbc>)
 801034a:	2200      	movs	r2, #0
 801034c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801034e:	4b1d      	ldr	r3, [pc, #116]	; (80103c4 <USBD_LL_Init+0xbc>)
 8010350:	2200      	movs	r2, #0
 8010352:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010354:	481b      	ldr	r0, [pc, #108]	; (80103c4 <USBD_LL_Init+0xbc>)
 8010356:	f7f2 fe16 	bl	8002f86 <HAL_PCD_Init>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d001      	beq.n	8010364 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010360:	f7f1 f908 	bl	8001574 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801036a:	2318      	movs	r3, #24
 801036c:	2200      	movs	r2, #0
 801036e:	2100      	movs	r1, #0
 8010370:	f7f3 fcdb 	bl	8003d2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801037a:	2358      	movs	r3, #88	; 0x58
 801037c:	2200      	movs	r2, #0
 801037e:	2180      	movs	r1, #128	; 0x80
 8010380:	f7f3 fcd3 	bl	8003d2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801038a:	23c0      	movs	r3, #192	; 0xc0
 801038c:	2200      	movs	r2, #0
 801038e:	2181      	movs	r1, #129	; 0x81
 8010390:	f7f3 fccb 	bl	8003d2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801039a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801039e:	2200      	movs	r2, #0
 80103a0:	2101      	movs	r1, #1
 80103a2:	f7f3 fcc2 	bl	8003d2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80103ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103b0:	2200      	movs	r2, #0
 80103b2:	2182      	movs	r1, #130	; 0x82
 80103b4:	f7f3 fcb9 	bl	8003d2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80103b8:	2300      	movs	r3, #0
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3708      	adds	r7, #8
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	200063b4 	.word	0x200063b4
 80103c8:	40006800 	.word	0x40006800

080103cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103d4:	2300      	movs	r3, #0
 80103d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103d8:	2300      	movs	r3, #0
 80103da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7f2 fe8a 	bl	80030fc <HAL_PCD_Start>
 80103e8:	4603      	mov	r3, r0
 80103ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103ec:	7bfb      	ldrb	r3, [r7, #15]
 80103ee:	4618      	mov	r0, r3
 80103f0:	f000 f978 	bl	80106e4 <USBD_Get_USB_Status>
 80103f4:	4603      	mov	r3, r0
 80103f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3710      	adds	r7, #16
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010402:	b580      	push	{r7, lr}
 8010404:	b084      	sub	sp, #16
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
 801040a:	4608      	mov	r0, r1
 801040c:	4611      	mov	r1, r2
 801040e:	461a      	mov	r2, r3
 8010410:	4603      	mov	r3, r0
 8010412:	70fb      	strb	r3, [r7, #3]
 8010414:	460b      	mov	r3, r1
 8010416:	70bb      	strb	r3, [r7, #2]
 8010418:	4613      	mov	r3, r2
 801041a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801041c:	2300      	movs	r3, #0
 801041e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010420:	2300      	movs	r3, #0
 8010422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801042a:	78bb      	ldrb	r3, [r7, #2]
 801042c:	883a      	ldrh	r2, [r7, #0]
 801042e:	78f9      	ldrb	r1, [r7, #3]
 8010430:	f7f2 fff9 	bl	8003426 <HAL_PCD_EP_Open>
 8010434:	4603      	mov	r3, r0
 8010436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010438:	7bfb      	ldrb	r3, [r7, #15]
 801043a:	4618      	mov	r0, r3
 801043c:	f000 f952 	bl	80106e4 <USBD_Get_USB_Status>
 8010440:	4603      	mov	r3, r0
 8010442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010444:	7bbb      	ldrb	r3, [r7, #14]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3710      	adds	r7, #16
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b084      	sub	sp, #16
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
 8010456:	460b      	mov	r3, r1
 8010458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801045a:	2300      	movs	r3, #0
 801045c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801045e:	2300      	movs	r3, #0
 8010460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010468:	78fa      	ldrb	r2, [r7, #3]
 801046a:	4611      	mov	r1, r2
 801046c:	4618      	mov	r0, r3
 801046e:	f7f3 f83a 	bl	80034e6 <HAL_PCD_EP_Close>
 8010472:	4603      	mov	r3, r0
 8010474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010476:	7bfb      	ldrb	r3, [r7, #15]
 8010478:	4618      	mov	r0, r3
 801047a:	f000 f933 	bl	80106e4 <USBD_Get_USB_Status>
 801047e:	4603      	mov	r3, r0
 8010480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010482:	7bbb      	ldrb	r3, [r7, #14]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010498:	2300      	movs	r3, #0
 801049a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104a6:	78fa      	ldrb	r2, [r7, #3]
 80104a8:	4611      	mov	r1, r2
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7f3 f8e5 	bl	800367a <HAL_PCD_EP_SetStall>
 80104b0:	4603      	mov	r3, r0
 80104b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104b4:	7bfb      	ldrb	r3, [r7, #15]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f000 f914 	bl	80106e4 <USBD_Get_USB_Status>
 80104bc:	4603      	mov	r3, r0
 80104be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}

080104ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b084      	sub	sp, #16
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
 80104d2:	460b      	mov	r3, r1
 80104d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104da:	2300      	movs	r3, #0
 80104dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104e4:	78fa      	ldrb	r2, [r7, #3]
 80104e6:	4611      	mov	r1, r2
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7f3 f920 	bl	800372e <HAL_PCD_EP_ClrStall>
 80104ee:	4603      	mov	r3, r0
 80104f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104f2:	7bfb      	ldrb	r3, [r7, #15]
 80104f4:	4618      	mov	r0, r3
 80104f6:	f000 f8f5 	bl	80106e4 <USBD_Get_USB_Status>
 80104fa:	4603      	mov	r3, r0
 80104fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010500:	4618      	mov	r0, r3
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010508:	b480      	push	{r7}
 801050a:	b085      	sub	sp, #20
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	460b      	mov	r3, r1
 8010512:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801051a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801051c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010520:	2b00      	cmp	r3, #0
 8010522:	da08      	bge.n	8010536 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010524:	78fb      	ldrb	r3, [r7, #3]
 8010526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801052a:	68fa      	ldr	r2, [r7, #12]
 801052c:	015b      	lsls	r3, r3, #5
 801052e:	4413      	add	r3, r2
 8010530:	332a      	adds	r3, #42	; 0x2a
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	e008      	b.n	8010548 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010536:	78fb      	ldrb	r3, [r7, #3]
 8010538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	015b      	lsls	r3, r3, #5
 8010540:	4413      	add	r3, r2
 8010542:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8010546:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010548:	4618      	mov	r0, r3
 801054a:	3714      	adds	r7, #20
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	460b      	mov	r3, r1
 801055e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010560:	2300      	movs	r3, #0
 8010562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801056e:	78fa      	ldrb	r2, [r7, #3]
 8010570:	4611      	mov	r1, r2
 8010572:	4618      	mov	r0, r3
 8010574:	f7f2 ff32 	bl	80033dc <HAL_PCD_SetAddress>
 8010578:	4603      	mov	r3, r0
 801057a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	4618      	mov	r0, r3
 8010580:	f000 f8b0 	bl	80106e4 <USBD_Get_USB_Status>
 8010584:	4603      	mov	r3, r0
 8010586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010588:	7bbb      	ldrb	r3, [r7, #14]
}
 801058a:	4618      	mov	r0, r3
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b086      	sub	sp, #24
 8010596:	af00      	add	r7, sp, #0
 8010598:	60f8      	str	r0, [r7, #12]
 801059a:	607a      	str	r2, [r7, #4]
 801059c:	603b      	str	r3, [r7, #0]
 801059e:	460b      	mov	r3, r1
 80105a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105a2:	2300      	movs	r3, #0
 80105a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80105b0:	7af9      	ldrb	r1, [r7, #11]
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	f7f3 f827 	bl	8003608 <HAL_PCD_EP_Transmit>
 80105ba:	4603      	mov	r3, r0
 80105bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105be:	7dfb      	ldrb	r3, [r7, #23]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f000 f88f 	bl	80106e4 <USBD_Get_USB_Status>
 80105c6:	4603      	mov	r3, r0
 80105c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80105ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3718      	adds	r7, #24
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b086      	sub	sp, #24
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	607a      	str	r2, [r7, #4]
 80105de:	603b      	str	r3, [r7, #0]
 80105e0:	460b      	mov	r3, r1
 80105e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105e8:	2300      	movs	r3, #0
 80105ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80105f2:	7af9      	ldrb	r1, [r7, #11]
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	f7f2 ffb7 	bl	800356a <HAL_PCD_EP_Receive>
 80105fc:	4603      	mov	r3, r0
 80105fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010600:	7dfb      	ldrb	r3, [r7, #23]
 8010602:	4618      	mov	r0, r3
 8010604:	f000 f86e 	bl	80106e4 <USBD_Get_USB_Status>
 8010608:	4603      	mov	r3, r0
 801060a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801060c:	7dbb      	ldrb	r3, [r7, #22]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3718      	adds	r7, #24
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010616:	b580      	push	{r7, lr}
 8010618:	b082      	sub	sp, #8
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
 801061e:	460b      	mov	r3, r1
 8010620:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010628:	78fa      	ldrb	r2, [r7, #3]
 801062a:	4611      	mov	r1, r2
 801062c:	4618      	mov	r0, r3
 801062e:	f7f2 ffd6 	bl	80035de <HAL_PCD_EP_GetRxCount>
 8010632:	4603      	mov	r3, r0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	460b      	mov	r3, r1
 8010646:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010648:	78fb      	ldrb	r3, [r7, #3]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d002      	beq.n	8010654 <HAL_PCDEx_LPM_Callback+0x18>
 801064e:	2b01      	cmp	r3, #1
 8010650:	d013      	beq.n	801067a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010652:	e023      	b.n	801069c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	699b      	ldr	r3, [r3, #24]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d007      	beq.n	801066c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801065c:	f000 f83c 	bl	80106d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010660:	4b10      	ldr	r3, [pc, #64]	; (80106a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010662:	691b      	ldr	r3, [r3, #16]
 8010664:	4a0f      	ldr	r2, [pc, #60]	; (80106a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010666:	f023 0306 	bic.w	r3, r3, #6
 801066a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010672:	4618      	mov	r0, r3
 8010674:	f7f7 fdca 	bl	800820c <USBD_LL_Resume>
    break;
 8010678:	e010      	b.n	801069c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010680:	4618      	mov	r0, r3
 8010682:	f7f7 fdad 	bl	80081e0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	699b      	ldr	r3, [r3, #24]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d005      	beq.n	801069a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801068e:	4b05      	ldr	r3, [pc, #20]	; (80106a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010690:	691b      	ldr	r3, [r3, #16]
 8010692:	4a04      	ldr	r2, [pc, #16]	; (80106a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010694:	f043 0306 	orr.w	r3, r3, #6
 8010698:	6113      	str	r3, [r2, #16]
    break;
 801069a:	bf00      	nop
}
 801069c:	bf00      	nop
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	e000ed00 	.word	0xe000ed00

080106a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80106b0:	4b03      	ldr	r3, [pc, #12]	; (80106c0 <USBD_static_malloc+0x18>)
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	370c      	adds	r7, #12
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr
 80106be:	bf00      	nop
 80106c0:	20004b50 	.word	0x20004b50

080106c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]

}
 80106cc:	bf00      	nop
 80106ce:	370c      	adds	r7, #12
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr

080106d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80106dc:	f7f0 fe7c 	bl	80013d8 <SystemClock_Config>
}
 80106e0:	bf00      	nop
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b085      	sub	sp, #20
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	4603      	mov	r3, r0
 80106ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ee:	2300      	movs	r3, #0
 80106f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80106f2:	79fb      	ldrb	r3, [r7, #7]
 80106f4:	2b03      	cmp	r3, #3
 80106f6:	d817      	bhi.n	8010728 <USBD_Get_USB_Status+0x44>
 80106f8:	a201      	add	r2, pc, #4	; (adr r2, 8010700 <USBD_Get_USB_Status+0x1c>)
 80106fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106fe:	bf00      	nop
 8010700:	08010711 	.word	0x08010711
 8010704:	08010717 	.word	0x08010717
 8010708:	0801071d 	.word	0x0801071d
 801070c:	08010723 	.word	0x08010723
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010710:	2300      	movs	r3, #0
 8010712:	73fb      	strb	r3, [r7, #15]
    break;
 8010714:	e00b      	b.n	801072e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010716:	2303      	movs	r3, #3
 8010718:	73fb      	strb	r3, [r7, #15]
    break;
 801071a:	e008      	b.n	801072e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801071c:	2301      	movs	r3, #1
 801071e:	73fb      	strb	r3, [r7, #15]
    break;
 8010720:	e005      	b.n	801072e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010722:	2303      	movs	r3, #3
 8010724:	73fb      	strb	r3, [r7, #15]
    break;
 8010726:	e002      	b.n	801072e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010728:	2303      	movs	r3, #3
 801072a:	73fb      	strb	r3, [r7, #15]
    break;
 801072c:	bf00      	nop
  }
  return usb_status;
 801072e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3714      	adds	r7, #20
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801073c:	b480      	push	{r7}
 801073e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010740:	4b05      	ldr	r3, [pc, #20]	; (8010758 <UTIL_LPM_Init+0x1c>)
 8010742:	2200      	movs	r2, #0
 8010744:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8010746:	4b05      	ldr	r3, [pc, #20]	; (801075c <UTIL_LPM_Init+0x20>)
 8010748:	2200      	movs	r2, #0
 801074a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801074c:	bf00      	nop
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr
 8010756:	bf00      	nop
 8010758:	20004d70 	.word	0x20004d70
 801075c:	20004d74 	.word	0x20004d74

08010760 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8010760:	b480      	push	{r7}
 8010762:	b087      	sub	sp, #28
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	460b      	mov	r3, r1
 801076a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801076c:	f3ef 8310 	mrs	r3, PRIMASK
 8010770:	613b      	str	r3, [r7, #16]
  return(result);
 8010772:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8010774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010776:	b672      	cpsid	i
  
  switch(state)
 8010778:	78fb      	ldrb	r3, [r7, #3]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d009      	beq.n	8010792 <UTIL_LPM_SetOffMode+0x32>
 801077e:	2b01      	cmp	r3, #1
 8010780:	d000      	beq.n	8010784 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8010782:	e00e      	b.n	80107a2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8010784:	4b0c      	ldr	r3, [pc, #48]	; (80107b8 <UTIL_LPM_SetOffMode+0x58>)
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4313      	orrs	r3, r2
 801078c:	4a0a      	ldr	r2, [pc, #40]	; (80107b8 <UTIL_LPM_SetOffMode+0x58>)
 801078e:	6013      	str	r3, [r2, #0]
      break;
 8010790:	e007      	b.n	80107a2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	43da      	mvns	r2, r3
 8010796:	4b08      	ldr	r3, [pc, #32]	; (80107b8 <UTIL_LPM_SetOffMode+0x58>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4013      	ands	r3, r2
 801079c:	4a06      	ldr	r2, [pc, #24]	; (80107b8 <UTIL_LPM_SetOffMode+0x58>)
 801079e:	6013      	str	r3, [r2, #0]
      break;
 80107a0:	bf00      	nop
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80107ac:	bf00      	nop
 80107ae:	371c      	adds	r7, #28
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr
 80107b8:	20004d74 	.word	0x20004d74

080107bc <__libc_init_array>:
 80107bc:	b570      	push	{r4, r5, r6, lr}
 80107be:	4e0d      	ldr	r6, [pc, #52]	; (80107f4 <__libc_init_array+0x38>)
 80107c0:	4c0d      	ldr	r4, [pc, #52]	; (80107f8 <__libc_init_array+0x3c>)
 80107c2:	1ba4      	subs	r4, r4, r6
 80107c4:	10a4      	asrs	r4, r4, #2
 80107c6:	2500      	movs	r5, #0
 80107c8:	42a5      	cmp	r5, r4
 80107ca:	d109      	bne.n	80107e0 <__libc_init_array+0x24>
 80107cc:	4e0b      	ldr	r6, [pc, #44]	; (80107fc <__libc_init_array+0x40>)
 80107ce:	4c0c      	ldr	r4, [pc, #48]	; (8010800 <__libc_init_array+0x44>)
 80107d0:	f000 f82c 	bl	801082c <_init>
 80107d4:	1ba4      	subs	r4, r4, r6
 80107d6:	10a4      	asrs	r4, r4, #2
 80107d8:	2500      	movs	r5, #0
 80107da:	42a5      	cmp	r5, r4
 80107dc:	d105      	bne.n	80107ea <__libc_init_array+0x2e>
 80107de:	bd70      	pop	{r4, r5, r6, pc}
 80107e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80107e4:	4798      	blx	r3
 80107e6:	3501      	adds	r5, #1
 80107e8:	e7ee      	b.n	80107c8 <__libc_init_array+0xc>
 80107ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80107ee:	4798      	blx	r3
 80107f0:	3501      	adds	r5, #1
 80107f2:	e7f2      	b.n	80107da <__libc_init_array+0x1e>
 80107f4:	08010d60 	.word	0x08010d60
 80107f8:	08010d60 	.word	0x08010d60
 80107fc:	08010d60 	.word	0x08010d60
 8010800:	08010d64 	.word	0x08010d64

08010804 <memcpy>:
 8010804:	b510      	push	{r4, lr}
 8010806:	1e43      	subs	r3, r0, #1
 8010808:	440a      	add	r2, r1
 801080a:	4291      	cmp	r1, r2
 801080c:	d100      	bne.n	8010810 <memcpy+0xc>
 801080e:	bd10      	pop	{r4, pc}
 8010810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010818:	e7f7      	b.n	801080a <memcpy+0x6>

0801081a <memset>:
 801081a:	4402      	add	r2, r0
 801081c:	4603      	mov	r3, r0
 801081e:	4293      	cmp	r3, r2
 8010820:	d100      	bne.n	8010824 <memset+0xa>
 8010822:	4770      	bx	lr
 8010824:	f803 1b01 	strb.w	r1, [r3], #1
 8010828:	e7f9      	b.n	801081e <memset+0x4>
	...

0801082c <_init>:
 801082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801082e:	bf00      	nop
 8010830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010832:	bc08      	pop	{r3}
 8010834:	469e      	mov	lr, r3
 8010836:	4770      	bx	lr

08010838 <_fini>:
 8010838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801083a:	bf00      	nop
 801083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801083e:	bc08      	pop	{r3}
 8010840:	469e      	mov	lr, r3
 8010842:	4770      	bx	lr
