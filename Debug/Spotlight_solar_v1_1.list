
Spotlight_solar_v1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010738  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08010878  08010878  00020878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010d94  08010d94  00020d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010d98  08010d98  00020d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  20000004  08010d9c  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  200001d0  08010f68  000301d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000026c  08011001  0003026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000063a8  20000280  08011012  00030280  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20006628  08011012  00036628  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   00053043  00000000  00000000  000302ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00009546  00000000  00000000  000832f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00003630  00000000  00000000  0008c838  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003228  00000000  00000000  0008fe68  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00034ff5  00000000  00000000  00093090  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000363a9  00000000  00000000  000c8085  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00108311  00000000  00000000  000fe42e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0020673f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000dd98  00000000  00000000  002067bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000280 	.word	0x20000280
 800015c:	00000000 	.word	0x00000000
 8000160:	08010860 	.word	0x08010860

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000284 	.word	0x20000284
 800017c:	08010860 	.word	0x08010860

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800019c:	4b07      	ldr	r3, [pc, #28]	; (80001bc <LL_C2_PWR_SetPowerMode+0x28>)
 800019e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001a2:	f023 0207 	bic.w	r2, r3, #7
 80001a6:	4905      	ldr	r1, [pc, #20]	; (80001bc <LL_C2_PWR_SetPowerMode+0x28>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4313      	orrs	r3, r2
 80001ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ba:	4770      	bx	lr
 80001bc:	58000400 	.word	0x58000400

080001c0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001cc:	689b      	ldr	r3, [r3, #8]
 80001ce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80001d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	608b      	str	r3, [r1, #8]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr

080001e8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80001ec:	f000 f80a 	bl	8000204 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80001f0:	4903      	ldr	r1, [pc, #12]	; (8000200 <APPE_Init+0x18>)
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fdca 	bl	8000d8c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80001f8:	f000 f812 	bl	8000220 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80001fc:	bf00      	nop
}
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	20004dd0 	.word	0x20004dd0

08000204 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000208:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800020c:	f7ff ffd8 	bl	80001c0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000210:	f010 faae 	bl	8010770 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000214:	2004      	movs	r0, #4
 8000216:	f7ff ffbd 	bl	8000194 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800021a:	bf00      	nop
}
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000226:	f009 f8c9 	bl	80093bc <TL_Init>

  MtxShciId = osMutexNew( NULL );
 800022a:	2000      	movs	r0, #0
 800022c:	f00a ff72 	bl	800b114 <osMutexNew>
 8000230:	4602      	mov	r2, r0
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <appe_Tl_Init+0x70>)
 8000234:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000236:	2200      	movs	r2, #0
 8000238:	2100      	movs	r1, #0
 800023a:	2001      	movs	r0, #1
 800023c:	f00b f8b2 	bl	800b3a4 <osSemaphoreNew>
 8000240:	4602      	mov	r2, r0
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <appe_Tl_Init+0x74>)
 8000244:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000246:	4a14      	ldr	r2, [pc, #80]	; (8000298 <appe_Tl_Init+0x78>)
 8000248:	2100      	movs	r1, #0
 800024a:	4814      	ldr	r0, [pc, #80]	; (800029c <appe_Tl_Init+0x7c>)
 800024c:	f00a fd98 	bl	800ad80 <osThreadNew>
 8000250:	4602      	mov	r2, r0
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <appe_Tl_Init+0x80>)
 8000254:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <appe_Tl_Init+0x84>)
 8000258:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <appe_Tl_Init+0x88>)
 800025c:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800025e:	463b      	mov	r3, r7
 8000260:	4619      	mov	r1, r3
 8000262:	4812      	ldr	r0, [pc, #72]	; (80002ac <appe_Tl_Init+0x8c>)
 8000264:	f008 ff70 	bl	8009148 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <appe_Tl_Init+0x90>)
 800026e:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <appe_Tl_Init+0x94>)
 8000272:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000274:	f240 533c 	movw	r3, #1340	; 0x53c
 8000278:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	4618      	mov	r0, r3
 8000280:	f009 fa06 	bl	8009690 <TL_MM_Init>

  TL_Enable();
 8000284:	f009 f894 	bl	80093b0 <TL_Enable>

  return;
 8000288:	bf00      	nop
}
 800028a:	3720      	adds	r7, #32
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20004d78 	.word	0x20004d78
 8000294:	20004d80 	.word	0x20004d80
 8000298:	08010c40 	.word	0x08010c40
 800029c:	080003a1 	.word	0x080003a1
 80002a0:	20004d7c 	.word	0x20004d7c
 80002a4:	2003061c 	.word	0x2003061c
 80002a8:	080002b9 	.word	0x080002b9
 80002ac:	080002f9 	.word	0x080002f9
 80002b0:	20030728 	.word	0x20030728
 80002b4:	200300e0 	.word	0x200300e0

080002b8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d002      	beq.n	80002ce <APPE_SysStatusNot+0x16>
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d008      	beq.n	80002de <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80002cc:	e00d      	b.n	80002ea <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <APPE_SysStatusNot+0x3c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f04f 31ff 	mov.w	r1, #4294967295
 80002d6:	4618      	mov	r0, r3
 80002d8:	f00a ffb6 	bl	800b248 <osMutexAcquire>
      break;
 80002dc:	e005      	b.n	80002ea <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <APPE_SysStatusNot+0x3c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f00b f80e 	bl	800b304 <osMutexRelease>
      break;
 80002e8:	bf00      	nop
  }
  return;
 80002ea:	bf00      	nop
}
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20004d78 	.word	0x20004d78

080002f8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	330b      	adds	r3, #11
 8000306:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	b29b      	uxth	r3, r3
 800030e:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000312:	d004      	beq.n	800031e <APPE_SysUserEvtRx+0x26>
 8000314:	f249 2201 	movw	r2, #37377	; 0x9201
 8000318:	4293      	cmp	r3, r2
 800031a:	d003      	beq.n	8000324 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 800031c:	e008      	b.n	8000330 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 800031e:	f000 f833 	bl	8000388 <APPE_SysEvtReadyProcessing>
         break;
 8000322:	e005      	b.n	8000330 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	789b      	ldrb	r3, [r3, #2]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f805 	bl	8000338 <APPE_SysEvtError>
         break;
 800032e:	bf00      	nop
  }
  return;
 8000330:	bf00      	nop
}
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b7d      	cmp	r3, #125	; 0x7d
 8000346:	d002      	beq.n	800034e <APPE_SysEvtError+0x16>
 8000348:	2b7e      	cmp	r3, #126	; 0x7e
 800034a:	d006      	beq.n	800035a <APPE_SysEvtError+0x22>
 800034c:	e00b      	b.n	8000366 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 800034e:	4a0b      	ldr	r2, [pc, #44]	; (800037c <APPE_SysEvtError+0x44>)
 8000350:	2101      	movs	r1, #1
 8000352:	2000      	movs	r0, #0
 8000354:	f001 fce6 	bl	8001d24 <logApplication>
       break;
 8000358:	e00c      	b.n	8000374 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 800035a:	4a09      	ldr	r2, [pc, #36]	; (8000380 <APPE_SysEvtError+0x48>)
 800035c:	2101      	movs	r1, #1
 800035e:	2000      	movs	r0, #0
 8000360:	f001 fce0 	bl	8001d24 <logApplication>
       break;
 8000364:	e006      	b.n	8000374 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4a06      	ldr	r2, [pc, #24]	; (8000384 <APPE_SysEvtError+0x4c>)
 800036a:	2101      	movs	r1, #1
 800036c:	2000      	movs	r0, #0
 800036e:	f001 fcd9 	bl	8001d24 <logApplication>
       break;
 8000372:	bf00      	nop
  }
  return;
 8000374:	bf00      	nop
}
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	08010890 	.word	0x08010890
 8000380:	080108b4 	.word	0x080108b4
 8000384:	080108d4 	.word	0x080108d4

08000388 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 800038c:	f009 f9f4 	bl	8009778 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000390:	f00e fc84 	bl	800ec9c <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000394:	2100      	movs	r1, #0
 8000396:	2001      	movs	r0, #1
 8000398:	f010 f9fc 	bl	8010794 <UTIL_LPM_SetOffMode>
  return;
 800039c:	bf00      	nop
}
 800039e:	bd80      	pop	{r7, pc}

080003a0 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80003a8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ac:	2100      	movs	r1, #0
 80003ae:	2001      	movs	r0, #1
 80003b0:	f00a fdee 	bl	800af90 <osThreadFlagsWait>
     shci_user_evt_proc();
 80003b4:	f008 fee4 	bl	8009180 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80003b8:	e7f6      	b.n	80003a8 <ShciUserEvtProcess+0x8>
	...

080003bc <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <shci_notify_asynch_evt+0x1c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2101      	movs	r1, #1
 80003ca:	4618      	mov	r0, r3
 80003cc:	f00a fd7e 	bl	800aecc <osThreadFlagsSet>
  return;
 80003d0:	bf00      	nop
}
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20004d7c 	.word	0x20004d7c

080003dc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <shci_cmd_resp_release+0x1c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f00b f8df 	bl	800b5ac <osSemaphoreRelease>
  return;
 80003ee:	bf00      	nop
}
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20004d80 	.word	0x20004d80

080003fc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <shci_cmd_resp_wait+0x20>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f04f 31ff 	mov.w	r1, #4294967295
 800040c:	4618      	mov	r0, r3
 800040e:	f00b f867 	bl	800b4e0 <osSemaphoreAcquire>
  return;
 8000412:	bf00      	nop
}
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20004d80 	.word	0x20004d80

08000420 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f009 f96d 	bl	8009708 <TL_MM_EvtDone>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800043c:	4a05      	ldr	r2, [pc, #20]	; (8000454 <_Z16MX_FREERTOS_Initv+0x1c>)
 800043e:	2100      	movs	r1, #0
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <_Z16MX_FREERTOS_Initv+0x20>)
 8000442:	f00a fc9d 	bl	800ad80 <osThreadNew>
 8000446:	4602      	mov	r2, r0
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <_Z16MX_FREERTOS_Initv+0x24>)
 800044a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  APPE_Init();
 800044c:	f7ff fecc 	bl	80001e8 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	08010c64 	.word	0x08010c64
 8000458:	08000461 	.word	0x08000461
 800045c:	2000029c 	.word	0x2000029c

08000460 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osDelay(100);
 8000468:	2064      	movs	r0, #100	; 0x64
 800046a:	f00a fe25 	bl	800b0b8 <osDelay>
	myMain();
 800046e:	f001 f96a 	bl	8001746 <_Z6myMainv>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000472:	2001      	movs	r0, #1
 8000474:	f00a fe20 	bl	800b0b8 <osDelay>
 8000478:	e7fb      	b.n	8000472 <_Z16StartDefaultTaskPv+0x12>

0800047a <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800048e:	b480      	push	{r7}
 8000490:	b085      	sub	sp, #20
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4013      	ands	r3, r2
 80004b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b2:	68fb      	ldr	r3, [r7, #12]
}
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d4:	2004      	movs	r0, #4
 80004d6:	f7ff ffda 	bl	800048e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff ffd7 	bl	800048e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	2002      	movs	r0, #2
 80004e2:	f7ff ffd4 	bl	800048e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2110      	movs	r1, #16
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	f002 f817 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2103      	movs	r1, #3
 80004f6:	4811      	ldr	r0, [pc, #68]	; (800053c <MX_GPIO_Init+0x7c>)
 80004f8:	f002 f812 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80004fc:	2310      	movs	r3, #16
 80004fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4619      	mov	r1, r3
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f001 fe94 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000518:	2303      	movs	r3, #3
 800051a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4619      	mov	r1, r3
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <MX_GPIO_Init+0x7c>)
 800052e:	f001 fe87 	bl	8002240 <HAL_GPIO_Init>

}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	48000400 	.word	0x48000400

08000540 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LL_EXTI_EnableIT_0_31+0x24>)
 800054a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800054e:	4905      	ldr	r1, [pc, #20]	; (8000564 <LL_EXTI_EnableIT_0_31+0x24>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4313      	orrs	r3, r2
 8000554:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	58000800 	.word	0x58000800

08000568 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4904      	ldr	r1, [pc, #16]	; (8000588 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4313      	orrs	r3, r2
 800057a:	600b      	str	r3, [r1, #0]

}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	58000800 	.word	0x58000800

0800058c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <ReadRtcSsrValue+0x3c>)
 8000594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000596:	b29b      	uxth	r3, r3
 8000598:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <ReadRtcSsrValue+0x3c>)
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800059e:	b29b      	uxth	r3, r3
 80005a0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80005a2:	e005      	b.n	80005b0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <ReadRtcSsrValue+0x3c>)
 80005aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d1f5      	bne.n	80005a4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80005b8:	683b      	ldr	r3, [r7, #0]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40002800 	.word	0x40002800

080005cc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80005dc:	79ba      	ldrb	r2, [r7, #6]
 80005de:	491d      	ldr	r1, [pc, #116]	; (8000654 <LinkTimerAfter+0x88>)
 80005e0:	4613      	mov	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	440b      	add	r3, r1
 80005ea:	3315      	adds	r3, #21
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	2b06      	cmp	r3, #6
 80005f4:	d009      	beq.n	800060a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80005f6:	7bfa      	ldrb	r2, [r7, #15]
 80005f8:	4916      	ldr	r1, [pc, #88]	; (8000654 <LinkTimerAfter+0x88>)
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	440b      	add	r3, r1
 8000604:	3314      	adds	r3, #20
 8000606:	79fa      	ldrb	r2, [r7, #7]
 8000608:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	4911      	ldr	r1, [pc, #68]	; (8000654 <LinkTimerAfter+0x88>)
 800060e:	4613      	mov	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4413      	add	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	440b      	add	r3, r1
 8000618:	3315      	adds	r3, #21
 800061a:	7bfa      	ldrb	r2, [r7, #15]
 800061c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	490c      	ldr	r1, [pc, #48]	; (8000654 <LinkTimerAfter+0x88>)
 8000622:	4613      	mov	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	4413      	add	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	440b      	add	r3, r1
 800062c:	3314      	adds	r3, #20
 800062e:	79ba      	ldrb	r2, [r7, #6]
 8000630:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000632:	79ba      	ldrb	r2, [r7, #6]
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <LinkTimerAfter+0x88>)
 8000636:	4613      	mov	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	440b      	add	r3, r1
 8000640:	3315      	adds	r3, #21
 8000642:	79fa      	ldrb	r2, [r7, #7]
 8000644:	701a      	strb	r2, [r3, #0]

  return;
 8000646:	bf00      	nop
}
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200001d0 	.word	0x200001d0

08000658 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	460a      	mov	r2, r1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	4613      	mov	r3, r2
 8000666:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <LinkTimerBefore+0xb8>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d032      	beq.n	80006da <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000674:	79ba      	ldrb	r2, [r7, #6]
 8000676:	4927      	ldr	r1, [pc, #156]	; (8000714 <LinkTimerBefore+0xbc>)
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	440b      	add	r3, r1
 8000682:	3314      	adds	r3, #20
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000688:	7bfa      	ldrb	r2, [r7, #15]
 800068a:	4922      	ldr	r1, [pc, #136]	; (8000714 <LinkTimerBefore+0xbc>)
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	440b      	add	r3, r1
 8000696:	3315      	adds	r3, #21
 8000698:	79fa      	ldrb	r2, [r7, #7]
 800069a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	491d      	ldr	r1, [pc, #116]	; (8000714 <LinkTimerBefore+0xbc>)
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	440b      	add	r3, r1
 80006aa:	3315      	adds	r3, #21
 80006ac:	79ba      	ldrb	r2, [r7, #6]
 80006ae:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80006b0:	79fa      	ldrb	r2, [r7, #7]
 80006b2:	4918      	ldr	r1, [pc, #96]	; (8000714 <LinkTimerBefore+0xbc>)
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	440b      	add	r3, r1
 80006be:	3314      	adds	r3, #20
 80006c0:	7bfa      	ldrb	r2, [r7, #15]
 80006c2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80006c4:	79ba      	ldrb	r2, [r7, #6]
 80006c6:	4913      	ldr	r1, [pc, #76]	; (8000714 <LinkTimerBefore+0xbc>)
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	440b      	add	r3, r1
 80006d2:	3314      	adds	r3, #20
 80006d4:	79fa      	ldrb	r2, [r7, #7]
 80006d6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80006d8:	e014      	b.n	8000704 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	490d      	ldr	r1, [pc, #52]	; (8000714 <LinkTimerBefore+0xbc>)
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	440b      	add	r3, r1
 80006e8:	3315      	adds	r3, #21
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80006ee:	79ba      	ldrb	r2, [r7, #6]
 80006f0:	4908      	ldr	r1, [pc, #32]	; (8000714 <LinkTimerBefore+0xbc>)
 80006f2:	4613      	mov	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	440b      	add	r3, r1
 80006fc:	3314      	adds	r3, #20
 80006fe:	79fa      	ldrb	r2, [r7, #7]
 8000700:	701a      	strb	r2, [r3, #0]
  return;
 8000702:	bf00      	nop
}
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000260 	.word	0x20000260
 8000714:	200001d0 	.word	0x200001d0

08000718 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000722:	4b4e      	ldr	r3, [pc, #312]	; (800085c <linkTimer+0x144>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b06      	cmp	r3, #6
 800072a:	d118      	bne.n	800075e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800072c:	4b4b      	ldr	r3, [pc, #300]	; (800085c <linkTimer+0x144>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b4b      	ldr	r3, [pc, #300]	; (8000860 <linkTimer+0x148>)
 8000734:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <linkTimer+0x144>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	4949      	ldr	r1, [pc, #292]	; (8000864 <linkTimer+0x14c>)
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	3315      	adds	r3, #21
 800074c:	2206      	movs	r2, #6
 800074e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000750:	4b45      	ldr	r3, [pc, #276]	; (8000868 <linkTimer+0x150>)
 8000752:	f04f 32ff 	mov.w	r2, #4294967295
 8000756:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	81fb      	strh	r3, [r7, #14]
 800075c:	e078      	b.n	8000850 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800075e:	f000 f909 	bl	8000974 <ReturnTimeElapsed>
 8000762:	4603      	mov	r3, r0
 8000764:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	493e      	ldr	r1, [pc, #248]	; (8000864 <linkTimer+0x14c>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3308      	adds	r3, #8
 8000776:	6819      	ldr	r1, [r3, #0]
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	79fa      	ldrb	r2, [r7, #7]
 800077c:	4419      	add	r1, r3
 800077e:	4839      	ldr	r0, [pc, #228]	; (8000864 <linkTimer+0x14c>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	4403      	add	r3, r0
 800078a:	3308      	adds	r3, #8
 800078c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	4934      	ldr	r1, [pc, #208]	; (8000864 <linkTimer+0x14c>)
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	440b      	add	r3, r1
 800079c:	3308      	adds	r3, #8
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <linkTimer+0x144>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4619      	mov	r1, r3
 80007aa:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <linkTimer+0x14c>)
 80007ac:	460b      	mov	r3, r1
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	440b      	add	r3, r1
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	3308      	adds	r3, #8
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d337      	bcc.n	8000830 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <linkTimer+0x144>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80007c6:	7b7a      	ldrb	r2, [r7, #13]
 80007c8:	4926      	ldr	r1, [pc, #152]	; (8000864 <linkTimer+0x14c>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	440b      	add	r3, r1
 80007d4:	3315      	adds	r3, #21
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80007da:	e013      	b.n	8000804 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80007dc:	7b7a      	ldrb	r2, [r7, #13]
 80007de:	4921      	ldr	r1, [pc, #132]	; (8000864 <linkTimer+0x14c>)
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	3315      	adds	r3, #21
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80007f0:	7b7a      	ldrb	r2, [r7, #13]
 80007f2:	491c      	ldr	r1, [pc, #112]	; (8000864 <linkTimer+0x14c>)
 80007f4:	4613      	mov	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	440b      	add	r3, r1
 80007fe:	3315      	adds	r3, #21
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	2b06      	cmp	r3, #6
 8000808:	d00b      	beq.n	8000822 <linkTimer+0x10a>
 800080a:	7b3a      	ldrb	r2, [r7, #12]
 800080c:	4915      	ldr	r1, [pc, #84]	; (8000864 <linkTimer+0x14c>)
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	440b      	add	r3, r1
 8000818:	3308      	adds	r3, #8
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	429a      	cmp	r2, r3
 8000820:	d2dc      	bcs.n	80007dc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000822:	7b7a      	ldrb	r2, [r7, #13]
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fecf 	bl	80005cc <LinkTimerAfter>
 800082e:	e00f      	b.n	8000850 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <linkTimer+0x144>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff0c 	bl	8000658 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <linkTimer+0x144>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <linkTimer+0x148>)
 8000848:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <linkTimer+0x144>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000850:	89fb      	ldrh	r3, [r7, #14]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000260 	.word	0x20000260
 8000860:	20000261 	.word	0x20000261
 8000864:	200001d0 	.word	0x200001d0
 8000868:	20000264 	.word	0x20000264

0800086c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800087c:	4b39      	ldr	r3, [pc, #228]	; (8000964 <UnlinkTimer+0xf8>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	429a      	cmp	r2, r3
 8000886:	d111      	bne.n	80008ac <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000888:	4b36      	ldr	r3, [pc, #216]	; (8000964 <UnlinkTimer+0xf8>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b36      	ldr	r3, [pc, #216]	; (8000968 <UnlinkTimer+0xfc>)
 8000890:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000892:	79fa      	ldrb	r2, [r7, #7]
 8000894:	4935      	ldr	r1, [pc, #212]	; (800096c <UnlinkTimer+0x100>)
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	440b      	add	r3, r1
 80008a0:	3315      	adds	r3, #21
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <UnlinkTimer+0xf8>)
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	e03e      	b.n	800092a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80008ac:	79fa      	ldrb	r2, [r7, #7]
 80008ae:	492f      	ldr	r1, [pc, #188]	; (800096c <UnlinkTimer+0x100>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	440b      	add	r3, r1
 80008ba:	3314      	adds	r3, #20
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	492a      	ldr	r1, [pc, #168]	; (800096c <UnlinkTimer+0x100>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	3315      	adds	r3, #21
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80008d4:	79f9      	ldrb	r1, [r7, #7]
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	4824      	ldr	r0, [pc, #144]	; (800096c <UnlinkTimer+0x100>)
 80008da:	460b      	mov	r3, r1
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	440b      	add	r3, r1
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	4403      	add	r3, r0
 80008e4:	3315      	adds	r3, #21
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2d8      	uxtb	r0, r3
 80008ea:	4920      	ldr	r1, [pc, #128]	; (800096c <UnlinkTimer+0x100>)
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	440b      	add	r3, r1
 80008f6:	3315      	adds	r3, #21
 80008f8:	4602      	mov	r2, r0
 80008fa:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008fc:	7bbb      	ldrb	r3, [r7, #14]
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d013      	beq.n	800092a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000902:	79f9      	ldrb	r1, [r7, #7]
 8000904:	7bba      	ldrb	r2, [r7, #14]
 8000906:	4819      	ldr	r0, [pc, #100]	; (800096c <UnlinkTimer+0x100>)
 8000908:	460b      	mov	r3, r1
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	440b      	add	r3, r1
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	4403      	add	r3, r0
 8000912:	3314      	adds	r3, #20
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2d8      	uxtb	r0, r3
 8000918:	4914      	ldr	r1, [pc, #80]	; (800096c <UnlinkTimer+0x100>)
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	440b      	add	r3, r1
 8000924:	3314      	adds	r3, #20
 8000926:	4602      	mov	r2, r0
 8000928:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	490f      	ldr	r1, [pc, #60]	; (800096c <UnlinkTimer+0x100>)
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	440b      	add	r3, r1
 8000938:	330c      	adds	r3, #12
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <UnlinkTimer+0xf8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b06      	cmp	r3, #6
 8000946:	d107      	bne.n	8000958 <UnlinkTimer+0xec>
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d104      	bne.n	8000958 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <UnlinkTimer+0x104>)
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	601a      	str	r2, [r3, #0]
  }

  return;
 8000956:	bf00      	nop
 8000958:	bf00      	nop
}
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20000260 	.word	0x20000260
 8000968:	20000261 	.word	0x20000261
 800096c:	200001d0 	.word	0x200001d0
 8000970:	20000264 	.word	0x20000264

08000974 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <ReturnTimeElapsed+0x70>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000982:	d026      	beq.n	80009d2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000984:	f7ff fe02 	bl	800058c <ReadRtcSsrValue>
 8000988:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <ReturnTimeElapsed+0x70>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	d805      	bhi.n	80009a0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <ReturnTimeElapsed+0x70>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	e00a      	b.n	80009b6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <ReturnTimeElapsed+0x74>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <ReturnTimeElapsed+0x70>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <ReturnTimeElapsed+0x78>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <ReturnTimeElapsed+0x7c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	40d3      	lsrs	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	e001      	b.n	80009d6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	b29b      	uxth	r3, r3
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000264 	.word	0x20000264
 80009e8:	200002a6 	.word	0x200002a6
 80009ec:	200002a5 	.word	0x200002a5
 80009f0:	200002a4 	.word	0x200002a4

080009f4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d108      	bne.n	8000a16 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a04:	f7ff fdc2 	bl	800058c <ReadRtcSsrValue>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <RestartWakeupCounter+0xa8>)
 8000a0c:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f001 fbf9 	bl	8002206 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000a14:	e03e      	b.n	8000a94 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d803      	bhi.n	8000a24 <RestartWakeupCounter+0x30>
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <RestartWakeupCounter+0xac>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d002      	beq.n	8000a2a <RestartWakeupCounter+0x36>
      Value -= 1;
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000a2a:	bf00      	nop
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <RestartWakeupCounter+0xb0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0f7      	beq.n	8000a2c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <RestartWakeupCounter+0xb0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <RestartWakeupCounter+0xb0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000a50:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <RestartWakeupCounter+0xb4>)
 8000a54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a58:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	f001 fbe1 	bl	8002222 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <RestartWakeupCounter+0xb8>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	0c1b      	lsrs	r3, r3, #16
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	88fa      	ldrh	r2, [r7, #6]
 8000a6a:	4910      	ldr	r1, [pc, #64]	; (8000aac <RestartWakeupCounter+0xb8>)
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a70:	f7ff fd8c 	bl	800058c <ReadRtcSsrValue>
 8000a74:	4602      	mov	r2, r0
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <RestartWakeupCounter+0xa8>)
 8000a78:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <RestartWakeupCounter+0xb0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <RestartWakeupCounter+0xb0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a8c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000a8e:	f3af 8000 	nop.w
  return ;
 8000a92:	bf00      	nop
}
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000264 	.word	0x20000264
 8000aa0:	200002a4 	.word	0x200002a4
 8000aa4:	200002a0 	.word	0x200002a0
 8000aa8:	58000800 	.word	0x58000800
 8000aac:	40002800 	.word	0x40002800

08000ab0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000ab6:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <RescheduleTimerList+0x124>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ac2:	d108      	bne.n	8000ad6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000ac4:	bf00      	nop
 8000ac6:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <RescheduleTimerList+0x128>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1f7      	bne.n	8000ac6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000ad6:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <RescheduleTimerList+0x128>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <RescheduleTimerList+0x128>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ae8:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <RescheduleTimerList+0x12c>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000af0:	7bfa      	ldrb	r2, [r7, #15]
 8000af2:	493b      	ldr	r1, [pc, #236]	; (8000be0 <RescheduleTimerList+0x130>)
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	440b      	add	r3, r1
 8000afe:	3308      	adds	r3, #8
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000b04:	f7ff ff36 	bl	8000974 <ReturnTimeElapsed>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d205      	bcs.n	8000b20 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <RescheduleTimerList+0x134>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e04d      	b.n	8000bbc <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	4a31      	ldr	r2, [pc, #196]	; (8000be8 <RescheduleTimerList+0x138>)
 8000b24:	8812      	ldrh	r2, [r2, #0]
 8000b26:	b292      	uxth	r2, r2
 8000b28:	4413      	add	r3, r2
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d906      	bls.n	8000b40 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000b32:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <RescheduleTimerList+0x138>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <RescheduleTimerList+0x134>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e03d      	b.n	8000bbc <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <RescheduleTimerList+0x134>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b50:	e034      	b.n	8000bbc <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000b52:	7bfa      	ldrb	r2, [r7, #15]
 8000b54:	4922      	ldr	r1, [pc, #136]	; (8000be0 <RescheduleTimerList+0x130>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	440b      	add	r3, r1
 8000b60:	3308      	adds	r3, #8
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d20a      	bcs.n	8000b80 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000b6a:	7bfa      	ldrb	r2, [r7, #15]
 8000b6c:	491c      	ldr	r1, [pc, #112]	; (8000be0 <RescheduleTimerList+0x130>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3308      	adds	r3, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e013      	b.n	8000ba8 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	4917      	ldr	r1, [pc, #92]	; (8000be0 <RescheduleTimerList+0x130>)
 8000b84:	4613      	mov	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	440b      	add	r3, r1
 8000b8e:	3308      	adds	r3, #8
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	7bfa      	ldrb	r2, [r7, #15]
 8000b96:	1ac9      	subs	r1, r1, r3
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <RescheduleTimerList+0x130>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	4403      	add	r3, r0
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <RescheduleTimerList+0x130>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3315      	adds	r3, #21
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d1c7      	bne.n	8000b52 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000bc2:	89bb      	ldrh	r3, [r7, #12]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff15 	bl	80009f4 <RestartWakeupCounter>

  return ;
 8000bca:	bf00      	nop
}
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40002800 	.word	0x40002800
 8000bd8:	200002a0 	.word	0x200002a0
 8000bdc:	20000260 	.word	0x20000260
 8000be0:	200001d0 	.word	0x200001d0
 8000be4:	20000268 	.word	0x20000268
 8000be8:	200002a8 	.word	0x200002a8

08000bec <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8000bf6:	617b      	str	r3, [r7, #20]
  return(result);
 8000bf8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bfe:	4b5e      	ldr	r3, [pc, #376]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	22ca      	movs	r2, #202	; 0xca
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24
 8000c08:	4b5b      	ldr	r3, [pc, #364]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2253      	movs	r2, #83	; 0x53
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000c12:	4b59      	ldr	r3, [pc, #356]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c24:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000c26:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000c2e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c32:	4953      	ldr	r1, [pc, #332]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c34:	4613      	mov	r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4413      	add	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	440b      	add	r3, r1
 8000c3e:	330c      	adds	r3, #12
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d170      	bne.n	8000d2a <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000c48:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c4c:	494c      	ldr	r1, [pc, #304]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000c5c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c60:	4947      	ldr	r1, [pc, #284]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3310      	adds	r3, #16
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000c72:	4b44      	ldr	r3, [pc, #272]	; (8000d84 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d04e      	beq.n	8000d1a <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000c7c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c80:	493f      	ldr	r1, [pc, #252]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	440b      	add	r3, r1
 8000c8c:	330d      	adds	r3, #13
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d125      	bne.n	8000ce2 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000c96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fde5 	bl	800086c <UnlinkTimer>
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000cac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cb0:	4933      	ldr	r1, [pc, #204]	; (8000d80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	440b      	add	r3, r1
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f9d0 	bl	800106c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	22ca      	movs	r2, #202	; 0xca
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2253      	movs	r2, #83	; 0x53
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
 8000ce0:	e013      	b.n	8000d0a <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f931 	bl	8000f58 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	22ca      	movs	r2, #202	; 0xca
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2253      	movs	r2, #83	; 0x53
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	4619      	mov	r1, r3
 8000d12:	69b8      	ldr	r0, [r7, #24]
 8000d14:	f000 fa30 	bl	8001178 <HW_TS_RTC_Int_AppNot>
 8000d18:	e024      	b.n	8000d64 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000d1a:	f7ff fec9 	bl	8000ab0 <RescheduleTimerList>
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	f383 8810 	msr	PRIMASK, r3
 8000d28:	e01c      	b.n	8000d64 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d2a:	bf00      	nop
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f7      	beq.n	8000d2c <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d50:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	22ff      	movs	r2, #255	; 0xff
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000d6e:	bf00      	nop
}
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200002a0 	.word	0x200002a0
 8000d7c:	20000260 	.word	0x20000260
 8000d80:	200001d0 	.word	0x200001d0
 8000d84:	20000268 	.word	0x20000268
 8000d88:	58000800 	.word	0x58000800

08000d8c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000d98:	4a64      	ldr	r2, [pc, #400]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d9e:	4b63      	ldr	r3, [pc, #396]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	22ca      	movs	r2, #202	; 0xca
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
 8000da8:	4b60      	ldr	r3, [pc, #384]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2253      	movs	r2, #83	; 0x53
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000db2:	4b5f      	ldr	r3, [pc, #380]	; (8000f30 <HW_TS_Init+0x1a4>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4a5e      	ldr	r2, [pc, #376]	; (8000f30 <HW_TS_Init+0x1a4>)
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000dbe:	4b5c      	ldr	r3, [pc, #368]	; (8000f30 <HW_TS_Init+0x1a4>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f1c3 0304 	rsb	r3, r3, #4
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b58      	ldr	r3, [pc, #352]	; (8000f34 <HW_TS_Init+0x1a8>)
 8000dd2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000dd4:	4b56      	ldr	r3, [pc, #344]	; (8000f30 <HW_TS_Init+0x1a4>)
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000ddc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000de0:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	fa92 f2a2 	rbit	r2, r2
 8000de8:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	2a00      	cmp	r2, #0
 8000df2:	d101      	bne.n	8000df8 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000df4:	2220      	movs	r2, #32
 8000df6:	e003      	b.n	8000e00 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	40d3      	lsrs	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <HW_TS_Init+0x1ac>)
 8000e0a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000e0c:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <HW_TS_Init+0x1a4>)
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	3301      	adds	r3, #1
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b47      	ldr	r3, [pc, #284]	; (8000f3c <HW_TS_Init+0x1b0>)
 8000e1e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000e20:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <HW_TS_Init+0x1b0>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	4a44      	ldr	r2, [pc, #272]	; (8000f38 <HW_TS_Init+0x1ac>)
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000e32:	4a40      	ldr	r2, [pc, #256]	; (8000f34 <HW_TS_Init+0x1a8>)
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	40d3      	lsrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d904      	bls.n	8000e4e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <HW_TS_Init+0x1b4>)
 8000e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4a:	801a      	strh	r2, [r3, #0]
 8000e4c:	e003      	b.n	8000e56 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <HW_TS_Init+0x1b4>)
 8000e54:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000e56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e5a:	f7ff fb85 	bl	8000568 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000e5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e62:	f7ff fb6d 	bl	8000540 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d143      	bne.n	8000ef4 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e6c:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <HW_TS_Init+0x1b8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e72:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <HW_TS_Init+0x1bc>)
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	77fb      	strb	r3, [r7, #31]
 8000e7e:	e00c      	b.n	8000e9a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000e80:	7ffa      	ldrb	r2, [r7, #31]
 8000e82:	4932      	ldr	r1, [pc, #200]	; (8000f4c <HW_TS_Init+0x1c0>)
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	440b      	add	r3, r1
 8000e8e:	330c      	adds	r3, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000e94:	7ffb      	ldrb	r3, [r7, #31]
 8000e96:	3301      	adds	r3, #1
 8000e98:	77fb      	strb	r3, [r7, #31]
 8000e9a:	7ffb      	ldrb	r3, [r7, #31]
 8000e9c:	2b05      	cmp	r3, #5
 8000e9e:	d9ef      	bls.n	8000e80 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <HW_TS_Init+0x1c4>)
 8000ea2:	2206      	movs	r2, #6
 8000ea4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eb8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ece:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <HW_TS_Init+0x1c8>)
 8000ed2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ed6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f001 f9a2 	bl	8002222 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	e00a      	b.n	8000f0a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f001 f97e 	bl	8002206 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HW_TS_Init+0x1a0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000f14:	2200      	movs	r2, #0
 8000f16:	2106      	movs	r1, #6
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f001 f93a 	bl	8002192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f001 f951 	bl	80021c6 <HAL_NVIC_EnableIRQ>

  return;
 8000f24:	bf00      	nop
}
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200002a0 	.word	0x200002a0
 8000f30:	40002800 	.word	0x40002800
 8000f34:	200002a4 	.word	0x200002a4
 8000f38:	200002a5 	.word	0x200002a5
 8000f3c:	200002a6 	.word	0x200002a6
 8000f40:	200002a8 	.word	0x200002a8
 8000f44:	20000268 	.word	0x20000268
 8000f48:	20000264 	.word	0x20000264
 8000f4c:	200001d0 	.word	0x200001d0
 8000f50:	20000260 	.word	0x20000260
 8000f54:	58000800 	.word	0x58000800

08000f58 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f62:	f3ef 8310 	mrs	r3, PRIMASK
 8000f66:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f68:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f001 f937 	bl	80021e2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <HW_TS_Stop+0xfc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	22ca      	movs	r2, #202	; 0xca
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <HW_TS_Stop+0xfc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2253      	movs	r2, #83	; 0x53
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	4933      	ldr	r1, [pc, #204]	; (8001058 <HW_TS_Stop+0x100>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	440b      	add	r3, r1
 8000f96:	330c      	adds	r3, #12
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d148      	bne.n	8001032 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fc61 	bl	800086c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000faa:	4b2c      	ldr	r3, [pc, #176]	; (800105c <HW_TS_Stop+0x104>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fb0:	7cfb      	ldrb	r3, [r7, #19]
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d135      	bne.n	8001022 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <HW_TS_Stop+0x108>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc2:	d108      	bne.n	8000fd6 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000fc4:	bf00      	nop
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <HW_TS_Stop+0xfc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f7      	bne.n	8000fc6 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HW_TS_Stop+0xfc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HW_TS_Stop+0xfc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fea:	bf00      	nop
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HW_TS_Stop+0xfc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f7      	beq.n	8000fec <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HW_TS_Stop+0xfc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HW_TS_Stop+0xfc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001010:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HW_TS_Stop+0x10c>)
 8001014:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001018:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800101a:	2003      	movs	r0, #3
 800101c:	f001 f901 	bl	8002222 <HAL_NVIC_ClearPendingIRQ>
 8001020:	e007      	b.n	8001032 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HW_TS_Stop+0x110>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	7cfa      	ldrb	r2, [r7, #19]
 800102a:	429a      	cmp	r2, r3
 800102c:	d001      	beq.n	8001032 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800102e:	f7ff fd3f 	bl	8000ab0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HW_TS_Stop+0xfc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800103c:	2003      	movs	r0, #3
 800103e:	f001 f8c2 	bl	80021c6 <HAL_NVIC_EnableIRQ>
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800104c:	bf00      	nop
}
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200002a0 	.word	0x200002a0
 8001058:	200001d0 	.word	0x200001d0
 800105c:	20000260 	.word	0x20000260
 8001060:	40002800 	.word	0x40002800
 8001064:	58000800 	.word	0x58000800
 8001068:	20000261 	.word	0x20000261

0800106c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001078:	79fa      	ldrb	r2, [r7, #7]
 800107a:	493b      	ldr	r1, [pc, #236]	; (8001168 <HW_TS_Start+0xfc>)
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	330c      	adds	r3, #12
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d103      	bne.n	8001098 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff60 	bl	8000f58 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001098:	f3ef 8310 	mrs	r3, PRIMASK
 800109c:	60fb      	str	r3, [r7, #12]
  return(result);
 800109e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80010a2:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80010a4:	2003      	movs	r0, #3
 80010a6:	f001 f89c 	bl	80021e2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <HW_TS_Start+0x100>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	22ca      	movs	r2, #202	; 0xca
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HW_TS_Start+0x100>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2253      	movs	r2, #83	; 0x53
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	4929      	ldr	r1, [pc, #164]	; (8001168 <HW_TS_Start+0xfc>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	330c      	adds	r3, #12
 80010ce:	2202      	movs	r2, #2
 80010d0:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	4924      	ldr	r1, [pc, #144]	; (8001168 <HW_TS_Start+0xfc>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	3308      	adds	r3, #8
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	491f      	ldr	r1, [pc, #124]	; (8001168 <HW_TS_Start+0xfc>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	3304      	adds	r3, #4
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fb0b 	bl	8000718 <linkTimer>
 8001102:	4603      	mov	r3, r0
 8001104:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HW_TS_Start+0x104>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HW_TS_Start+0x108>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	7c7a      	ldrb	r2, [r7, #17]
 8001114:	429a      	cmp	r2, r3
 8001116:	d002      	beq.n	800111e <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001118:	f7ff fcca 	bl	8000ab0 <RescheduleTimerList>
 800111c:	e013      	b.n	8001146 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800111e:	79fa      	ldrb	r2, [r7, #7]
 8001120:	4911      	ldr	r1, [pc, #68]	; (8001168 <HW_TS_Start+0xfc>)
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	440b      	add	r3, r1
 800112c:	3308      	adds	r3, #8
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	8a7b      	ldrh	r3, [r7, #18]
 8001132:	79fa      	ldrb	r2, [r7, #7]
 8001134:	1ac9      	subs	r1, r1, r3
 8001136:	480c      	ldr	r0, [pc, #48]	; (8001168 <HW_TS_Start+0xfc>)
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4403      	add	r3, r0
 8001142:	3308      	adds	r3, #8
 8001144:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HW_TS_Start+0x100>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	22ff      	movs	r2, #255	; 0xff
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001150:	2003      	movs	r0, #3
 8001152:	f001 f838 	bl	80021c6 <HAL_NVIC_EnableIRQ>
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001160:	bf00      	nop
}
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001d0 	.word	0x200001d0
 800116c:	200002a0 	.word	0x200002a0
 8001170:	20000260 	.word	0x20000260
 8001174:	20000261 	.word	0x20000261

08001178 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	460b      	mov	r3, r1
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4798      	blx	r3

  return;
 800118a:	bf00      	nop
}
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <LL_AHB2_GRP1_EnableClock>:
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800119a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4013      	ands	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_I2C1_Init+0x74>)
 80011fe:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <MX_I2C1_Init+0x78>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_I2C1_Init+0x74>)
 8001204:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <MX_I2C1_Init+0x7c>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_I2C1_Init+0x74>)
 8001210:	2201      	movs	r2, #1
 8001212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_I2C1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_I2C1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <MX_I2C1_Init+0x74>)
 8001234:	f001 f9b0 	bl	8002598 <HAL_I2C_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800123e:	f000 f98f 	bl	8001560 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <MX_I2C1_Init+0x74>)
 8001246:	f001 fe1b 	bl	8002e80 <HAL_I2CEx_ConfigAnalogFilter>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001250:	f000 f986 	bl	8001560 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001254:	2100      	movs	r1, #0
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_I2C1_Init+0x74>)
 8001258:	f001 fe5d 	bl	8002f16 <HAL_I2CEx_ConfigDigitalFilter>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001262:	f000 f97d 	bl	8001560 <Error_Handler>
  }

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20004d84 	.word	0x20004d84
 8001270:	40005400 	.word	0x40005400
 8001274:	00707cbb 	.word	0x00707cbb

08001278 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_I2C_MspInit+0x68>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d11e      	bne.n	80012d8 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2002      	movs	r0, #2
 800129c:	f7ff ff79 	bl	8001192 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a0:	23c0      	movs	r3, #192	; 0xc0
 80012a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a4:	2312      	movs	r3, #18
 80012a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b0:	2304      	movs	r3, #4
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	480a      	ldr	r0, [pc, #40]	; (80012e4 <HAL_I2C_MspInit+0x6c>)
 80012bc:	f000 ffc0 	bl	8002240 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012c4:	f7ff ff7e 	bl	80011c4 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2105      	movs	r1, #5
 80012cc:	201e      	movs	r0, #30
 80012ce:	f000 ff60 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012d2:	201e      	movs	r0, #30
 80012d4:	f000 ff77 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40005400 	.word	0x40005400
 80012e4:	48000400 	.word	0x48000400

080012e8 <toggleLed>:
 *      Author: patrick
 */

#include "led.h"

void toggleLed(uint8_t red, uint8_t green, uint8_t blue){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	460b      	mov	r3, r1
 80012f4:	71bb      	strb	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	717b      	strb	r3, [r7, #5]
	if(red){
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <toggleLed+0x24>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2102      	movs	r1, #2
 8001304:	4815      	ldr	r0, [pc, #84]	; (800135c <toggleLed+0x74>)
 8001306:	f001 f90b 	bl	8002520 <HAL_GPIO_WritePin>
 800130a:	e004      	b.n	8001316 <toggleLed+0x2e>
	}
	else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2102      	movs	r1, #2
 8001310:	4812      	ldr	r0, [pc, #72]	; (800135c <toggleLed+0x74>)
 8001312:	f001 f905 	bl	8002520 <HAL_GPIO_WritePin>
	}

	if(blue){
 8001316:	797b      	ldrb	r3, [r7, #5]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <toggleLed+0x42>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2110      	movs	r1, #16
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f001 f8fc 	bl	8002520 <HAL_GPIO_WritePin>
 8001328:	e005      	b.n	8001336 <toggleLed+0x4e>
		}
		else{
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	2110      	movs	r1, #16
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f001 f8f5 	bl	8002520 <HAL_GPIO_WritePin>
		}

	if(green){
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <toggleLed+0x60>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2101      	movs	r1, #1
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <toggleLed+0x74>)
 8001342:	f001 f8ed 	bl	8002520 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
		}
}
 8001346:	e004      	b.n	8001352 <toggleLed+0x6a>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2101      	movs	r1, #1
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <toggleLed+0x74>)
 800134e:	f001 f8e7 	bl	8002520 <HAL_GPIO_WritePin>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	48000400 	.word	0x48000400

08001360 <LL_RCC_LSE_SetDriveCapability>:
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001370:	f023 0218 	bic.w	r2, r3, #24
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137a:	4313      	orrs	r3, r2
 800137c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001390:	f000 fd66 	bl	8001e60 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001394:	f000 f9fd 	bl	8001792 <_Z12Reset_Devicev>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001398:	f000 f814 	bl	80013c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 800139c:	f000 fa24 	bl	80017e8 <_Z9Init_Extiv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a0:	f7ff f88e 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013a4:	f7ff ff28 	bl	80011f8 <MX_I2C1_Init>
  MX_RF_Init();
 80013a8:	f000 fa2a 	bl	8001800 <MX_RF_Init>
  MX_RTC_Init();
 80013ac:	f000 fa5a 	bl	8001864 <MX_RTC_Init>
  MX_USB_Device_Init();
 80013b0:	f00e fcb2 	bl	800fd18 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80013b4:	f009 fc7a 	bl	800acac <osKernelInitialize>
  MX_FREERTOS_Init();
 80013b8:	f7ff f83e 	bl	8000438 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 80013bc:	f009 fcaa 	bl	800ad14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <main+0x34>
	...

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0ae      	sub	sp, #184	; 0xb8
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ce:	2248      	movs	r2, #72	; 0x48
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00f fa3b 	bl	801084e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2250      	movs	r2, #80	; 0x50
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00f fa2b 	bl	801084e <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001406:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f023 0303 	bic.w	r3, r3, #3
 8001412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800141c:	f002 fd00 	bl	8003e20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ff9d 	bl	8001360 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <SystemClock_Config+0x174>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800142e:	4a42      	ldr	r2, [pc, #264]	; (8001538 <SystemClock_Config+0x174>)
 8001430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b40      	ldr	r3, [pc, #256]	; (8001538 <SystemClock_Config+0x174>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001442:	2327      	movs	r3, #39	; 0x27
 8001444:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800144c:	2301      	movs	r3, #1
 800144e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001456:	2301      	movs	r3, #1
 8001458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145c:	2340      	movs	r3, #64	; 0x40
 800145e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001468:	2360      	movs	r3, #96	; 0x60
 800146a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001478:	4618      	mov	r0, r3
 800147a:	f003 f881 	bl	8004580 <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800148e:	f000 f867 	bl	8001560 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001492:	236f      	movs	r3, #111	; 0x6f
 8001494:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001496:	2302      	movs	r3, #2
 8001498:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014b2:	2101      	movs	r1, #1
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fbef 	bl	8004c98 <HAL_RCC_ClockConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80014ca:	f000 f849 	bl	8001560 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80014ce:	f643 1304 	movw	r3, #14596	; 0x3904
 80014d2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80014d4:	2318      	movs	r3, #24
 80014d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80014d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80014de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014e2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80014e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014e8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80014ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014f0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001500:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001506:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001508:	2300      	movs	r3, #0
 800150a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800150c:	2310      	movs	r3, #16
 800150e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4618      	mov	r0, r3
 8001514:	f004 f82a 	bl	800556c <HAL_RCCEx_PeriphCLKConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf14      	ite	ne
 800151e:	2301      	movne	r3, #1
 8001520:	2300      	moveq	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x168>
  {
    Error_Handler();
 8001528:	f000 f81a 	bl	8001560 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800152c:	f004 f993 	bl	8005856 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001530:	bf00      	nop
 8001532:	37b8      	adds	r7, #184	; 0xb8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	58000400 	.word	0x58000400

0800153c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800154e:	f000 fca7 	bl	8001ea0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40012c00 	.word	0x40012c00

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001566:	e7fe      	b.n	8001566 <Error_Handler+0x6>

08001568 <LL_EXTI_DisableIT_0_31>:
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <LL_EXTI_DisableIT_0_31+0x28>)
 8001572:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	43db      	mvns	r3, r3
 800157a:	4905      	ldr	r1, [pc, #20]	; (8001590 <LL_EXTI_DisableIT_0_31+0x28>)
 800157c:	4013      	ands	r3, r2
 800157e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	58000800 	.word	0x58000800

08001594 <LL_EXTI_DisableIT_32_63>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <LL_EXTI_DisableIT_32_63+0x28>)
 800159e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4905      	ldr	r1, [pc, #20]	; (80015bc <LL_EXTI_DisableIT_32_63+0x28>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	58000800 	.word	0x58000800

080015c0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001618:	d101      	bne.n	800161e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800163e:	d101      	bne.n	8001644 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_AHB3_GRP1_EnableClock>:
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001664:	4313      	orrs	r3, r2
 8001666:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001674:	68fb      	ldr	r3, [r7, #12]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	605a      	str	r2, [r3, #4]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	605a      	str	r2, [r3, #4]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	041b      	lsls	r3, r3, #16
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	615a      	str	r2, [r3, #20]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	615a      	str	r2, [r3, #20]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	609a      	str	r2, [r3, #8]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_Z6myMainv>:
struct ADC_DATA adc_data;

//uint16_t adc_data[4];
volatile uint16_t temp;

int myMain(void){
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0

#ifdef SOLAR_SENSOR_NODE
	#ifndef SOLAR_SENSOR_NODE_I2C_DISABLE

//		HAL_Delay(500);
		powerMeasSetup();
 800174a:	f000 f92f 	bl	80019ac <powerMeasSetup>
		HAL_Delay(100);
 800174e:	2064      	movs	r0, #100	; 0x64
 8001750:	f000 fbd2 	bl	8001ef8 <HAL_Delay>
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
//			HAL_Delay(500);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
		  }
#endif
}
 8001754:	bf00      	nop
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}

0800175a <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800175e:	f7ff ff51 	bl	8001604 <LL_RCC_IsActiveFlag_PINRST>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <_Z18Reset_BackupDomainv+0x1c>
 8001768:	f7ff ff5f 	bl	800162a <LL_RCC_IsActiveFlag_SFTRST>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <_Z18Reset_BackupDomainv+0x1c>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <_Z18Reset_BackupDomainv+0x1e>
 8001776:	2300      	movs	r3, #0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800177c:	f002 fb50 	bl	8003e20 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001780:	f002 fb4e 	bl	8003e20 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001784:	f7ff ff1c 	bl	80015c0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001788:	f7ff ff2b 	bl	80015e2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800178c:	bf00      	nop
 800178e:	bf00      	nop
}
 8001790:	bd80      	pop	{r7, pc}

08001792 <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8001796:	f7ff ffe0 	bl	800175a <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 800179a:	f000 f803 	bl	80017a4 <_Z10Reset_IPCCv>
#endif

  return;
 800179e:	bf00      	nop
}
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80017a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80017ac:	f7ff ff50 	bl	8001650 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80017b0:	213f      	movs	r1, #63	; 0x3f
 80017b2:	480c      	ldr	r0, [pc, #48]	; (80017e4 <_Z10Reset_IPCCv+0x40>)
 80017b4:	f7ff ffab 	bl	800170e <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80017b8:	213f      	movs	r1, #63	; 0x3f
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <_Z10Reset_IPCCv+0x40>)
 80017bc:	f7ff ffb5 	bl	800172a <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80017c0:	213f      	movs	r1, #63	; 0x3f
 80017c2:	4808      	ldr	r0, [pc, #32]	; (80017e4 <_Z10Reset_IPCCv+0x40>)
 80017c4:	f7ff ff5d 	bl	8001682 <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80017c8:	213f      	movs	r1, #63	; 0x3f
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <_Z10Reset_IPCCv+0x40>)
 80017cc:	f7ff ff7c 	bl	80016c8 <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80017d0:	213f      	movs	r1, #63	; 0x3f
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <_Z10Reset_IPCCv+0x40>)
 80017d4:	f7ff ff67 	bl	80016a6 <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80017d8:	213f      	movs	r1, #63	; 0x3f
 80017da:	4802      	ldr	r0, [pc, #8]	; (80017e4 <_Z10Reset_IPCCv+0x40>)
 80017dc:	f7ff ff86 	bl	80016ec <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80017e0:	bf00      	nop
}
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	58000c00 	.word	0x58000c00

080017e8 <_Z9Init_Extiv>:

void Init_Exti( void )
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff feba 	bl	8001568 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80017f4:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80017f8:	f7ff fecc 	bl	8001594 <LL_EXTI_DisableIT_32_63>

  return;
 80017fc:	bf00      	nop
}
 80017fe:	bd80      	pop	{r7, pc}

08001800 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_RCC_EnableRTC>:
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_APB1_GRP1_EnableClock>:
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800183e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4313      	orrs	r3, r2
 8001846:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001854:	68fb      	ldr	r3, [r7, #12]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_RTC_Init+0x4c>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MX_RTC_Init+0x50>)
 800186c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_RTC_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_RTC_Init+0x4c>)
 8001876:	220f      	movs	r2, #15
 8001878:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <MX_RTC_Init+0x4c>)
 800187c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001880:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_RTC_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_RTC_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_RTC_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_RTC_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_RTC_Init+0x4c>)
 800189c:	f004 f8f2 	bl	8005a84 <HAL_RTC_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80018a6:	f7ff fe5b 	bl	8001560 <Error_Handler>
  }

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20004dd0 	.word	0x20004dd0
 80018b4:	40002800 	.word	0x40002800

080018b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_RTC_MspInit+0x28>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d105      	bne.n	80018d6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018ca:	f7ff ffa0 	bl	800180e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80018ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018d2:	f7ff ffad 	bl	8001830 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40002800 	.word	0x40002800

080018e4 <measMsgReceivedFromNode>:
volatile struct SerialMsg serialMsg = {
		.endOfLine="end\r\n"
};

char end_of_line[13] = "end\r\n";
void measMsgReceivedFromNode(struct MeasMsg* msg){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	// send over UART if USB UART active
#if USB_UART_ACTIVE
	// TODO correct for proper angle
	position[0] = 0;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <measMsgReceivedFromNode+0x48>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
	position[1] = 0;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <measMsgReceivedFromNode+0x48>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	705a      	strb	r2, [r3, #1]

//	CDC_Transmit_FS(position, sizeof(position));
	taskENTER_CRITICAL();
 80018f8:	f00c fee0 	bl	800e6bc <vPortEnterCritical>
	memcpy((struct MeasMsg*) &serialMsg.measMsg, msg, sizeof(struct MeasMsg));
 80018fc:	2214      	movs	r2, #20
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <measMsgReceivedFromNode+0x4c>)
 8001902:	f00e ff99 	bl	8010838 <memcpy>
	CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(struct SerialMsg));
 8001906:	2124      	movs	r1, #36	; 0x24
 8001908:	4809      	ldr	r0, [pc, #36]	; (8001930 <measMsgReceivedFromNode+0x4c>)
 800190a:	f00e fac3 	bl	800fe94 <CDC_Transmit_FS>
	osDelay(1);
 800190e:	2001      	movs	r0, #1
 8001910:	f009 fbd2 	bl	800b0b8 <osDelay>
	taskEXIT_CRITICAL();
 8001914:	f00c ff00 	bl	800e718 <vPortExitCritical>

	// TODO check if power rating in table is lower than current one
	//		if so, replace and record current angle measurements

	// TODO if all expected nodes have replied, move to next Spotlight position
	osThreadFlagsSet (defaultTaskHandle, CAL_THREAD_FLAG);
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <measMsgReceivedFromNode+0x50>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2103      	movs	r1, #3
 800191e:	4618      	mov	r0, r3
 8001920:	f009 fad4 	bl	800aecc <osThreadFlagsSet>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20004e08 	.word	0x20004e08
 8001930:	20000004 	.word	0x20000004
 8001934:	2000029c 	.word	0x2000029c

08001938 <sendPowerMeasurement>:

#ifdef SOLAR_SENSOR_NODE
void sendPowerMeasurement(otIp6Address peerAddr, int32_t angle_1, int32_t angle_2){
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af04      	add	r7, sp, #16
 800193e:	463c      	mov	r4, r7
 8001940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#ifndef SOLAR_SENSOR_NODE_I2C_DISABLE
	measMsg.angle_1 = angle_1;
 8001944:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <sendPowerMeasurement+0x68>)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	6053      	str	r3, [r2, #4]
	measMsg.angle_2 = angle_2;
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <sendPowerMeasurement+0x68>)
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	6093      	str	r3, [r2, #8]
	measMsg.power = getPower();
 8001950:	f000 f84a 	bl	80019e8 <getPower>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <sendPowerMeasurement+0x68>)
 800195a:	819a      	strh	r2, [r3, #12]
	measMsg.current = getCurrent();
 800195c:	f000 f878 	bl	8001a50 <getCurrent>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <sendPowerMeasurement+0x68>)
 8001966:	81da      	strh	r2, [r3, #14]
	measMsg.shuntVoltage = getShuntVoltage();
 8001968:	f000 f8cc 	bl	8001b04 <getShuntVoltage>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <sendPowerMeasurement+0x68>)
 8001972:	821a      	strh	r2, [r3, #16]
	measMsg.busVoltage = getBusVoltage();
 8001974:	f000 f892 	bl	8001a9c <getBusVoltage>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <sendPowerMeasurement+0x68>)
 800197e:	825a      	strh	r2, [r3, #18]
#endif
	APP_THREAD_SendCoapMsg(&measMsg, sizeof(struct MeasMsg),
 8001980:	2301      	movs	r3, #1
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	2303      	movs	r3, #3
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2300      	movs	r3, #0
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <sendPowerMeasurement+0x6c>)
 800198e:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <sendPowerMeasurement+0x70>)
 8001990:	2114      	movs	r1, #20
 8001992:	4803      	ldr	r0, [pc, #12]	; (80019a0 <sendPowerMeasurement+0x68>)
 8001994:	f00d fc68 	bl	800f268 <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeSpotResource,
			NO_ACK, OT_COAP_CODE_PUT, 1U);
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	20004df4 	.word	0x20004df4
 80019a4:	08010d84 	.word	0x08010d84
 80019a8:	20004eb0 	.word	0x20004eb0

080019ac <powerMeasSetup>:

void powerMeasSetup(void){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af02      	add	r7, sp, #8
	  uint8_t packet[3];
	  packet[0]= 0x05;
 80019b2:	2305      	movs	r3, #5
 80019b4:	713b      	strb	r3, [r7, #4]
	  packet[1]= 0x66;
 80019b6:	2366      	movs	r3, #102	; 0x66
 80019b8:	717b      	strb	r3, [r7, #5]
	  packet[2]= 0xD0;
 80019ba:	23d0      	movs	r3, #208	; 0xd0
 80019bc:	71bb      	strb	r3, [r7, #6]
	  while(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, packet, 3, 100)){
 80019be:	e002      	b.n	80019c6 <powerMeasSetup+0x1a>
		  osDelay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f009 fb79 	bl	800b0b8 <osDelay>
	  while(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, packet, 3, 100)){
 80019c6:	1d3a      	adds	r2, r7, #4
 80019c8:	2364      	movs	r3, #100	; 0x64
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2303      	movs	r3, #3
 80019ce:	2188      	movs	r1, #136	; 0x88
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <powerMeasSetup+0x38>)
 80019d2:	f000 fe71 	bl	80026b8 <HAL_I2C_Master_Transmit>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f1      	bne.n	80019c0 <powerMeasSetup+0x14>
	  }
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20004d84 	.word	0x20004d84

080019e8 <getPower>:

uint16_t getPower(){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af02      	add	r7, sp, #8

  uint8_t packet = 0x03;
 80019ee:	2303      	movs	r3, #3
 80019f0:	717b      	strb	r3, [r7, #5]
//  HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100);
  while(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100)){
 80019f2:	e002      	b.n	80019fa <getPower+0x12>
  		  osDelay(1);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f009 fb5f 	bl	800b0b8 <osDelay>
  while(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100)){
 80019fa:	1d7a      	adds	r2, r7, #5
 80019fc:	2364      	movs	r3, #100	; 0x64
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2301      	movs	r3, #1
 8001a02:	2188      	movs	r1, #136	; 0x88
 8001a04:	4811      	ldr	r0, [pc, #68]	; (8001a4c <getPower+0x64>)
 8001a06:	f000 fe57 	bl	80026b8 <HAL_I2C_Master_Transmit>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f1      	bne.n	80019f4 <getPower+0xc>


  // read 1 byte, from address 0
	  uint8_t receiveBuffer[2];
//  HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100);
  while(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100)){
 8001a10:	e002      	b.n	8001a18 <getPower+0x30>
    		  osDelay(1);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f009 fb50 	bl	800b0b8 <osDelay>
  while(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100)){
 8001a18:	463a      	mov	r2, r7
 8001a1a:	2364      	movs	r3, #100	; 0x64
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2302      	movs	r3, #2
 8001a20:	2188      	movs	r1, #136	; 0x88
 8001a22:	480a      	ldr	r0, [pc, #40]	; (8001a4c <getPower+0x64>)
 8001a24:	f000 ff3c 	bl	80028a0 <HAL_I2C_Master_Receive>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f1      	bne.n	8001a12 <getPower+0x2a>
    	  }

  uint16_t measurement;
  measurement = receiveBuffer[0] << 8;
 8001a2e:	783b      	ldrb	r3, [r7, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	80fb      	strh	r3, [r7, #6]
  measurement = measurement | receiveBuffer[1];
 8001a36:	787b      	ldrb	r3, [r7, #1]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	80fb      	strh	r3, [r7, #6]

  return measurement;
 8001a40:	88fb      	ldrh	r3, [r7, #6]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20004d84 	.word	0x20004d84

08001a50 <getCurrent>:

uint16_t getCurrent(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af02      	add	r7, sp, #8
	uint8_t packet = 0x04;
 8001a56:	2304      	movs	r3, #4
 8001a58:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100);
 8001a5a:	1d7a      	adds	r2, r7, #5
 8001a5c:	2364      	movs	r3, #100	; 0x64
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2301      	movs	r3, #1
 8001a62:	2188      	movs	r1, #136	; 0x88
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <getCurrent+0x48>)
 8001a66:	f000 fe27 	bl	80026b8 <HAL_I2C_Master_Transmit>

  // read 1 byte, from address 0
	  uint8_t receiveBuffer[2];
  HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100);
 8001a6a:	463a      	mov	r2, r7
 8001a6c:	2364      	movs	r3, #100	; 0x64
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2302      	movs	r3, #2
 8001a72:	2188      	movs	r1, #136	; 0x88
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <getCurrent+0x48>)
 8001a76:	f000 ff13 	bl	80028a0 <HAL_I2C_Master_Receive>

  uint16_t measurement;
  measurement = receiveBuffer[0] << 8;
 8001a7a:	783b      	ldrb	r3, [r7, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	80fb      	strh	r3, [r7, #6]
  measurement = measurement | receiveBuffer[1];
 8001a82:	787b      	ldrb	r3, [r7, #1]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	80fb      	strh	r3, [r7, #6]

  return measurement;
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20004d84 	.word	0x20004d84

08001a9c <getBusVoltage>:

uint16_t getBusVoltage(){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af02      	add	r7, sp, #8
	uint8_t packet = 0x02;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	717b      	strb	r3, [r7, #5]
//	  HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100);
	  while(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100)){
 8001aa6:	e002      	b.n	8001aae <getBusVoltage+0x12>
	    		  osDelay(1);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f009 fb05 	bl	800b0b8 <osDelay>
	  while(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100)){
 8001aae:	1d7a      	adds	r2, r7, #5
 8001ab0:	2364      	movs	r3, #100	; 0x64
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2188      	movs	r1, #136	; 0x88
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <getBusVoltage+0x64>)
 8001aba:	f000 fdfd 	bl	80026b8 <HAL_I2C_Master_Transmit>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f1      	bne.n	8001aa8 <getBusVoltage+0xc>
	    	  }

  // read 1 byte, from address 0
	  uint8_t receiveBuffer[2];
//  HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100);
  while(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100)){
 8001ac4:	e002      	b.n	8001acc <getBusVoltage+0x30>
    		  osDelay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f009 faf6 	bl	800b0b8 <osDelay>
  while(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100)){
 8001acc:	463a      	mov	r2, r7
 8001ace:	2364      	movs	r3, #100	; 0x64
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	2188      	movs	r1, #136	; 0x88
 8001ad6:	480a      	ldr	r0, [pc, #40]	; (8001b00 <getBusVoltage+0x64>)
 8001ad8:	f000 fee2 	bl	80028a0 <HAL_I2C_Master_Receive>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f1      	bne.n	8001ac6 <getBusVoltage+0x2a>
    	  }

  uint16_t measurement;
  measurement = receiveBuffer[0] << 8;
 8001ae2:	783b      	ldrb	r3, [r7, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	80fb      	strh	r3, [r7, #6]
  measurement = measurement | receiveBuffer[1];
 8001aea:	787b      	ldrb	r3, [r7, #1]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	80fb      	strh	r3, [r7, #6]

  return measurement;
 8001af4:	88fb      	ldrh	r3, [r7, #6]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20004d84 	.word	0x20004d84

08001b04 <getShuntVoltage>:

uint16_t getShuntVoltage(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af02      	add	r7, sp, #8
	uint8_t packet = 0x01;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, POWER_MEAS_ADDR << 1, &packet, 1, 100);
 8001b0e:	1d7a      	adds	r2, r7, #5
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	2188      	movs	r1, #136	; 0x88
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <getShuntVoltage+0x48>)
 8001b1a:	f000 fdcd 	bl	80026b8 <HAL_I2C_Master_Transmit>

  // read 1 byte, from address 0
	  uint8_t receiveBuffer[2];
  HAL_I2C_Master_Receive(&hi2c1, POWER_MEAS_ADDR << 1, receiveBuffer, (uint8_t)(2), 100);
 8001b1e:	463a      	mov	r2, r7
 8001b20:	2364      	movs	r3, #100	; 0x64
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2302      	movs	r3, #2
 8001b26:	2188      	movs	r1, #136	; 0x88
 8001b28:	4808      	ldr	r0, [pc, #32]	; (8001b4c <getShuntVoltage+0x48>)
 8001b2a:	f000 feb9 	bl	80028a0 <HAL_I2C_Master_Receive>

  uint16_t measurement;
  measurement = receiveBuffer[0] << 8;
 8001b2e:	783b      	ldrb	r3, [r7, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	80fb      	strh	r3, [r7, #6]
  measurement = measurement | receiveBuffer[1];
 8001b36:	787b      	ldrb	r3, [r7, #1]
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	80fb      	strh	r3, [r7, #6]

  return measurement;
 8001b40:	88fb      	ldrh	r3, [r7, #6]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20004d84 	.word	0x20004d84

08001b50 <LL_AHB3_GRP1_EnableClock>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b74:	68fb      	ldr	r3, [r7, #12]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001b86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b8a:	f7ff ffe1 	bl	8001b50 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	210f      	movs	r1, #15
 8001b92:	f06f 0001 	mvn.w	r0, #1
 8001b96:	f000 fafc 	bl	8002192 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	202e      	movs	r0, #46	; 0x2e
 8001ba0:	f000 faf7 	bl	8002192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001ba4:	202e      	movs	r0, #46	; 0x2e
 8001ba6:	f000 fb0e 	bl	80021c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	210f      	movs	r1, #15
 8001bae:	202c      	movs	r0, #44	; 0x2c
 8001bb0:	f000 faef 	bl	8002192 <HAL_NVIC_SetPriority>
   HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	202d      	movs	r0, #45	; 0x2d
 8001bba:	f000 faea 	bl	8002192 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4013      	ands	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	; 0x30
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	2019      	movs	r0, #25
 8001c0a:	f000 fac2 	bl	8002192 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c0e:	2019      	movs	r0, #25
 8001c10:	f000 fad9 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c18:	f7ff ffd3 	bl	8001bc2 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c1c:	f107 0208 	add.w	r2, r7, #8
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fa0a 	bl	8005040 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c2c:	f003 f9f2 	bl	8005014 <HAL_RCC_GetPCLK2Freq>
 8001c30:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_InitTick+0x8c>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	0c9b      	lsrs	r3, r3, #18
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_InitTick+0x90>)
 8001c42:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_InitTick+0x94>)
 8001c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_InitTick+0x90>)
 8001c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c4e:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <HAL_InitTick+0x90>)
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_InitTick+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_InitTick+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <HAL_InitTick+0x90>)
 8001c62:	f003 fffd 	bl	8005c60 <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d104      	bne.n	8001c76 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <HAL_InitTick+0x90>)
 8001c6e:	f004 f859 	bl	8005d24 <HAL_TIM_Base_Start_IT>
 8001c72:	4603      	mov	r3, r0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3730      	adds	r7, #48	; 0x30
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	431bde83 	.word	0x431bde83
 8001c84:	20004e0c 	.word	0x20004e0c
 8001c88:	40012c00 	.word	0x40012c00

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <USB_LP_IRQHandler+0x10>)
 8001cbe:	f001 fa53 	bl	8003168 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200063b4 	.word	0x200063b4

08001ccc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001cd2:	f004 f875 	bl	8005dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20004e0c 	.word	0x20004e0c

08001ce0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <I2C1_EV_IRQHandler+0x10>)
 8001ce6:	f000 fed1 	bl	8002a8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20004d84 	.word	0x20004d84

08001cf4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001cf8:	f000 fc2a 	bl	8002550 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8001d04:	f7fe ff72 	bl	8000bec <HW_TS_RTC_Wakeup_Handler>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001d10:	f00d fe82 	bl	800fa18 <HW_IPCC_Tx_Handler>
  return;
 8001d14:	bf00      	nop
}
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001d1c:	f00d fe22 	bl	800f964 <HW_IPCC_Rx_Handler>
  return;
 8001d20:	bf00      	nop
}
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8001d24:	b40c      	push	{r2, r3}
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	460a      	mov	r2, r1
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	4613      	mov	r3, r2
 8001d34:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	b002      	add	sp, #8
 8001d42:	4770      	bx	lr

08001d44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <SystemInit+0xa0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <SystemInit+0xa0>)
 8001d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <SystemInit+0xa0>)
 8001d56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d72:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001d76:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <SystemInit+0xa4>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d94:	f023 0305 	bic.w	r3, r3, #5
 8001d98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <SystemInit+0xa8>)
 8001db6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <SystemInit+0xa8>)
 8001dbe:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00
 8001de8:	faf6fefb 	.word	0xfaf6fefb
 8001dec:	22041000 	.word	0x22041000

08001df0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001df0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df4:	3304      	adds	r3, #4

08001df6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001dfa:	d3f9      	bcc.n	8001df0 <CopyDataInit>
  bx lr
 8001dfc:	4770      	bx	lr

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001dfe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001e00:	3004      	adds	r0, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001e02:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>
  bx lr
 8001e06:	4770      	bx	lr

08001e08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e08:	480c      	ldr	r0, [pc, #48]	; (8001e3c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001e0a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e0c:	f7ff ff9a 	bl	8001d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LoopForever+0x8>)
 8001e12:	490c      	ldr	r1, [pc, #48]	; (8001e44 <LoopForever+0xc>)
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <LoopForever+0x10>)
 8001e16:	2300      	movs	r3, #0
 8001e18:	f7ff ffed 	bl	8001df6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001e1c:	480b      	ldr	r0, [pc, #44]	; (8001e4c <LoopForever+0x14>)
 8001e1e:	490c      	ldr	r1, [pc, #48]	; (8001e50 <LoopForever+0x18>)
 8001e20:	2300      	movs	r3, #0
 8001e22:	f7ff ffee 	bl	8001e02 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001e26:	480b      	ldr	r0, [pc, #44]	; (8001e54 <LoopForever+0x1c>)
 8001e28:	490b      	ldr	r1, [pc, #44]	; (8001e58 <LoopForever+0x20>)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f7ff ffe9 	bl	8001e02 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e30:	f00e fcde 	bl	80107f0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001e34:	f7ff faaa 	bl	800138c <main>

08001e38 <LoopForever>:

LoopForever:
  b LoopForever
 8001e38:	e7fe      	b.n	8001e38 <LoopForever>
 8001e3a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001e3c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001e40:	20000004 	.word	0x20000004
 8001e44:	200001d0 	.word	0x200001d0
 8001e48:	08010d9c 	.word	0x08010d9c
  INIT_BSS _sbss, _ebss
 8001e4c:	20000280 	.word	0x20000280
 8001e50:	20006628 	.word	0x20006628
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001e54:	200300e0 	.word	0x200300e0
 8001e58:	20030b57 	.word	0x20030b57

08001e5c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC1_IRQHandler>
	...

08001e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_Init+0x3c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <HAL_Init+0x3c>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e76:	2003      	movs	r0, #3
 8001e78:	f000 f980 	bl	800217c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff feb9 	bl	8001bf4 <HAL_InitTick>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	e001      	b.n	8001e92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e8e:	f7ff fe78 	bl	8001b82 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e92:	79fb      	ldrb	r3, [r7, #7]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	58004000 	.word	0x58004000

08001ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_IncTick+0x20>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x24>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_IncTick+0x24>)
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000030 	.word	0x20000030
 8001ec4:	20004e58 	.word	0x20004e58

08001ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_GetTick+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20004e58 	.word	0x20004e58

08001ee0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_GetTickPrio+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	2000002c 	.word	0x2000002c

08001ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001f00:	f7ff ffe2 	bl	8001ec8 <HAL_GetTick>
 8001f04:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d005      	beq.n	8001f1e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_Delay+0x40>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001f1e:	bf00      	nop
 8001f20:	f7ff ffd2 	bl	8001ec8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d8f7      	bhi.n	8001f20 <HAL_Delay+0x28>
    {
    }
  }
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000030 	.word	0x20000030

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db10      	blt.n	8002010 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <__NVIC_DisableIRQ+0x40>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	3320      	adds	r3, #32
 8002004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800200c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	2b00      	cmp	r3, #0
 8002030:	db0c      	blt.n	800204c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4907      	ldr	r1, [pc, #28]	; (8002058 <__NVIC_SetPendingIRQ+0x38>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2001      	movs	r0, #1
 8002042:	fa00 f202 	lsl.w	r2, r0, r2
 8002046:	3340      	adds	r3, #64	; 0x40
 8002048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100

0800205c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0c      	blt.n	8002088 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <__NVIC_ClearPendingIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	3360      	adds	r3, #96	; 0x60
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002158:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <__NVIC_SystemReset+0x20>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002164:	4903      	ldr	r1, [pc, #12]	; (8002174 <__NVIC_SystemReset+0x20>)
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_SystemReset+0x24>)
 8002168:	4313      	orrs	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
 800216c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <__NVIC_SystemReset+0x1c>
 8002174:	e000ed00 	.word	0xe000ed00
 8002178:	05fa0004 	.word	0x05fa0004

0800217c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fed9 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff fef0 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff9e 	bl	80020ec <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff6d 	bl	8002098 <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fee3 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fef3 	bl	8001fdc <__NVIC_DisableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002202:	f7ff ffa7 	bl	8002154 <__NVIC_SystemReset>

08002206 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff03 	bl	8002020 <__NVIC_SetPendingIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff13 	bl	800205c <__NVIC_ClearPendingIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e14c      	b.n	80024ea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 813e 	beq.w	80024e4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d00b      	beq.n	8002288 <HAL_GPIO_Init+0x48>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d007      	beq.n	8002288 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800227c:	2b11      	cmp	r3, #17
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b12      	cmp	r3, #18
 8002286:	d130      	bne.n	80022ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022be:	2201      	movs	r2, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 0201 	and.w	r2, r3, #1
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0xea>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b12      	cmp	r3, #18
 8002328:	d123      	bne.n	8002372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	6939      	ldr	r1, [r7, #16]
 800236e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0203 	and.w	r2, r3, #3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8098 	beq.w	80024e4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80023b4:	4a54      	ldr	r2, [pc, #336]	; (8002508 <HAL_GPIO_Init+0x2c8>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023de:	d019      	beq.n	8002414 <HAL_GPIO_Init+0x1d4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_GPIO_Init+0x2cc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_GPIO_Init+0x1d0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a49      	ldr	r2, [pc, #292]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1cc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a48      	ldr	r2, [pc, #288]	; (8002514 <HAL_GPIO_Init+0x2d4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1c8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a47      	ldr	r2, [pc, #284]	; (8002518 <HAL_GPIO_Init+0x2d8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1c4>
 8002400:	2304      	movs	r3, #4
 8002402:	e008      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002404:	2307      	movs	r3, #7
 8002406:	e006      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002408:	2303      	movs	r3, #3
 800240a:	e004      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 800240c:	2302      	movs	r3, #2
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002414:	2300      	movs	r3, #0
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	f002 0203 	and.w	r2, r2, #3
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	4093      	lsls	r3, r2
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002426:	4938      	ldr	r1, [pc, #224]	; (8002508 <HAL_GPIO_Init+0x2c8>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002434:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_GPIO_Init+0x2dc>)
 8002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800243a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800245a:	4a30      	ldr	r2, [pc, #192]	; (800251c <HAL_GPIO_Init+0x2dc>)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002462:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_GPIO_Init+0x2dc>)
 8002464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002488:	4a24      	ldr	r2, [pc, #144]	; (800251c <HAL_GPIO_Init+0x2dc>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_GPIO_Init+0x2dc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024b4:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_GPIO_Init+0x2dc>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_GPIO_Init+0x2dc>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024de:	4a0f      	ldr	r2, [pc, #60]	; (800251c <HAL_GPIO_Init+0x2dc>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f aeab 	bne.w	8002250 <HAL_GPIO_Init+0x10>
  }
}
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	48000400 	.word	0x48000400
 8002510:	48000800 	.word	0x48000800
 8002514:	48000c00 	.word	0x48000c00
 8002518:	48001000 	.word	0x48001000
 800251c:	58000800 	.word	0x58000800

08002520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
 800252c:	4613      	mov	r3, r2
 800252e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002530:	787b      	ldrb	r3, [r7, #1]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800253c:	e002      	b.n	8002544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_HSEM_IRQHandler+0x30>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_HSEM_IRQHandler+0x30>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	43db      	mvns	r3, r3
 8002564:	4906      	ldr	r1, [pc, #24]	; (8002580 <HAL_HSEM_IRQHandler+0x30>)
 8002566:	4013      	ands	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <HAL_HSEM_IRQHandler+0x30>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f807 	bl	8002584 <HAL_HSEM_FreeCallback>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	58001500 	.word	0x58001500

08002584 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e081      	b.n	80026ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fe5a 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d107      	bne.n	8002612 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	e006      	b.n	8002620 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800261e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d104      	bne.n	8002632 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002630:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002644:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002654:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	ea42 0103 	orr.w	r1, r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	021a      	lsls	r2, r3, #8
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69d9      	ldr	r1, [r3, #28]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1a      	ldr	r2, [r3, #32]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	461a      	mov	r2, r3
 80026c4:	460b      	mov	r3, r1
 80026c6:	817b      	strh	r3, [r7, #10]
 80026c8:	4613      	mov	r3, r2
 80026ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	f040 80da 	bne.w	800288e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_I2C_Master_Transmit+0x30>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e0d3      	b.n	8002890 <HAL_I2C_Master_Transmit+0x1d8>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026f0:	f7ff fbea 	bl	8001ec8 <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2319      	movs	r3, #25
 80026fc:	2201      	movs	r2, #1
 80026fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fa00 	bl	8002b08 <I2C_WaitOnFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0be      	b.n	8002890 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2221      	movs	r2, #33	; 0x21
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2210      	movs	r2, #16
 800271e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	893a      	ldrh	r2, [r7, #8]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	2bff      	cmp	r3, #255	; 0xff
 8002742:	d90e      	bls.n	8002762 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	22ff      	movs	r2, #255	; 0xff
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	b2da      	uxtb	r2, r3
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	4b51      	ldr	r3, [pc, #324]	; (8002898 <HAL_I2C_Master_Transmit+0x1e0>)
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fb62 	bl	8002e24 <I2C_TransferConfig>
 8002760:	e06c      	b.n	800283c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	b2da      	uxtb	r2, r3
 8002772:	8979      	ldrh	r1, [r7, #10]
 8002774:	4b48      	ldr	r3, [pc, #288]	; (8002898 <HAL_I2C_Master_Transmit+0x1e0>)
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fb51 	bl	8002e24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002782:	e05b      	b.n	800283c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	6a39      	ldr	r1, [r7, #32]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f9fd 	bl	8002b88 <I2C_WaitOnTXISFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e07b      	b.n	8002890 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d034      	beq.n	800283c <HAL_I2C_Master_Transmit+0x184>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d130      	bne.n	800283c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f98f 	bl	8002b08 <I2C_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e04d      	b.n	8002890 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	d90e      	bls.n	800281c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	22ff      	movs	r2, #255	; 0xff
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	b2da      	uxtb	r2, r3
 800280a:	8979      	ldrh	r1, [r7, #10]
 800280c:	2300      	movs	r3, #0
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fb05 	bl	8002e24 <I2C_TransferConfig>
 800281a:	e00f      	b.n	800283c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	b2da      	uxtb	r2, r3
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	2300      	movs	r3, #0
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 faf4 	bl	8002e24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d19e      	bne.n	8002784 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	6a39      	ldr	r1, [r7, #32]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f9dc 	bl	8002c08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e01a      	b.n	8002890 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2220      	movs	r2, #32
 8002860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_I2C_Master_Transmit+0x1e4>)
 800286e:	400b      	ands	r3, r1
 8002870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	80002000 	.word	0x80002000
 800289c:	fe00e800 	.word	0xfe00e800

080028a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	461a      	mov	r2, r3
 80028ac:	460b      	mov	r3, r1
 80028ae:	817b      	strh	r3, [r7, #10]
 80028b0:	4613      	mov	r3, r2
 80028b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b20      	cmp	r3, #32
 80028be:	f040 80db 	bne.w	8002a78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_I2C_Master_Receive+0x30>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e0d4      	b.n	8002a7a <HAL_I2C_Master_Receive+0x1da>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028d8:	f7ff faf6 	bl	8001ec8 <HAL_GetTick>
 80028dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2319      	movs	r3, #25
 80028e4:	2201      	movs	r2, #1
 80028e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f90c 	bl	8002b08 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0bf      	b.n	8002a7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2222      	movs	r2, #34	; 0x22
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2210      	movs	r2, #16
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	893a      	ldrh	r2, [r7, #8]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2bff      	cmp	r3, #255	; 0xff
 800292a:	d90e      	bls.n	800294a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	22ff      	movs	r2, #255	; 0xff
 8002930:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	b2da      	uxtb	r2, r3
 8002938:	8979      	ldrh	r1, [r7, #10]
 800293a:	4b52      	ldr	r3, [pc, #328]	; (8002a84 <HAL_I2C_Master_Receive+0x1e4>)
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fa6e 	bl	8002e24 <I2C_TransferConfig>
 8002948:	e06d      	b.n	8002a26 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	b2da      	uxtb	r2, r3
 800295a:	8979      	ldrh	r1, [r7, #10]
 800295c:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <HAL_I2C_Master_Receive+0x1e4>)
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fa5d 	bl	8002e24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800296a:	e05c      	b.n	8002a26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	6a39      	ldr	r1, [r7, #32]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f985 	bl	8002c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e07c      	b.n	8002a7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d034      	beq.n	8002a26 <HAL_I2C_Master_Receive+0x186>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d130      	bne.n	8002a26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	2200      	movs	r2, #0
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f89a 	bl	8002b08 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e04d      	b.n	8002a7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2bff      	cmp	r3, #255	; 0xff
 80029e6:	d90e      	bls.n	8002a06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	22ff      	movs	r2, #255	; 0xff
 80029ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	8979      	ldrh	r1, [r7, #10]
 80029f6:	2300      	movs	r3, #0
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fa10 	bl	8002e24 <I2C_TransferConfig>
 8002a04:	e00f      	b.n	8002a26 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f9ff 	bl	8002e24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d19d      	bne.n	800296c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	6a39      	ldr	r1, [r7, #32]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f8e7 	bl	8002c08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e01a      	b.n	8002a7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <HAL_I2C_Master_Receive+0x1e8>)
 8002a58:	400b      	ands	r3, r1
 8002a5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	80002400 	.word	0x80002400
 8002a88:	fe00e800 	.word	0xfe00e800

08002a8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	68f9      	ldr	r1, [r7, #12]
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
  }
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d103      	bne.n	8002ade <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d007      	beq.n	8002afc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	619a      	str	r2, [r3, #24]
  }
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b18:	e022      	b.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d01e      	beq.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7ff f9d1 	bl	8001ec8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d113      	bne.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e00f      	b.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d0cd      	beq.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b94:	e02c      	b.n	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8dc 	bl	8002d58 <I2C_IsAcknowledgeFailed>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e02a      	b.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d01e      	beq.n	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7ff f989 	bl	8001ec8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d113      	bne.n	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e007      	b.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d1cb      	bne.n	8002b96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c14:	e028      	b.n	8002c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f89c 	bl	8002d58 <I2C_IsAcknowledgeFailed>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e026      	b.n	8002c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2a:	f7ff f94d 	bl	8001ec8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d302      	bcc.n	8002c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d113      	bne.n	8002c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e007      	b.n	8002c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d1cf      	bne.n	8002c16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c8c:	e055      	b.n	8002d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f860 	bl	8002d58 <I2C_IsAcknowledgeFailed>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e053      	b.n	8002d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d129      	bne.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d105      	bne.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e03f      	b.n	8002d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002cde:	400b      	ands	r3, r1
 8002ce0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e022      	b.n	8002d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7ff f8e0 	bl	8001ec8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e007      	b.n	8002d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d1a2      	bne.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	fe00e800 	.word	0xfe00e800

08002d58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d151      	bne.n	8002e16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d72:	e022      	b.n	8002dba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d01e      	beq.n	8002dba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7c:	f7ff f8a4 	bl	8001ec8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d302      	bcc.n	8002d92 <I2C_IsAcknowledgeFailed+0x3a>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f043 0220 	orr.w	r2, r3, #32
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e02e      	b.n	8002e18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d1d5      	bne.n	8002d74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2210      	movs	r2, #16
 8002dce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff fe71 	bl	8002ac0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <I2C_IsAcknowledgeFailed+0xc8>)
 8002dea:	400b      	ands	r3, r1
 8002dec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f043 0204 	orr.w	r2, r3, #4
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	fe00e800 	.word	0xfe00e800

08002e24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	4613      	mov	r3, r2
 8002e34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	0d5b      	lsrs	r3, r3, #21
 8002e40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <I2C_TransferConfig+0x58>)
 8002e46:	430b      	orrs	r3, r1
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	ea02 0103 	and.w	r1, r2, r3
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e54:	7a7b      	ldrb	r3, [r7, #9]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	03ff63ff 	.word	0x03ff63ff

08002e80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d138      	bne.n	8002f08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e032      	b.n	8002f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	; 0x24
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ed2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d139      	bne.n	8002fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e033      	b.n	8002fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2224      	movs	r2, #36	; 0x24
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb0:	b08b      	sub	sp, #44	; 0x2c
 8002fb2:	af06      	add	r7, sp, #24
 8002fb4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0ad      	b.n	800311c <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f00d f8d5 	bl	8010184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 f8cd 	bl	8006186 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e035      	b.n	800305e <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	015b      	lsls	r3, r3, #5
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3329      	adds	r3, #41	; 0x29
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	015b      	lsls	r3, r3, #5
 8003006:	4413      	add	r3, r2
 8003008:	3328      	adds	r3, #40	; 0x28
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	b291      	uxth	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	015b      	lsls	r3, r3, #5
 8003018:	4413      	add	r3, r2
 800301a:	3336      	adds	r3, #54	; 0x36
 800301c:	460a      	mov	r2, r1
 800301e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	015b      	lsls	r3, r3, #5
 8003026:	4413      	add	r3, r2
 8003028:	332b      	adds	r3, #43	; 0x2b
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	015b      	lsls	r3, r3, #5
 8003034:	4413      	add	r3, r2
 8003036:	3338      	adds	r3, #56	; 0x38
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	015b      	lsls	r3, r3, #5
 8003042:	4413      	add	r3, r2
 8003044:	333c      	adds	r3, #60	; 0x3c
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	3302      	adds	r3, #2
 8003050:	015b      	lsls	r3, r3, #5
 8003052:	4413      	add	r3, r2
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	3301      	adds	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d3c4      	bcc.n	8002ff2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	e031      	b.n	80030d2 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	015b      	lsls	r3, r3, #5
 8003074:	4413      	add	r3, r2
 8003076:	f203 1329 	addw	r3, r3, #297	; 0x129
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	015b      	lsls	r3, r3, #5
 8003084:	4413      	add	r3, r2
 8003086:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	015b      	lsls	r3, r3, #5
 8003094:	4413      	add	r3, r2
 8003096:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	015b      	lsls	r3, r3, #5
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	015b      	lsls	r3, r3, #5
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	330a      	adds	r3, #10
 80030c4:	015b      	lsls	r3, r3, #5
 80030c6:	4413      	add	r3, r2
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	3301      	adds	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d3c8      	bcc.n	800306e <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	687e      	ldr	r6, [r7, #4]
 80030e4:	466d      	mov	r5, sp
 80030e6:	f106 0410 	add.w	r4, r6, #16
 80030ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	602b      	str	r3, [r5, #0]
 80030f2:	1d33      	adds	r3, r6, #4
 80030f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f6:	6838      	ldr	r0, [r7, #0]
 80030f8:	f003 f860 	bl	80061bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d102      	bne.n	800311a <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fe59 	bl	8003dcc <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003124 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_PCD_Start+0x16>
 8003136:	2302      	movs	r3, #2
 8003138:	e012      	b.n	8003160 <HAL_PCD_Start+0x3c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f004 fa30 	bl	80075ac <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f002 ffff 	bl	8006154 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f004 fa30 	bl	80075da <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003184:	d102      	bne.n	800318c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fb33 	bl	80037f2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f004 fa22 	bl	80075da <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a0:	d112      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b4:	b292      	uxth	r2, r2
 80031b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f00d f869 	bl	8010292 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031c0:	2100      	movs	r1, #0
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f91e 	bl	8003404 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 fa04 	bl	80075da <USB_ReadInterrupts>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031dc:	d10b      	bne.n	80031f6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031f0:	b292      	uxth	r2, r2
 80031f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 f9ed 	bl	80075da <USB_ReadInterrupts>
 8003200:	4603      	mov	r3, r0
 8003202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320a:	d10b      	bne.n	8003224 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003214:	b29a      	uxth	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321e:	b292      	uxth	r2, r2
 8003220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f004 f9d6 	bl	80075da <USB_ReadInterrupts>
 800322e:	4603      	mov	r3, r0
 8003230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003238:	d133      	bne.n	80032a2 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003242:	b29a      	uxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0204 	bic.w	r2, r2, #4
 800324c:	b292      	uxth	r2, r2
 800324e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800325a:	b29a      	uxth	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0208 	bic.w	r2, r2, #8
 8003264:	b292      	uxth	r2, r2
 8003266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800327c:	2100      	movs	r1, #0
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f00d f9f6 	bl	8010670 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f00d f83d 	bl	8010304 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800329c:	b292      	uxth	r2, r2
 800329e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 f997 	bl	80075da <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b6:	d126      	bne.n	8003306 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0208 	orr.w	r2, r2, #8
 80032ca:	b292      	uxth	r2, r2
 80032cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e2:	b292      	uxth	r2, r2
 80032e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0204 	orr.w	r2, r2, #4
 80032fa:	b292      	uxth	r2, r2
 80032fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f00c ffe5 	bl	80102d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f004 f965 	bl	80075da <USB_ReadInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d13f      	bne.n	800339a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800332c:	b292      	uxth	r2, r2
 800332e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003338:	2b00      	cmp	r3, #0
 800333a:	d12b      	bne.n	8003394 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0204 	orr.w	r2, r2, #4
 800334e:	b292      	uxth	r2, r2
 8003350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0208 	orr.w	r2, r2, #8
 8003366:	b292      	uxth	r2, r2
 8003368:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800337c:	b29b      	uxth	r3, r3
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800338a:	2101      	movs	r1, #1
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f00d f96f 	bl	8010670 <HAL_PCDEx_LPM_Callback>
 8003392:	e002      	b.n	800339a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f00c ff9b 	bl	80102d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f004 f91b 	bl	80075da <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ae:	d10e      	bne.n	80033ce <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033c2:	b292      	uxth	r2, r2
 80033c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f00c ff54 	bl	8010276 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f004 f901 	bl	80075da <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e2:	d10b      	bne.n	80033fc <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f6:	b292      	uxth	r2, r2
 80033f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_PCD_SetAddress+0x1a>
 800341a:	2302      	movs	r3, #2
 800341c:	e013      	b.n	8003446 <HAL_PCD_SetAddress+0x42>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f004 f8a4 	bl	8007584 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	4608      	mov	r0, r1
 8003458:	4611      	mov	r1, r2
 800345a:	461a      	mov	r2, r3
 800345c:	4603      	mov	r3, r0
 800345e:	70fb      	strb	r3, [r7, #3]
 8003460:	460b      	mov	r3, r1
 8003462:	803b      	strh	r3, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800346c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da0b      	bge.n	800348c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	3328      	adds	r3, #40	; 0x28
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	705a      	strb	r2, [r3, #1]
 800348a:	e00b      	b.n	80034a4 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	015b      	lsls	r3, r3, #5
 8003494:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4413      	add	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034b0:	883a      	ldrh	r2, [r7, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	78ba      	ldrb	r2, [r7, #2]
 80034ba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	785b      	ldrb	r3, [r3, #1]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034ce:	78bb      	ldrb	r3, [r7, #2]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d102      	bne.n	80034da <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_PCD_EP_Open+0x9a>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e00e      	b.n	8003506 <HAL_PCD_EP_Open+0xb8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68f9      	ldr	r1, [r7, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 fe84 	bl	8006204 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003504:	7afb      	ldrb	r3, [r7, #11]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800351a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351e:	2b00      	cmp	r3, #0
 8003520:	da0b      	bge.n	800353a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	015b      	lsls	r3, r3, #5
 800352a:	3328      	adds	r3, #40	; 0x28
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	705a      	strb	r2, [r3, #1]
 8003538:	e00b      	b.n	8003552 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	015b      	lsls	r3, r3, #5
 8003542:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_PCD_EP_Close+0x5e>
 8003568:	2302      	movs	r3, #2
 800356a:	e00e      	b.n	800358a <HAL_PCD_EP_Close+0x7c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68f9      	ldr	r1, [r7, #12]
 800357a:	4618      	mov	r0, r3
 800357c:	f003 f9f0 	bl	8006960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	460b      	mov	r3, r1
 80035a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a2:	7afb      	ldrb	r3, [r7, #11]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	015b      	lsls	r3, r3, #5
 80035aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2200      	movs	r2, #0
 80035ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035cc:	7afb      	ldrb	r3, [r7, #11]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035d8:	7afb      	ldrb	r3, [r7, #11]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6979      	ldr	r1, [r7, #20]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 fba6 	bl	8006d3a <USB_EPStartXfer>
 80035ee:	e005      	b.n	80035fc <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6979      	ldr	r1, [r7, #20]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 fb9f 	bl	8006d3a <USB_EPStartXfer>
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	330a      	adds	r3, #10
 800361c:	015b      	lsls	r3, r3, #5
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	460b      	mov	r3, r1
 800363e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003640:	7afb      	ldrb	r3, [r7, #11]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	015b      	lsls	r3, r3, #5
 8003648:	3328      	adds	r3, #40	; 0x28
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2201      	movs	r2, #1
 8003666:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003668:	7afb      	ldrb	r3, [r7, #11]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	b2da      	uxtb	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003674:	7afb      	ldrb	r3, [r7, #11]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6979      	ldr	r1, [r7, #20]
 8003684:	4618      	mov	r0, r3
 8003686:	f003 fb58 	bl	8006d3a <USB_EPStartXfer>
 800368a:	e005      	b.n	8003698 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6979      	ldr	r1, [r7, #20]
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fb51 	bl	8006d3a <USB_EPStartXfer>
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	f003 0207 	and.w	r2, r3, #7
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d901      	bls.n	80036c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e046      	b.n	800374e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da0b      	bge.n	80036e0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	015b      	lsls	r3, r3, #5
 80036d0:	3328      	adds	r3, #40	; 0x28
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	705a      	strb	r2, [r3, #1]
 80036de:	e009      	b.n	80036f4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_PCD_EP_SetStall+0x72>
 8003710:	2302      	movs	r3, #2
 8003712:	e01c      	b.n	800374e <HAL_PCD_EP_SetStall+0xac>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68f9      	ldr	r1, [r7, #12]
 8003722:	4618      	mov	r0, r3
 8003724:	f003 fe2f 	bl	8007386 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f003 ff5b 	bl	80075fa <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 020f 	and.w	r2, r3, #15
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	d901      	bls.n	8003774 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e03a      	b.n	80037ea <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003778:	2b00      	cmp	r3, #0
 800377a:	da0b      	bge.n	8003794 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	015b      	lsls	r3, r3, #5
 8003784:	3328      	adds	r3, #40	; 0x28
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	705a      	strb	r2, [r3, #1]
 8003792:	e00b      	b.n	80037ac <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	015b      	lsls	r3, r3, #5
 800379c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4413      	add	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_PCD_EP_ClrStall+0x76>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e00e      	b.n	80037ea <HAL_PCD_EP_ClrStall+0x94>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	4618      	mov	r0, r3
 80037dc:	f003 fe24 	bl	8007428 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b08e      	sub	sp, #56	; 0x38
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037fa:	e29c      	b.n	8003d36 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003804:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003812:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 8152 	bne.w	8003ac0 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800381c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d150      	bne.n	80038c8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	81fb      	strh	r3, [r7, #14]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003846:	b29b      	uxth	r3, r3
 8003848:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3328      	adds	r3, #40	; 0x28
 800384e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003858:	b29b      	uxth	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	4413      	add	r3, r2
 800386a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	441a      	add	r2, r3
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003886:	2100      	movs	r1, #0
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f00c fcdd 	bl	8010248 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 824d 	beq.w	8003d36 <PCD_EP_ISR_Handler+0x544>
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 8248 	bne.w	8003d36 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b292      	uxth	r2, r2
 80038ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038c6:	e236      	b.n	8003d36 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80038d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d032      	beq.n	8003948 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	4413      	add	r3, r2
 80038fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800391c:	b29b      	uxth	r3, r3
 800391e:	f003 feb9 	bl	8007694 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29a      	uxth	r2, r3
 800392a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800392e:	4013      	ands	r3, r2
 8003930:	823b      	strh	r3, [r7, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	8a3a      	ldrh	r2, [r7, #16]
 8003938:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800393c:	b292      	uxth	r2, r2
 800393e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f00c fc57 	bl	80101f4 <HAL_PCD_SetupStageCallback>
 8003946:	e1f6      	b.n	8003d36 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003948:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800394c:	2b00      	cmp	r3, #0
 800394e:	f280 81f2 	bge.w	8003d36 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29a      	uxth	r2, r3
 800395a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800395e:	4013      	ands	r3, r2
 8003960:	83fb      	strh	r3, [r7, #30]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	8bfa      	ldrh	r2, [r7, #30]
 8003968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800396c:	b292      	uxth	r2, r2
 800396e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003978:	b29b      	uxth	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	4413      	add	r3, r2
 800398a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d019      	beq.n	80039d4 <PCD_EP_ISR_Handler+0x1e2>
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	6959      	ldr	r1, [r3, #20]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f003 fe6b 	bl	8007694 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	441a      	add	r2, r3
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80039cc:	2100      	movs	r1, #0
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f00c fc22 	bl	8010218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	4413      	add	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d112      	bne.n	8003a22 <PCD_EP_ISR_Handler+0x230>
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	e02f      	b.n	8003a82 <PCD_EP_ISR_Handler+0x290>
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b3e      	cmp	r3, #62	; 0x3e
 8003a28:	d813      	bhi.n	8003a52 <PCD_EP_ISR_Handler+0x260>
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	633b      	str	r3, [r7, #48]	; 0x30
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <PCD_EP_ISR_Handler+0x252>
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	3301      	adds	r3, #1
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	e017      	b.n	8003a82 <PCD_EP_ISR_Handler+0x290>
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <PCD_EP_ISR_Handler+0x27a>
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	029b      	lsls	r3, r3, #10
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	827b      	strh	r3, [r7, #18]
 8003a94:	8a7b      	ldrh	r3, [r7, #18]
 8003a96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a9a:	827b      	strh	r3, [r7, #18]
 8003a9c:	8a7b      	ldrh	r3, [r7, #18]
 8003a9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003aa2:	827b      	strh	r3, [r7, #18]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	8a7b      	ldrh	r3, [r7, #18]
 8003aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	8013      	strh	r3, [r2, #0]
 8003abe:	e13a      	b.n	8003d36 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ad2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f280 80d6 	bge.w	8003c88 <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003af2:	4013      	ands	r3, r2
 8003af4:	853b      	strh	r3, [r7, #40]	; 0x28
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003b06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b0a:	b292      	uxth	r2, r2
 8003b0c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b12:	015b      	lsls	r3, r3, #5
 8003b14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	7b1b      	ldrb	r3, [r3, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11f      	bne.n	8003b66 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b4a:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8003b4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d075      	beq.n	8003c3e <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	6959      	ldr	r1, [r3, #20]
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	88da      	ldrh	r2, [r3, #6]
 8003b5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b60:	f003 fd98 	bl	8007694 <USB_ReadPMA>
 8003b64:	e06b      	b.n	8003c3e <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b80:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	441a      	add	r2, r3
 8003b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01f      	beq.n	8003c00 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be4:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8003be6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d028      	beq.n	8003c3e <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	6959      	ldr	r1, [r3, #20]
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	891a      	ldrh	r2, [r3, #8]
 8003bf8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bfa:	f003 fd4b 	bl	8007694 <USB_ReadPMA>
 8003bfe:	e01e      	b.n	8003c3e <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c24:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8003c26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	6959      	ldr	r1, [r3, #20]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	895a      	ldrh	r2, [r3, #10]
 8003c38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c3a:	f003 fd2b 	bl	8007694 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c44:	441a      	add	r2, r3
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c50:	441a      	add	r2, r3
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <PCD_EP_ISR_Handler+0x476>
 8003c5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d206      	bcs.n	8003c76 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f00c fad2 	bl	8010218 <HAL_PCD_DataOutStageCallback>
 8003c74:	e008      	b.n	8003c88 <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	7819      	ldrb	r1, [r3, #0]
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fc85 	bl	8003592 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d051      	beq.n	8003d36 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c96:	015b      	lsls	r3, r3, #5
 8003c98:	3328      	adds	r3, #40	; 0x28
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	843b      	strh	r3, [r7, #32]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	8c3b      	ldrh	r3, [r7, #32]
 8003ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	441a      	add	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f00c fa93 	bl	8010248 <HAL_PCD_DataInStageCallback>
 8003d22:	e008      	b.n	8003d36 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	7819      	ldrb	r1, [r3, #0]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fc7d 	bl	8003630 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	b21b      	sxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f6ff ad5a 	blt.w	80037fc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3738      	adds	r7, #56	; 0x38
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b087      	sub	sp, #28
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	817b      	strh	r3, [r7, #10]
 8003d60:	4613      	mov	r3, r2
 8003d62:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d64:	897b      	ldrh	r3, [r7, #10]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d70:	897b      	ldrh	r3, [r7, #10]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	015b      	lsls	r3, r3, #5
 8003d78:	3328      	adds	r3, #40	; 0x28
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e006      	b.n	8003d90 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d82:	897b      	ldrh	r3, [r7, #10]
 8003d84:	015b      	lsls	r3, r3, #5
 8003d86:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d90:	893b      	ldrh	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d107      	bne.n	8003da6 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	80da      	strh	r2, [r3, #6]
 8003da4:	e00b      	b.n	8003dbe <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2201      	movs	r2, #1
 8003daa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f043 0302 	orr.w	r3, r3, #2
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	58000400 	.word	0x58000400

08003e40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	58000400 	.word	0x58000400

08003e5c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e6a:	6053      	str	r3, [r2, #4]
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	58000400 	.word	0x58000400

08003e7c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e8e:	d101      	bne.n	8003e94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_RCC_HSE_Enable>:
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_RCC_HSE_Disable>:
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_RCC_HSE_IsReady>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eee:	d101      	bne.n	8003ef4 <LL_RCC_HSE_IsReady+0x18>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <LL_RCC_HSE_IsReady+0x1a>
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_RCC_HSI_Enable>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f12:	6013      	str	r3, [r2, #0]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_RCC_HSI_Disable>:
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f30:	6013      	str	r3, [r2, #0]
}
 8003f32:	bf00      	nop
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_RCC_HSI_IsReady>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4e:	d101      	bne.n	8003f54 <LL_RCC_HSI_IsReady+0x18>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <LL_RCC_HSI_IsReady+0x1a>
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	604b      	str	r3, [r1, #4]
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_RCC_HSI48_Enable>:
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_RCC_HSI48_Disable>:
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_HSI48_IsReady>:
{
 8003fce:	b480      	push	{r7}
 8003fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d101      	bne.n	8003fe6 <LL_RCC_HSI48_IsReady+0x18>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <LL_RCC_HSI48_IsReady+0x1a>
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_LSE_Enable>:
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800400a:	bf00      	nop
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_RCC_LSE_Disable>:
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_RCC_LSE_EnableBypass>:
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004046:	f043 0304 	orr.w	r3, r3, #4
 800404a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_RCC_LSE_DisableBypass>:
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LL_RCC_LSE_IsReady>:
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d101      	bne.n	8004092 <LL_RCC_LSE_IsReady+0x18>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <LL_RCC_LSE_IsReady+0x1a>
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_RCC_LSI1_Enable>:
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_RCC_LSI1_Disable>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_RCC_LSI1_IsReady>:
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80040e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d101      	bne.n	80040fa <LL_RCC_LSI1_IsReady+0x18>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <LL_RCC_LSI1_IsReady+0x1a>
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <LL_RCC_LSI2_Enable>:
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800411e:	bf00      	nop
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_RCC_LSI2_Disable>:
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004138:	f023 0304 	bic.w	r3, r3, #4
 800413c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_RCC_LSI2_IsReady>:
{
 800414a:	b480      	push	{r7}
 800414c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800414e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b08      	cmp	r3, #8
 800415c:	d101      	bne.n	8004162 <LL_RCC_LSI2_IsReady+0x18>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <LL_RCC_LSI2_IsReady+0x1a>
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <LL_RCC_LSI2_SetTrimming>:
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800417e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_RCC_MSI_Enable>:
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6013      	str	r3, [r2, #0]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_RCC_MSI_Disable>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	6013      	str	r3, [r2, #0]
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_MSI_IsReady>:
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d101      	bne.n	80041ee <LL_RCC_MSI_IsReady+0x16>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <LL_RCC_MSI_IsReady+0x18>
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_RCC_MSI_SetRange>:
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800420c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <LL_RCC_MSI_GetRange>:
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004232:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2bb0      	cmp	r3, #176	; 0xb0
 8004238:	d901      	bls.n	800423e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800423a:	23b0      	movs	r3, #176	; 0xb0
 800423c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800423e:	687b      	ldr	r3, [r7, #4]
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_RCC_MSI_SetCalibTrimming>:
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_RCC_SetSysClkSource>:
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 0203 	bic.w	r2, r3, #3
 8004288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_RCC_GetSysClkSource>:
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_RCC_SetAHBPrescaler>:
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_C2_RCC_SetAHBPrescaler>:
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_RCC_SetAHB4Prescaler>:
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004316:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800431a:	f023 020f 	bic.w	r2, r3, #15
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_RCC_SetAPB1Prescaler>:
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800434a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_RCC_SetAPB2Prescaler>:
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4313      	orrs	r3, r2
 800437a:	608b      	str	r3, [r1, #8]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_RCC_GetAHBPrescaler>:
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004396:	4618      	mov	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_C2_RCC_GetAHBPrescaler>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80043a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LL_RCC_GetAHB4Prescaler>:
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80043be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <LL_RCC_GetAPB1Prescaler>:
{
 80043d6:	b480      	push	{r7}
 80043d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80043da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <LL_RCC_GetAPB2Prescaler>:
{
 80043ee:	b480      	push	{r7}
 80043f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80043f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_RCC_PLL_Enable>:
{
 8004406:	b480      	push	{r7}
 8004408:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004418:	6013      	str	r3, [r2, #0]
}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_RCC_PLL_Disable>:
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004436:	6013      	str	r3, [r2, #0]
}
 8004438:	bf00      	nop
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <LL_RCC_PLL_IsReady>:
{
 8004442:	b480      	push	{r7}
 8004444:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004454:	d101      	bne.n	800445a <LL_RCC_PLL_IsReady+0x18>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_RCC_PLL_IsReady+0x1a>
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <LL_RCC_PLL_GetN>:
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LL_RCC_PLL_GetR>:
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800448e:	4618      	mov	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_RCC_PLL_GetDivider>:
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800449c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <LL_RCC_PLL_GetMainSource>:
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0303 	and.w	r3, r3, #3
}
 80044be:	4618      	mov	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_RCC_IsActiveFlag_HPRE>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80044cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044da:	d101      	bne.n	80044e0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004500:	d101      	bne.n	8004506 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004512:	b480      	push	{r7}
 8004514:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800451e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d101      	bne.n	800452c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800453c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800454a:	d101      	bne.n	8004550 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_RCC_IsActiveFlag_PPRE2>:
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800456e:	d101      	bne.n	8004574 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b08d      	sub	sp, #52	; 0x34
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e37e      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8092 	beq.w	80046c4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a0:	f7ff fe7d 	bl	800429e <LL_RCC_GetSysClkSource>
 80045a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045a6:	f7ff ff83 	bl	80044b0 <LL_RCC_PLL_GetMainSource>
 80045aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCC_OscConfig+0x3e>
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	2b0c      	cmp	r3, #12
 80045b6:	d14c      	bne.n	8004652 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d149      	bne.n	8004652 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045be:	f7ff fe0b 	bl	80041d8 <LL_RCC_MSI_IsReady>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_OscConfig+0x54>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e35d      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80045d8:	f7ff fe23 	bl	8004222 <LL_RCC_MSI_GetRange>
 80045dc:	4603      	mov	r3, r0
 80045de:	429c      	cmp	r4, r3
 80045e0:	d914      	bls.n	800460c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fd5c 	bl	80050a4 <RCC_SetFlashLatencyFromMSIRange>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e34c      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fdfd 	bl	80041fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fe21 	bl	800424c <LL_RCC_MSI_SetCalibTrimming>
 800460a:	e013      	b.n	8004634 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fdf2 	bl	80041fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fe16 	bl	800424c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fd3d 	bl	80050a4 <RCC_SetFlashLatencyFromMSIRange>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e32d      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004634:	f000 fcda 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8004638:	4602      	mov	r2, r0
 800463a:	4bb3      	ldr	r3, [pc, #716]	; (8004908 <HAL_RCC_OscConfig+0x388>)
 800463c:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800463e:	4bb3      	ldr	r3, [pc, #716]	; (800490c <HAL_RCC_OscConfig+0x38c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fd fad6 	bl	8001bf4 <HAL_InitTick>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d039      	beq.n	80046c2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e31e      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01e      	beq.n	8004698 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800465a:	f7ff fd9f 	bl	800419c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800465e:	f7fd fc33 	bl	8001ec8 <HAL_GetTick>
 8004662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004666:	f7fd fc2f 	bl	8001ec8 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e30b      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004678:	f7ff fdae 	bl	80041d8 <LL_RCC_MSI_IsReady>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f1      	beq.n	8004666 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fdb7 	bl	80041fa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fddb 	bl	800424c <LL_RCC_MSI_SetCalibTrimming>
 8004696:	e015      	b.n	80046c4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004698:	f7ff fd8f 	bl	80041ba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800469c:	f7fd fc14 	bl	8001ec8 <HAL_GetTick>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046a4:	f7fd fc10 	bl	8001ec8 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e2ec      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80046b6:	f7ff fd8f 	bl	80041d8 <LL_RCC_MSI_IsReady>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f1      	bne.n	80046a4 <HAL_RCC_OscConfig+0x124>
 80046c0:	e000      	b.n	80046c4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d04e      	beq.n	800476e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d0:	f7ff fde5 	bl	800429e <LL_RCC_GetSysClkSource>
 80046d4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d6:	f7ff feeb 	bl	80044b0 <LL_RCC_PLL_GetMainSource>
 80046da:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d005      	beq.n	80046ee <HAL_RCC_OscConfig+0x16e>
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	d10d      	bne.n	8004704 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d10a      	bne.n	8004704 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ee:	f7ff fbf5 	bl	8003edc <LL_RCC_HSE_IsReady>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d039      	beq.n	800476c <HAL_RCC_OscConfig+0x1ec>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d135      	bne.n	800476c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e2c5      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d102      	bne.n	8004714 <HAL_RCC_OscConfig+0x194>
 800470e:	f7ff fbc7 	bl	8003ea0 <LL_RCC_HSE_Enable>
 8004712:	e001      	b.n	8004718 <HAL_RCC_OscConfig+0x198>
 8004714:	f7ff fbd3 	bl	8003ebe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d012      	beq.n	8004746 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fd fbd2 	bl	8001ec8 <HAL_GetTick>
 8004724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004728:	f7fd fbce 	bl	8001ec8 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e2aa      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800473a:	f7ff fbcf 	bl	8003edc <LL_RCC_HSE_IsReady>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f1      	beq.n	8004728 <HAL_RCC_OscConfig+0x1a8>
 8004744:	e013      	b.n	800476e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd fbbf 	bl	8001ec8 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474e:	f7fd fbbb 	bl	8001ec8 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b64      	cmp	r3, #100	; 0x64
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e297      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004760:	f7ff fbbc 	bl	8003edc <LL_RCC_HSE_IsReady>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f1      	bne.n	800474e <HAL_RCC_OscConfig+0x1ce>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d051      	beq.n	800481e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477a:	f7ff fd90 	bl	800429e <LL_RCC_GetSysClkSource>
 800477e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004780:	f7ff fe96 	bl	80044b0 <LL_RCC_PLL_GetMainSource>
 8004784:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b04      	cmp	r3, #4
 800478a:	d005      	beq.n	8004798 <HAL_RCC_OscConfig+0x218>
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d113      	bne.n	80047ba <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d110      	bne.n	80047ba <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004798:	f7ff fbd0 	bl	8003f3c <LL_RCC_HSI_IsReady>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d005      	beq.n	80047ae <HAL_RCC_OscConfig+0x22e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e270      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fbd4 	bl	8003f60 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b8:	e031      	b.n	800481e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d019      	beq.n	80047f6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c2:	f7ff fb9d 	bl	8003f00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fd fb7f 	bl	8001ec8 <HAL_GetTick>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ce:	f7fd fb7b 	bl	8001ec8 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e257      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80047e0:	f7ff fbac 	bl	8003f3c <LL_RCC_HSI_IsReady>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f1      	beq.n	80047ce <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fbb6 	bl	8003f60 <LL_RCC_HSI_SetCalibTrimming>
 80047f4:	e013      	b.n	800481e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f6:	f7ff fb92 	bl	8003f1e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fd fb65 	bl	8001ec8 <HAL_GetTick>
 80047fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004802:	f7fd fb61 	bl	8001ec8 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e23d      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004814:	f7ff fb92 	bl	8003f3c <LL_RCC_HSI_IsReady>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f1      	bne.n	8004802 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80a3 	beq.w	800497e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d076      	beq.n	800492e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d046      	beq.n	80048da <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800484c:	f7ff fc49 	bl	80040e2 <LL_RCC_LSI1_IsReady>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d113      	bne.n	800487e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004856:	f7ff fc22 	bl	800409e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800485a:	f7fd fb35 	bl	8001ec8 <HAL_GetTick>
 800485e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004862:	f7fd fb31 	bl	8001ec8 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e20d      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004874:	f7ff fc35 	bl	80040e2 <LL_RCC_LSI1_IsReady>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f1      	beq.n	8004862 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800487e:	f7ff fc42 	bl	8004106 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fd fb21 	bl	8001ec8 <HAL_GetTick>
 8004886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800488a:	f7fd fb1d 	bl	8001ec8 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e1f9      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800489c:	f7ff fc55 	bl	800414a <LL_RCC_LSI2_IsReady>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f1      	beq.n	800488a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fc5f 	bl	800416e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80048b0:	f7ff fc06 	bl	80040c0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd fb08 	bl	8001ec8 <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048bc:	f7fd fb04 	bl	8001ec8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1e0      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80048ce:	f7ff fc08 	bl	80040e2 <LL_RCC_LSI1_IsReady>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f1      	bne.n	80048bc <HAL_RCC_OscConfig+0x33c>
 80048d8:	e051      	b.n	800497e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80048da:	f7ff fbe0 	bl	800409e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048de:	f7fd faf3 	bl	8001ec8 <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048e6:	f7fd faef 	bl	8001ec8 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e1cb      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048f8:	f7ff fbf3 	bl	80040e2 <LL_RCC_LSI1_IsReady>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f1      	beq.n	80048e6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004902:	f7ff fc11 	bl	8004128 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004906:	e00c      	b.n	8004922 <HAL_RCC_OscConfig+0x3a2>
 8004908:	20000028 	.word	0x20000028
 800490c:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004910:	f7fd fada 	bl	8001ec8 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b03      	cmp	r3, #3
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e1b6      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004922:	f7ff fc12 	bl	800414a <LL_RCC_LSI2_IsReady>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f1      	bne.n	8004910 <HAL_RCC_OscConfig+0x390>
 800492c:	e027      	b.n	800497e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800492e:	f7ff fbfb 	bl	8004128 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004932:	f7fd fac9 	bl	8001ec8 <HAL_GetTick>
 8004936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800493a:	f7fd fac5 	bl	8001ec8 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b03      	cmp	r3, #3
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e1a1      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800494c:	f7ff fbfd 	bl	800414a <LL_RCC_LSI2_IsReady>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f1      	bne.n	800493a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004956:	f7ff fbb3 	bl	80040c0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fd fab5 	bl	8001ec8 <HAL_GetTick>
 800495e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004962:	f7fd fab1 	bl	8001ec8 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e18d      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004974:	f7ff fbb5 	bl	80040e2 <LL_RCC_LSI1_IsReady>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f1      	bne.n	8004962 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d05b      	beq.n	8004a42 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498a:	4bb5      	ldr	r3, [pc, #724]	; (8004c60 <HAL_RCC_OscConfig+0x6e0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d114      	bne.n	80049c0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004996:	f7ff fa43 	bl	8003e20 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499a:	f7fd fa95 	bl	8001ec8 <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a2:	f7fd fa91 	bl	8001ec8 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e16d      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b4:	4baa      	ldr	r3, [pc, #680]	; (8004c60 <HAL_RCC_OscConfig+0x6e0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d102      	bne.n	80049ce <HAL_RCC_OscConfig+0x44e>
 80049c8:	f7ff fb13 	bl	8003ff2 <LL_RCC_LSE_Enable>
 80049cc:	e00c      	b.n	80049e8 <HAL_RCC_OscConfig+0x468>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d104      	bne.n	80049e0 <HAL_RCC_OscConfig+0x460>
 80049d6:	f7ff fb2e 	bl	8004036 <LL_RCC_LSE_EnableBypass>
 80049da:	f7ff fb0a 	bl	8003ff2 <LL_RCC_LSE_Enable>
 80049de:	e003      	b.n	80049e8 <HAL_RCC_OscConfig+0x468>
 80049e0:	f7ff fb18 	bl	8004014 <LL_RCC_LSE_Disable>
 80049e4:	f7ff fb38 	bl	8004058 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d014      	beq.n	8004a1a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fd fa6a 	bl	8001ec8 <HAL_GetTick>
 80049f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fd fa66 	bl	8001ec8 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e140      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a0e:	f7ff fb34 	bl	800407a <LL_RCC_LSE_IsReady>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0ef      	beq.n	80049f8 <HAL_RCC_OscConfig+0x478>
 8004a18:	e013      	b.n	8004a42 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1a:	f7fd fa55 	bl	8001ec8 <HAL_GetTick>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f7fd fa51 	bl	8001ec8 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e12b      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a38:	f7ff fb1f 	bl	800407a <LL_RCC_LSE_IsReady>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ef      	bne.n	8004a22 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d02c      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d014      	beq.n	8004a80 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a56:	f7ff fa98 	bl	8003f8a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fd fa35 	bl	8001ec8 <HAL_GetTick>
 8004a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a62:	f7fd fa31 	bl	8001ec8 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e10d      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a74:	f7ff faab 	bl	8003fce <LL_RCC_HSI48_IsReady>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f1      	beq.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
 8004a7e:	e013      	b.n	8004aa8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a80:	f7ff fa94 	bl	8003fac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fd fa20 	bl	8001ec8 <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a8c:	f7fd fa1c 	bl	8001ec8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0f8      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a9e:	f7ff fa96 	bl	8003fce <LL_RCC_HSI48_IsReady>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f1      	bne.n	8004a8c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80ee 	beq.w	8004c8e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab2:	f7ff fbf4 	bl	800429e <LL_RCC_GetSysClkSource>
 8004ab6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	f040 80af 	bne.w	8004c28 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0203 	and.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d123      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d11c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d114      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d10d      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d106      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d05d      	beq.n	8004bdc <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d058      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0ab      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b38:	f7ff fc74 	bl	8004424 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b3c:	f7fd f9c4 	bl	8001ec8 <HAL_GetTick>
 8004b40:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fd f9c0 	bl	8001ec8 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e09c      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ef      	bne.n	8004b44 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <HAL_RCC_OscConfig+0x6e4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b76:	4311      	orrs	r1, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b7c:	0212      	lsls	r2, r2, #8
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b84:	4311      	orrs	r1, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b8a:	4311      	orrs	r1, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b90:	430a      	orrs	r2, r1
 8004b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b9a:	f7ff fc34 	bl	8004406 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bac:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bae:	f7fd f98b 	bl	8001ec8 <HAL_GetTick>
 8004bb2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fd f987 	bl	8001ec8 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e063      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ef      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd6:	e05a      	b.n	8004c8e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e059      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d151      	bne.n	8004c8e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bea:	f7ff fc0c 	bl	8004406 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bfe:	f7fd f963 	bl	8001ec8 <HAL_GetTick>
 8004c02:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fd f95f 	bl	8001ec8 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e03b      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0ef      	beq.n	8004c06 <HAL_RCC_OscConfig+0x686>
 8004c26:	e032      	b.n	8004c8e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	d02d      	beq.n	8004c8a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	f7ff fbf9 	bl	8004424 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c3c:	f023 0303 	bic.w	r3, r3, #3
 8004c40:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c4c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fd f937 	bl	8001ec8 <HAL_GetTick>
 8004c5a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5c:	e00d      	b.n	8004c7a <HAL_RCC_OscConfig+0x6fa>
 8004c5e:	bf00      	nop
 8004c60:	58000400 	.word	0x58000400
 8004c64:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fd f92e 	bl	8001ec8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1ef      	bne.n	8004c68 <HAL_RCC_OscConfig+0x6e8>
 8004c88:	e001      	b.n	8004c8e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3734      	adds	r7, #52	; 0x34
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd90      	pop	{r4, r7, pc}

08004c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e12d      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b98      	ldr	r3, [pc, #608]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d91b      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b95      	ldr	r3, [pc, #596]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 0207 	bic.w	r2, r3, #7
 8004cc2:	4993      	ldr	r1, [pc, #588]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cca:	f7fd f8fd 	bl	8001ec8 <HAL_GetTick>
 8004cce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cd2:	f7fd f8f9 	bl	8001ec8 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e111      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce4:	4b8a      	ldr	r3, [pc, #552]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d1ef      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fad7 	bl	80042b6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d08:	f7fd f8de 	bl	8001ec8 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d10:	f7fd f8da 	bl	8001ec8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0f2      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d22:	f7ff fbd1 	bl	80044c8 <LL_RCC_IsActiveFlag_HPRE>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f1      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff face 	bl	80042de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d42:	f7fd f8c1 	bl	8001ec8 <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d4a:	f7fd f8bd 	bl	8001ec8 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0d5      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d5c:	f7ff fbc6 	bl	80044ec <LL_RCC_IsActiveFlag_C2HPRE>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f1      	beq.n	8004d4a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fac7 	bl	800430a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d7c:	f7fd f8a4 	bl	8001ec8 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d84:	f7fd f8a0 	bl	8001ec8 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0b8      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d96:	f7ff fbbc 	bl	8004512 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f1      	beq.n	8004d84 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d016      	beq.n	8004dda <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fac1 	bl	8004338 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004db6:	f7fd f887 	bl	8001ec8 <HAL_GetTick>
 8004dba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dbe:	f7fd f883 	bl	8001ec8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e09b      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004dd0:	f7ff fbb2 	bl	8004538 <LL_RCC_IsActiveFlag_PPRE1>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f1      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d017      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fab7 	bl	8004360 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004df2:	f7fd f869 	bl	8001ec8 <HAL_GetTick>
 8004df6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dfa:	f7fd f865 	bl	8001ec8 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e07d      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e0c:	f7ff fba6 	bl	800455c <LL_RCC_IsActiveFlag_PPRE2>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f1      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d043      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d106      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e2a:	f7ff f857 	bl	8003edc <LL_RCC_HSE_IsReady>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d11e      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e067      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004e40:	f7ff faff 	bl	8004442 <LL_RCC_PLL_IsReady>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d113      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e05c      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004e56:	f7ff f9bf 	bl	80041d8 <LL_RCC_MSI_IsReady>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d108      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e051      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e64:	f7ff f86a 	bl	8003f3c <LL_RCC_HSI_IsReady>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e04a      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff f9fd 	bl	8004276 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd f824 	bl	8001ec8 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd f820 	bl	8001ec8 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e036      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	f7ff fa00 	bl	800429e <LL_RCC_GetSysClkSource>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d1ec      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eaa:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d21b      	bcs.n	8004ef0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f023 0207 	bic.w	r2, r3, #7
 8004ec0:	4913      	ldr	r1, [pc, #76]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec8:	f7fc fffe 	bl	8001ec8 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ed0:	f7fc fffa 	bl	8001ec8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e012      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1ef      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ef0:	f000 f87c 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <HAL_RCC_ClockConfig+0x27c>)
 8004ef8:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004efa:	f7fc fff1 	bl	8001ee0 <HAL_GetTickPrio>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fc fe77 	bl	8001bf4 <HAL_InitTick>
 8004f06:	4603      	mov	r3, r0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	58004000 	.word	0x58004000
 8004f14:	20000028 	.word	0x20000028

08004f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f1e:	f7ff f9be 	bl	800429e <LL_RCC_GetSysClkSource>
 8004f22:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f2a:	f7ff f97a 	bl	8004222 <LL_RCC_MSI_GetRange>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e04a      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d102      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f46:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e044      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d10a      	bne.n	8004f68 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f52:	f7fe ff93 	bl	8003e7c <LL_RCC_HSE_IsEnabledDiv2>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d102      	bne.n	8004f62 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004f5c:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e039      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f62:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e036      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004f68:	f7ff faa2 	bl	80044b0 <LL_RCC_PLL_GetMainSource>
 8004f6c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d002      	beq.n	8004f7a <HAL_RCC_GetSysClockFreq+0x62>
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d003      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0x68>
 8004f78:	e00d      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f7c:	60bb      	str	r3, [r7, #8]
        break;
 8004f7e:	e015      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f80:	f7fe ff7c 	bl	8003e7c <LL_RCC_HSE_IsEnabledDiv2>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d102      	bne.n	8004f90 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f8a:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f8c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f8e:	e00d      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8004f90:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f92:	60bb      	str	r3, [r7, #8]
        break;
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f96:	f7ff f944 	bl	8004222 <LL_RCC_MSI_GetRange>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	4a0f      	ldr	r2, [pc, #60]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa8:	60bb      	str	r3, [r7, #8]
        break;
 8004faa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004fac:	f7ff fa5b 	bl	8004466 <LL_RCC_PLL_GetN>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	fb03 f402 	mul.w	r4, r3, r2
 8004fb8:	f7ff fa6e 	bl	8004498 <LL_RCC_PLL_GetDivider>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	fbb4 f4f3 	udiv	r4, r4, r3
 8004fc6:	f7ff fa5b 	bl	8004480 <LL_RCC_PLL_GetR>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	0f5b      	lsrs	r3, r3, #29
 8004fce:	3301      	adds	r3, #1
 8004fd0:	fbb4 f3f3 	udiv	r3, r4, r3
 8004fd4:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd90      	pop	{r4, r7, pc}
 8004fe0:	08010ce8 	.word	0x08010ce8
 8004fe4:	00f42400 	.word	0x00f42400
 8004fe8:	01e84800 	.word	0x01e84800

08004fec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fec:	b598      	push	{r3, r4, r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004ff0:	f7ff ff92 	bl	8004f18 <HAL_RCC_GetSysClockFreq>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	f7ff f9c7 	bl	8004388 <LL_RCC_GetAHBPrescaler>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	4a03      	ldr	r2, [pc, #12]	; (8005010 <HAL_RCC_GetHCLKFreq+0x24>)
 8005004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005008:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd98      	pop	{r3, r4, r7, pc}
 8005010:	08010c88 	.word	0x08010c88

08005014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005014:	b598      	push	{r3, r4, r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005018:	f7ff ffe8 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 800501c:	4604      	mov	r4, r0
 800501e:	f7ff f9e6 	bl	80043ee <LL_RCC_GetAPB2Prescaler>
 8005022:	4603      	mov	r3, r0
 8005024:	0adb      	lsrs	r3, r3, #11
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	4a04      	ldr	r2, [pc, #16]	; (800503c <HAL_RCC_GetPCLK2Freq+0x28>)
 800502c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd98      	pop	{r3, r4, r7, pc}
 800503c:	08010cc8 	.word	0x08010cc8

08005040 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	226f      	movs	r2, #111	; 0x6f
 800504e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005050:	f7ff f925 	bl	800429e <LL_RCC_GetSysClkSource>
 8005054:	4602      	mov	r2, r0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800505a:	f7ff f995 	bl	8004388 <LL_RCC_GetAHBPrescaler>
 800505e:	4602      	mov	r2, r0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005064:	f7ff f9b7 	bl	80043d6 <LL_RCC_GetAPB1Prescaler>
 8005068:	4602      	mov	r2, r0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800506e:	f7ff f9be 	bl	80043ee <LL_RCC_GetAPB2Prescaler>
 8005072:	4602      	mov	r2, r0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005078:	f7ff f992 	bl	80043a0 <LL_C2_RCC_GetAHBPrescaler>
 800507c:	4602      	mov	r2, r0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005082:	f7ff f99a 	bl	80043ba <LL_RCC_GetAHB4Prescaler>
 8005086:	4602      	mov	r2, r0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <HAL_RCC_GetClockConfig+0x60>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0207 	and.w	r2, r3, #7
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	601a      	str	r2, [r3, #0]
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	58004000 	.word	0x58004000

080050a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2bb0      	cmp	r3, #176	; 0xb0
 80050b0:	d903      	bls.n	80050ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e007      	b.n	80050ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	4a11      	ldr	r2, [pc, #68]	; (8005108 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80050c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80050ca:	f7ff f976 	bl	80043ba <LL_RCC_GetAHB4Prescaler>
 80050ce:	4603      	mov	r3, r0
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	4a0d      	ldr	r2, [pc, #52]	; (800510c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80050d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	0c9c      	lsrs	r4, r3, #18
 80050ee:	f7fe fea7 	bl	8003e40 <HAL_PWREx_GetVoltageRange>
 80050f2:	4603      	mov	r3, r0
 80050f4:	4619      	mov	r1, r3
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 f80c 	bl	8005114 <RCC_SetFlashLatency>
 80050fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	bd90      	pop	{r4, r7, pc}
 8005106:	bf00      	nop
 8005108:	08010ce8 	.word	0x08010ce8
 800510c:	08010c88 	.word	0x08010c88
 8005110:	431bde83 	.word	0x431bde83

08005114 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b093      	sub	sp, #76	; 0x4c
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800511e:	4b39      	ldr	r3, [pc, #228]	; (8005204 <RCC_SetFlashLatency+0xf0>)
 8005120:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800512a:	4a37      	ldr	r2, [pc, #220]	; (8005208 <RCC_SetFlashLatency+0xf4>)
 800512c:	f107 031c 	add.w	r3, r7, #28
 8005130:	ca07      	ldmia	r2, {r0, r1, r2}
 8005132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005136:	4b35      	ldr	r3, [pc, #212]	; (800520c <RCC_SetFlashLatency+0xf8>)
 8005138:	f107 040c 	add.w	r4, r7, #12
 800513c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800513e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005142:	2300      	movs	r3, #0
 8005144:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514c:	d11c      	bne.n	8005188 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800514e:	2300      	movs	r3, #0
 8005150:	643b      	str	r3, [r7, #64]	; 0x40
 8005152:	e015      	b.n	8005180 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800515c:	4413      	add	r3, r2
 800515e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d808      	bhi.n	800517a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005170:	4413      	add	r3, r2
 8005172:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005176:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005178:	e022      	b.n	80051c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800517a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517c:	3301      	adds	r3, #1
 800517e:	643b      	str	r3, [r7, #64]	; 0x40
 8005180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005182:	2b03      	cmp	r3, #3
 8005184:	d9e6      	bls.n	8005154 <RCC_SetFlashLatency+0x40>
 8005186:	e01b      	b.n	80051c0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005188:	2300      	movs	r3, #0
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518c:	e015      	b.n	80051ba <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800518e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005196:	4413      	add	r3, r2
 8005198:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d808      	bhi.n	80051b4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80051a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80051aa:	4413      	add	r3, r2
 80051ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80051b0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80051b2:	e005      	b.n	80051c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80051b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b6:	3301      	adds	r3, #1
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d9e6      	bls.n	800518e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80051c0:	4b13      	ldr	r3, [pc, #76]	; (8005210 <RCC_SetFlashLatency+0xfc>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f023 0207 	bic.w	r2, r3, #7
 80051c8:	4911      	ldr	r1, [pc, #68]	; (8005210 <RCC_SetFlashLatency+0xfc>)
 80051ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051cc:	4313      	orrs	r3, r2
 80051ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051d0:	f7fc fe7a 	bl	8001ec8 <HAL_GetTick>
 80051d4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80051d6:	e008      	b.n	80051ea <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80051d8:	f7fc fe76 	bl	8001ec8 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e007      	b.n	80051fa <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80051ea:	4b09      	ldr	r3, [pc, #36]	; (8005210 <RCC_SetFlashLatency+0xfc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d1ef      	bne.n	80051d8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	374c      	adds	r7, #76	; 0x4c
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd90      	pop	{r4, r7, pc}
 8005202:	bf00      	nop
 8005204:	08010900 	.word	0x08010900
 8005208:	08010910 	.word	0x08010910
 800520c:	0801091c 	.word	0x0801091c
 8005210:	58004000 	.word	0x58004000

08005214 <LL_RCC_LSE_IsEnabled>:
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <LL_RCC_LSE_IsEnabled+0x18>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <LL_RCC_LSE_IsEnabled+0x1a>
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <LL_RCC_LSE_IsReady>:
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b02      	cmp	r3, #2
 800524a:	d101      	bne.n	8005250 <LL_RCC_LSE_IsReady+0x18>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <LL_RCC_LSE_IsReady+0x1a>
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <LL_RCC_MSI_EnablePLLMode>:
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800526a:	f043 0304 	orr.w	r3, r3, #4
 800526e:	6013      	str	r3, [r2, #0]
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <LL_RCC_SetRFWKPClockSource>:
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800528a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800528e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_SetSMPSClockSource>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	f023 0203 	bic.w	r2, r3, #3
 80052b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4313      	orrs	r3, r2
 80052c0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <LL_RCC_SetSMPSPrescaler>:
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <LL_RCC_SetUSARTClockSource>:
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80052fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f023 0203 	bic.w	r2, r3, #3
 800530a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <LL_RCC_SetLPUARTClockSource>:
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800532a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <LL_RCC_SetI2CClockSource>:
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005366:	43db      	mvns	r3, r3
 8005368:	401a      	ands	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <LL_RCC_SetLPTIMClockSource>:
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0c1b      	lsrs	r3, r3, #16
 800539c:	041b      	lsls	r3, r3, #16
 800539e:	43db      	mvns	r3, r3
 80053a0:	401a      	ands	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <LL_RCC_SetSAIClockSource>:
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80053c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <LL_RCC_SetRNGClockSource>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80053f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80053fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <LL_RCC_SetCLK48ClockSource>:
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <LL_RCC_SetUSBClockSource>:
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff ffe3 	bl	8005414 <LL_RCC_SetCLK48ClockSource>
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <LL_RCC_SetADCClockSource>:
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800545e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800546a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <LL_RCC_SetRTCClockSource>:
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <LL_RCC_GetRTCClockSource>:
{
 80054ae:	b480      	push	{r7}
 80054b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80054be:	4618      	mov	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <LL_RCC_ForceBackupDomainReset>:
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054e0:	bf00      	nop
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <LL_RCC_ReleaseBackupDomainReset>:
{
 80054ea:	b480      	push	{r7}
 80054ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005502:	bf00      	nop
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <LL_RCC_PLLSAI1_Enable>:
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800551a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800551e:	6013      	str	r3, [r2, #0]
}
 8005520:	bf00      	nop
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <LL_RCC_PLLSAI1_Disable>:
{
 800552a:	b480      	push	{r7}
 800552c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800552e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005538:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800553c:	6013      	str	r3, [r2, #0]
}
 800553e:	bf00      	nop
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <LL_RCC_PLLSAI1_IsReady>:
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800554c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800555a:	d101      	bne.n	8005560 <LL_RCC_PLLSAI1_IsReady+0x18>
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005574:	2300      	movs	r3, #0
 8005576:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005578:	2300      	movs	r3, #0
 800557a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d033      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005590:	d00c      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005596:	d802      	bhi.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x52>
 800559c:	e017      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 800559e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055a2:	d017      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80055a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055a8:	d016      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80055aa:	e010      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ba:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80055bc:	e00d      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f94d 	bl	8005862 <RCCEx_PLLSAI1_ConfigNP>
 80055c8:	4603      	mov	r3, r0
 80055ca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055cc:	e005      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	77fb      	strb	r3, [r7, #31]
        break;
 80055d2:	e002      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80055d4:	bf00      	nop
 80055d6:	e000      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80055d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055da:	7ffb      	ldrb	r3, [r7, #31]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fee9 	bl	80053bc <LL_RCC_SetSAIClockSource>
 80055ea:	e001      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ec:	7ffb      	ldrb	r3, [r7, #31]
 80055ee:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d046      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80055fc:	f7ff ff57 	bl	80054ae <LL_RCC_GetRTCClockSource>
 8005600:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	429a      	cmp	r2, r3
 800560a:	d03c      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800560c:	f7fe fc08 	bl	8003e20 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff ff31 	bl	8005482 <LL_RCC_SetRTCClockSource>
 8005620:	e02e      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800562c:	f7ff ff4c 	bl	80054c8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005630:	f7ff ff5b 	bl	80054ea <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800564c:	f7ff fde2 	bl	8005214 <LL_RCC_LSE_IsEnabled>
 8005650:	4603      	mov	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d114      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005656:	f7fc fc37 	bl	8001ec8 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800565c:	e00b      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565e:	f7fc fc33 	bl	8001ec8 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f241 3288 	movw	r2, #5000	; 0x1388
 800566c:	4293      	cmp	r3, r2
 800566e:	d902      	bls.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	77fb      	strb	r3, [r7, #31]
              break;
 8005674:	e004      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005676:	f7ff fddf 	bl	8005238 <LL_RCC_LSE_IsReady>
 800567a:	4603      	mov	r3, r0
 800567c:	2b01      	cmp	r3, #1
 800567e:	d1ee      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005680:	7ffb      	ldrb	r3, [r7, #31]
 8005682:	77bb      	strb	r3, [r7, #30]
 8005684:	e001      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005686:	7ffb      	ldrb	r3, [r7, #31]
 8005688:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fe2b 	bl	80052f6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fe36 	bl	8005322 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d004      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fe5e 	bl	8005388 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fe53 	bl	8005388 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fe2b 	bl	800534e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fe20 	bl	800534e <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d022      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fe8e 	bl	8005440 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800572c:	d107      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800572e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800573c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005746:	d10b      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	4618      	mov	r0, r3
 800574e:	f000 f8e3 	bl	8005918 <RCCEx_PLLSAI1_ConfigNQ>
 8005752:	4603      	mov	r3, r0
 8005754:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005756:	7ffb      	ldrb	r3, [r7, #31]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800575c:	7ffb      	ldrb	r3, [r7, #31]
 800575e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02b      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d008      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800577e:	d003      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d105      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fe2b 	bl	80053e8 <LL_RCC_SetRNGClockSource>
 8005792:	e00a      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	2000      	movs	r0, #0
 80057a0:	f7ff fe22 	bl	80053e8 <LL_RCC_SetRNGClockSource>
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7ff fe35 	bl	8005414 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80057b2:	d107      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d022      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fe3e 	bl	8005456 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e2:	d107      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fc:	d10b      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f8e3 	bl	80059ce <RCCEx_PLLSAI1_ConfigNR>
 8005808:	4603      	mov	r3, r0
 800580a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800580c:	7ffb      	ldrb	r3, [r7, #31]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8005812:	7ffb      	ldrb	r3, [r7, #31]
 8005814:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fd27 	bl	800527a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d009      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff fd46 	bl	80052ce <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fd2d 	bl	80052a6 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800584c:	7fbb      	ldrb	r3, [r7, #30]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800585a:	f7ff fcff 	bl	800525c <LL_RCC_MSI_EnablePLLMode>
}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}

08005862 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800586e:	f7ff fe5c 	bl	800552a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005872:	f7fc fb29 	bl	8001ec8 <HAL_GetTick>
 8005876:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005878:	e009      	b.n	800588e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800587a:	f7fc fb25 	bl	8001ec8 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d902      	bls.n	800588e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	73fb      	strb	r3, [r7, #15]
      break;
 800588c:	e004      	b.n	8005898 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800588e:	f7ff fe5b 	bl	8005548 <LL_RCC_PLLSAI1_IsReady>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d137      	bne.n	800590e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800589e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058b2:	4313      	orrs	r3, r2
 80058b4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80058b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c8:	4313      	orrs	r3, r2
 80058ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058cc:	f7ff fe1e 	bl	800550c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d0:	f7fc fafa 	bl	8001ec8 <HAL_GetTick>
 80058d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058d6:	e009      	b.n	80058ec <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058d8:	f7fc faf6 	bl	8001ec8 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d902      	bls.n	80058ec <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	73fb      	strb	r3, [r7, #15]
        break;
 80058ea:	e004      	b.n	80058f6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058ec:	f7ff fe2c 	bl	8005548 <LL_RCC_PLLSAI1_IsReady>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d1f0      	bne.n	80058d8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80058fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800590a:	4313      	orrs	r3, r2
 800590c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005924:	f7ff fe01 	bl	800552a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005928:	f7fc face 	bl	8001ec8 <HAL_GetTick>
 800592c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800592e:	e009      	b.n	8005944 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005930:	f7fc faca 	bl	8001ec8 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d902      	bls.n	8005944 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	73fb      	strb	r3, [r7, #15]
      break;
 8005942:	e004      	b.n	800594e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005944:	f7ff fe00 	bl	8005548 <LL_RCC_PLLSAI1_IsReady>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d137      	bne.n	80059c4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005968:	4313      	orrs	r3, r2
 800596a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800597e:	4313      	orrs	r3, r2
 8005980:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005982:	f7ff fdc3 	bl	800550c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005986:	f7fc fa9f 	bl	8001ec8 <HAL_GetTick>
 800598a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800598c:	e009      	b.n	80059a2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800598e:	f7fc fa9b 	bl	8001ec8 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d902      	bls.n	80059a2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	73fb      	strb	r3, [r7, #15]
        break;
 80059a0:	e004      	b.n	80059ac <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059a2:	f7ff fdd1 	bl	8005548 <LL_RCC_PLLSAI1_IsReady>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d1f0      	bne.n	800598e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c0:	4313      	orrs	r3, r2
 80059c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80059da:	f7ff fda6 	bl	800552a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059de:	f7fc fa73 	bl	8001ec8 <HAL_GetTick>
 80059e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059e4:	e009      	b.n	80059fa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059e6:	f7fc fa6f 	bl	8001ec8 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d902      	bls.n	80059fa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	73fb      	strb	r3, [r7, #15]
      break;
 80059f8:	e004      	b.n	8005a04 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059fa:	f7ff fda5 	bl	8005548 <LL_RCC_PLLSAI1_IsReady>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d137      	bne.n	8005a7a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a34:	4313      	orrs	r3, r2
 8005a36:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a38:	f7ff fd68 	bl	800550c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3c:	f7fc fa44 	bl	8001ec8 <HAL_GetTick>
 8005a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a42:	e009      	b.n	8005a58 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a44:	f7fc fa40 	bl	8001ec8 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d902      	bls.n	8005a58 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	73fb      	strb	r3, [r7, #15]
        break;
 8005a56:	e004      	b.n	8005a62 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a58:	f7ff fd76 	bl	8005548 <LL_RCC_PLLSAI1_IsReady>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d1f0      	bne.n	8005a44 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d108      	bne.n	8005a7a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a76:	4313      	orrs	r3, r2
 8005a78:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e090      	b.n	8005bb8 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fb ff04 	bl	80018b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	22ca      	movs	r2, #202	; 0xca
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2253      	movs	r2, #83	; 0x53
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f89f 	bl	8005c0c <RTC_EnterInitMode>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	22ff      	movs	r2, #255	; 0xff
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2204      	movs	r2, #4
 8005ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e067      	b.n	8005bb8 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005afa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6899      	ldr	r1, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68d2      	ldr	r2, [r2, #12]
 8005b22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6919      	ldr	r1, [r3, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	041a      	lsls	r2, r3, #16
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b46:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0203 	bic.w	r2, r2, #3
 8005b56:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d113      	bne.n	8005ba6 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f81e 	bl	8005bc0 <HAL_RTC_WaitForSynchro>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	22ff      	movs	r2, #255	; 0xff
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2204      	movs	r2, #4
 8005b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e008      	b.n	8005bb8 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	22ff      	movs	r2, #255	; 0xff
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
  }
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bd6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005bd8:	f7fc f976 	bl	8001ec8 <HAL_GetTick>
 8005bdc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bde:	e009      	b.n	8005bf4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005be0:	f7fc f972 	bl	8001ec8 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bee:	d901      	bls.n	8005bf4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e007      	b.n	8005c04 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0ee      	beq.n	8005be0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d119      	bne.n	8005c56 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c2c:	f7fc f94c 	bl	8001ec8 <HAL_GetTick>
 8005c30:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c32:	e009      	b.n	8005c48 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c34:	f7fc f948 	bl	8001ec8 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c42:	d901      	bls.n	8005c48 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e007      	b.n	8005c58 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0ee      	beq.n	8005c34 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e049      	b.n	8005d06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f841 	bl	8005d0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f000 f9d6 	bl	8006050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d001      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e036      	b.n	8005daa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <HAL_TIM_Base_Start_IT+0x94>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d004      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x44>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d66:	d115      	bne.n	8005d94 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <HAL_TIM_Base_Start_IT+0x98>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b06      	cmp	r3, #6
 8005d78:	d015      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x82>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d011      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0201 	orr.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d92:	e008      	b.n	8005da6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e000      	b.n	8005da8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	00010007 	.word	0x00010007

08005dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d122      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d11b      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0202 	mvn.w	r2, #2
 8005dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f905 	bl	8006012 <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f8f7 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f908 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d122      	bne.n	8005e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d11b      	bne.n	8005e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0204 	mvn.w	r2, #4
 8005e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f8db 	bl	8006012 <HAL_TIM_IC_CaptureCallback>
 8005e5c:	e005      	b.n	8005e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8cd 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f8de 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d122      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d11b      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0208 	mvn.w	r2, #8
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2204      	movs	r2, #4
 8005e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8b1 	bl	8006012 <HAL_TIM_IC_CaptureCallback>
 8005eb0:	e005      	b.n	8005ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8a3 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f8b4 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0310 	and.w	r3, r3, #16
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d122      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d11b      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0210 	mvn.w	r2, #16
 8005ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2208      	movs	r2, #8
 8005eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f887 	bl	8006012 <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f879 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f88a 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d10e      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0201 	mvn.w	r2, #1
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb fafc 	bl	800153c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b80      	cmp	r3, #128	; 0x80
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5c:	2b80      	cmp	r3, #128	; 0x80
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8de 	bl	800612c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7e:	d10e      	bne.n	8005f9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b80      	cmp	r3, #128	; 0x80
 8005f8c:	d107      	bne.n	8005f9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f8d1 	bl	8006140 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b40      	cmp	r3, #64	; 0x40
 8005faa:	d10e      	bne.n	8005fca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d107      	bne.n	8005fca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f838 	bl	800603a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d10e      	bne.n	8005ff6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d107      	bne.n	8005ff6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f06f 0220 	mvn.w	r2, #32
 8005fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f891 	bl	8006118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a2a      	ldr	r2, [pc, #168]	; (800610c <TIM_Base_SetConfig+0xbc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <TIM_Base_SetConfig+0x20>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606e:	d108      	bne.n	8006082 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a21      	ldr	r2, [pc, #132]	; (800610c <TIM_Base_SetConfig+0xbc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_Base_SetConfig+0x52>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006090:	d007      	beq.n	80060a2 <TIM_Base_SetConfig+0x52>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1e      	ldr	r2, [pc, #120]	; (8006110 <TIM_Base_SetConfig+0xc0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_Base_SetConfig+0x52>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <TIM_Base_SetConfig+0xc4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0c      	ldr	r2, [pc, #48]	; (800610c <TIM_Base_SetConfig+0xbc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d007      	beq.n	80060f0 <TIM_Base_SetConfig+0xa0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a0b      	ldr	r2, [pc, #44]	; (8006110 <TIM_Base_SetConfig+0xc0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_Base_SetConfig+0xa0>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <TIM_Base_SetConfig+0xc4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d103      	bne.n	80060f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	615a      	str	r2, [r3, #20]
}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40014400 	.word	0x40014400
 8006114:	40014800 	.word	0x40014800

08006118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800615c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006160:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	b29b      	uxth	r3, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	b29a      	uxth	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800618e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006192:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4013      	ands	r3, r2
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061bc:	b084      	sub	sp, #16
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	f107 0014 	add.w	r0, r7, #20
 80061ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff ffb0 	bl	8006154 <USB_EnableGlobalInt>

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006200:	b004      	add	sp, #16
 8006202:	4770      	bx	lr

08006204 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006204:	b480      	push	{r7}
 8006206:	b09d      	sub	sp, #116	; 0x74
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	78db      	ldrb	r3, [r3, #3]
 8006232:	2b03      	cmp	r3, #3
 8006234:	d81f      	bhi.n	8006276 <USB_ActivateEndpoint+0x72>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <USB_ActivateEndpoint+0x38>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	0800624d 	.word	0x0800624d
 8006240:	08006269 	.word	0x08006269
 8006244:	0800627f 	.word	0x0800627f
 8006248:	0800625b 	.word	0x0800625b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800624c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006254:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006258:	e012      	b.n	8006280 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800625a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800625e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006262:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006266:	e00b      	b.n	8006280 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006268:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800626c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006270:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006274:	e004      	b.n	8006280 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800627c:	e000      	b.n	8006280 <USB_ActivateEndpoint+0x7c>
      break;
 800627e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	441a      	add	r2, r3
 800628a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800628e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629e:	b29b      	uxth	r3, r3
 80062a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	b21b      	sxth	r3, r3
 80062b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ba:	b21a      	sxth	r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	b21b      	sxth	r3, r3
 80062c2:	4313      	orrs	r3, r2
 80062c4:	b21b      	sxth	r3, r3
 80062c6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	441a      	add	r2, r3
 80062d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80062d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	7b1b      	ldrb	r3, [r3, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f040 8149 	bne.w	8006588 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8084 	beq.w	8006408 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630a:	b29b      	uxth	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	4413      	add	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	00da      	lsls	r2, r3, #3
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	88db      	ldrh	r3, [r3, #6]
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	827b      	strh	r3, [r7, #18]
 8006342:	8a7b      	ldrh	r3, [r7, #18]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <USB_ActivateEndpoint+0x180>
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	823b      	strh	r3, [r7, #16]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	8a3b      	ldrh	r3, [r7, #16]
 8006370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006380:	b29b      	uxth	r3, r3
 8006382:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	78db      	ldrb	r3, [r3, #3]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d020      	beq.n	80063ce <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a2:	81bb      	strh	r3, [r7, #12]
 80063a4:	89bb      	ldrh	r3, [r7, #12]
 80063a6:	f083 0320 	eor.w	r3, r3, #32
 80063aa:	81bb      	strh	r3, [r7, #12]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	441a      	add	r2, r3
 80063b6:	89bb      	ldrh	r3, [r7, #12]
 80063b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	8013      	strh	r3, [r2, #0]
 80063cc:	e2bf      	b.n	800694e <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e4:	81fb      	strh	r3, [r7, #14]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	89fb      	ldrh	r3, [r7, #14]
 80063f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006402:	b29b      	uxth	r3, r3
 8006404:	8013      	strh	r3, [r2, #0]
 8006406:	e2a2      	b.n	800694e <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	633b      	str	r3, [r7, #48]	; 0x30
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006412:	b29b      	uxth	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	4413      	add	r3, r2
 800641a:	633b      	str	r3, [r7, #48]	; 0x30
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	00da      	lsls	r2, r3, #3
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	4413      	add	r3, r2
 8006426:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	88db      	ldrh	r3, [r3, #6]
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	b29b      	uxth	r3, r3
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006446:	b29b      	uxth	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	4413      	add	r3, r2
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	00da      	lsls	r2, r3, #3
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	4413      	add	r3, r2
 800645a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d112      	bne.n	800648e <USB_ActivateEndpoint+0x28a>
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006472:	b29a      	uxth	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006486:	b29a      	uxth	r2, r3
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	e02f      	b.n	80064ee <USB_ActivateEndpoint+0x2ea>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b3e      	cmp	r3, #62	; 0x3e
 8006494:	d813      	bhi.n	80064be <USB_ActivateEndpoint+0x2ba>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	085b      	lsrs	r3, r3, #1
 800649c:	66bb      	str	r3, [r7, #104]	; 0x68
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <USB_ActivateEndpoint+0x2ac>
 80064aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ac:	3301      	adds	r3, #1
 80064ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80064b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	801a      	strh	r2, [r3, #0]
 80064bc:	e017      	b.n	80064ee <USB_ActivateEndpoint+0x2ea>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <USB_ActivateEndpoint+0x2d4>
 80064d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064d4:	3b01      	subs	r3, #1
 80064d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064da:	b29b      	uxth	r3, r3
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	b29b      	uxth	r3, r3
 80064e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80064fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01b      	beq.n	800653e <USB_ActivateEndpoint+0x33a>
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	843b      	strh	r3, [r7, #32]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	8c3b      	ldrh	r3, [r7, #32]
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006554:	83fb      	strh	r3, [r7, #30]
 8006556:	8bfb      	ldrh	r3, [r7, #30]
 8006558:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800655c:	83fb      	strh	r3, [r7, #30]
 800655e:	8bfb      	ldrh	r3, [r7, #30]
 8006560:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006564:	83fb      	strh	r3, [r7, #30]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	441a      	add	r2, r3
 8006570:	8bfb      	ldrh	r3, [r7, #30]
 8006572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006582:	b29b      	uxth	r3, r3
 8006584:	8013      	strh	r3, [r2, #0]
 8006586:	e1e2      	b.n	800694e <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	441a      	add	r2, r3
 80065ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	663b      	str	r3, [r7, #96]	; 0x60
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065d4:	4413      	add	r3, r2
 80065d6:	663b      	str	r3, [r7, #96]	; 0x60
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	00da      	lsls	r2, r3, #3
 80065de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	891b      	ldrh	r3, [r3, #8]
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006602:	b29b      	uxth	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006608:	4413      	add	r3, r2
 800660a:	65bb      	str	r3, [r7, #88]	; 0x58
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	00da      	lsls	r2, r3, #3
 8006612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006614:	4413      	add	r3, r2
 8006616:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800661a:	657b      	str	r3, [r7, #84]	; 0x54
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	895b      	ldrh	r3, [r3, #10]
 8006620:	085b      	lsrs	r3, r3, #1
 8006622:	b29b      	uxth	r3, r3
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f040 80b1 	bne.w	8006798 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800664a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01d      	beq.n	800668e <USB_ActivateEndpoint+0x48a>
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006668:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800669c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d01b      	beq.n	80066de <USB_ActivateEndpoint+0x4da>
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80066ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	441a      	add	r2, r3
 8006700:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006712:	b29b      	uxth	r3, r3
 8006714:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672c:	873b      	strh	r3, [r7, #56]	; 0x38
 800672e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006730:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006734:	873b      	strh	r3, [r7, #56]	; 0x38
 8006736:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006738:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800673c:	873b      	strh	r3, [r7, #56]	; 0x38
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006774:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	441a      	add	r2, r3
 8006780:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006792:	b29b      	uxth	r3, r3
 8006794:	8013      	strh	r3, [r2, #0]
 8006796:	e0da      	b.n	800694e <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80067a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80067ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01d      	beq.n	80067f0 <USB_ActivateEndpoint+0x5ec>
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80067dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006800:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01d      	beq.n	8006848 <USB_ActivateEndpoint+0x644>
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006822:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	441a      	add	r2, r3
 8006830:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006840:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006844:	b29b      	uxth	r3, r3
 8006846:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800687c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006880:	b29b      	uxth	r3, r3
 8006882:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d024      	beq.n	80068d6 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80068a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80068aa:	f083 0320 	eor.w	r3, r3, #32
 80068ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]
 80068d4:	e01d      	b.n	8006912 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006928:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	441a      	add	r2, r3
 8006936:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800694e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006952:	4618      	mov	r0, r3
 8006954:	3774      	adds	r7, #116	; 0x74
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop

08006960 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006960:	b480      	push	{r7}
 8006962:	b08d      	sub	sp, #52	; 0x34
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	7b1b      	ldrb	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 808e 	bne.w	8006a90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d044      	beq.n	8006a06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	81bb      	strh	r3, [r7, #12]
 800698a:	89bb      	ldrh	r3, [r7, #12]
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <USB_DeactivateEndpoint+0x6c>
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069aa:	817b      	strh	r3, [r7, #10]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	897b      	ldrh	r3, [r7, #10]
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e2:	813b      	strh	r3, [r7, #8]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	441a      	add	r2, r3
 80069ee:	893b      	ldrh	r3, [r7, #8]
 80069f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	8013      	strh	r3, [r2, #0]
 8006a04:	e192      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	827b      	strh	r3, [r7, #18]
 8006a14:	8a7b      	ldrh	r3, [r7, #18]
 8006a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01b      	beq.n	8006a56 <USB_DeactivateEndpoint+0xf6>
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a34:	823b      	strh	r3, [r7, #16]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	8a3b      	ldrh	r3, [r7, #16]
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6c:	81fb      	strh	r3, [r7, #14]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]
 8006a8e:	e14d      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 80a5 	bne.w	8006be4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	843b      	strh	r3, [r7, #32]
 8006aa8:	8c3b      	ldrh	r3, [r7, #32]
 8006aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01b      	beq.n	8006aea <USB_DeactivateEndpoint+0x18a>
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac8:	83fb      	strh	r3, [r7, #30]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	8bfb      	ldrh	r3, [r7, #30]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	83bb      	strh	r3, [r7, #28]
 8006af8:	8bbb      	ldrh	r3, [r7, #28]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01b      	beq.n	8006b3a <USB_DeactivateEndpoint+0x1da>
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b18:	837b      	strh	r3, [r7, #26]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	441a      	add	r2, r3
 8006b24:	8b7b      	ldrh	r3, [r7, #26]
 8006b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b50:	833b      	strh	r3, [r7, #24]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	441a      	add	r2, r3
 8006b5c:	8b3b      	ldrh	r3, [r7, #24]
 8006b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b88:	82fb      	strh	r3, [r7, #22]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	8afb      	ldrh	r3, [r7, #22]
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc0:	82bb      	strh	r3, [r7, #20]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8abb      	ldrh	r3, [r7, #20]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
 8006be2:	e0a3      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006bf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <USB_DeactivateEndpoint+0x2d4>
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <USB_DeactivateEndpoint+0x324>
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	441a      	add	r2, r3
 8006cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	441a      	add	r2, r3
 8006d16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3734      	adds	r7, #52	; 0x34
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b0a0      	sub	sp, #128	; 0x80
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	785b      	ldrb	r3, [r3, #1]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	f040 81a1 	bne.w	8007090 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d909      	bls.n	8006d6e <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	699a      	ldr	r2, [r3, #24]
 8006d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d66:	1ad2      	subs	r2, r2, r3
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	619a      	str	r2, [r3, #24]
 8006d6c:	e005      	b.n	8006d7a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2200      	movs	r2, #0
 8006d78:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	7b1b      	ldrb	r3, [r3, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d11f      	bne.n	8006dc2 <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6959      	ldr	r1, [r3, #20]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	88da      	ldrh	r2, [r3, #6]
 8006d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fc3f 	bl	8007612 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4413      	add	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	00da      	lsls	r2, r3, #3
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	4413      	add	r3, r2
 8006db2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e141      	b.n	8007046 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d076      	beq.n	8006ec6 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d153      	bne.n	8006e8c <USB_EPStartXfer+0x152>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	00da      	lsls	r2, r3, #3
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d112      	bne.n	8006e34 <USB_EPStartXfer+0xfa>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	e043      	b.n	8006ebc <USB_EPStartXfer+0x182>
 8006e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e36:	2b3e      	cmp	r3, #62	; 0x3e
 8006e38:	d811      	bhi.n	8006e5e <USB_EPStartXfer+0x124>
 8006e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	677b      	str	r3, [r7, #116]	; 0x74
 8006e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <USB_EPStartXfer+0x116>
 8006e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	677b      	str	r3, [r7, #116]	; 0x74
 8006e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	029b      	lsls	r3, r3, #10
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	e02e      	b.n	8006ebc <USB_EPStartXfer+0x182>
 8006e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	677b      	str	r3, [r7, #116]	; 0x74
 8006e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <USB_EPStartXfer+0x13a>
 8006e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e70:	3b01      	subs	r3, #1
 8006e72:	677b      	str	r3, [r7, #116]	; 0x74
 8006e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	029b      	lsls	r3, r3, #10
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e017      	b.n	8006ebc <USB_EPStartXfer+0x182>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d113      	bne.n	8006ebc <USB_EPStartXfer+0x182>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	4413      	add	r3, r2
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	00da      	lsls	r2, r3, #3
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006eb2:	623b      	str	r3, [r7, #32]
 8006eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	895b      	ldrh	r3, [r3, #10]
 8006ec0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8006ec4:	e075      	b.n	8006fb2 <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d153      	bne.n	8006f76 <USB_EPStartXfer+0x23c>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	4413      	add	r3, r2
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	00da      	lsls	r2, r3, #3
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	4413      	add	r3, r2
 8006eec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d112      	bne.n	8006f1e <USB_EPStartXfer+0x1e4>
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	801a      	strh	r2, [r3, #0]
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e045      	b.n	8006faa <USB_EPStartXfer+0x270>
 8006f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f20:	2b3e      	cmp	r3, #62	; 0x3e
 8006f22:	d811      	bhi.n	8006f48 <USB_EPStartXfer+0x20e>
 8006f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	673b      	str	r3, [r7, #112]	; 0x70
 8006f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <USB_EPStartXfer+0x200>
 8006f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f36:	3301      	adds	r3, #1
 8006f38:	673b      	str	r3, [r7, #112]	; 0x70
 8006f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	029b      	lsls	r3, r3, #10
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	e030      	b.n	8006faa <USB_EPStartXfer+0x270>
 8006f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	673b      	str	r3, [r7, #112]	; 0x70
 8006f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <USB_EPStartXfer+0x224>
 8006f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	673b      	str	r3, [r7, #112]	; 0x70
 8006f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	029b      	lsls	r3, r3, #10
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	e019      	b.n	8006faa <USB_EPStartXfer+0x270>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d115      	bne.n	8006faa <USB_EPStartXfer+0x270>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	637b      	str	r3, [r7, #52]	; 0x34
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8e:	4413      	add	r3, r2
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	00da      	lsls	r2, r3, #3
 8006f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	891b      	ldrh	r3, [r3, #8]
 8006fae:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6959      	ldr	r1, [r3, #20]
 8006fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fb27 	bl	8007612 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	785b      	ldrb	r3, [r3, #1]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d11c      	bne.n	8007006 <USB_EPStartXfer+0x2cc>
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe2:	82bb      	strh	r3, [r7, #20]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	8abb      	ldrh	r3, [r7, #20]
 8006ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007000:	b29b      	uxth	r3, r3
 8007002:	8013      	strh	r3, [r2, #0]
 8007004:	e01f      	b.n	8007046 <USB_EPStartXfer+0x30c>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d11b      	bne.n	8007046 <USB_EPStartXfer+0x30c>
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007024:	82fb      	strh	r3, [r7, #22]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	441a      	add	r2, r3
 8007030:	8afb      	ldrh	r3, [r7, #22]
 8007032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800703e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007042:	b29b      	uxth	r3, r3
 8007044:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705c:	817b      	strh	r3, [r7, #10]
 800705e:	897b      	ldrh	r3, [r7, #10]
 8007060:	f083 0310 	eor.w	r3, r3, #16
 8007064:	817b      	strh	r3, [r7, #10]
 8007066:	897b      	ldrh	r3, [r7, #10]
 8007068:	f083 0320 	eor.w	r3, r3, #32
 800706c:	817b      	strh	r3, [r7, #10]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	441a      	add	r2, r3
 8007078:	897b      	ldrh	r3, [r7, #10]
 800707a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800707e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708a:	b29b      	uxth	r3, r3
 800708c:	8013      	strh	r3, [r2, #0]
 800708e:	e175      	b.n	800737c <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	699a      	ldr	r2, [r3, #24]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	429a      	cmp	r2, r3
 800709a:	d909      	bls.n	80070b0 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	619a      	str	r2, [r3, #24]
 80070ae:	e005      	b.n	80070bc <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2200      	movs	r2, #0
 80070ba:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	7b1b      	ldrb	r3, [r3, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d153      	bne.n	800716c <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	643b      	str	r3, [r7, #64]	; 0x40
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d4:	4413      	add	r3, r2
 80070d6:	643b      	str	r3, [r7, #64]	; 0x40
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	00da      	lsls	r2, r3, #3
 80070de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e0:	4413      	add	r3, r2
 80070e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d112      	bne.n	8007114 <USB_EPStartXfer+0x3da>
 80070ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fc:	801a      	strh	r2, [r3, #0]
 80070fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29b      	uxth	r3, r3
 8007104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800710c:	b29a      	uxth	r2, r3
 800710e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007110:	801a      	strh	r2, [r3, #0]
 8007112:	e10f      	b.n	8007334 <USB_EPStartXfer+0x5fa>
 8007114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007116:	2b3e      	cmp	r3, #62	; 0x3e
 8007118:	d811      	bhi.n	800713e <USB_EPStartXfer+0x404>
 800711a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711c:	085b      	lsrs	r3, r3, #1
 800711e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <USB_EPStartXfer+0x3f6>
 800712a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712c:	3301      	adds	r3, #1
 800712e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007132:	b29b      	uxth	r3, r3
 8007134:	029b      	lsls	r3, r3, #10
 8007136:	b29a      	uxth	r2, r3
 8007138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713a:	801a      	strh	r2, [r3, #0]
 800713c:	e0fa      	b.n	8007334 <USB_EPStartXfer+0x5fa>
 800713e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007146:	f003 031f 	and.w	r3, r3, #31
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <USB_EPStartXfer+0x41a>
 800714e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007150:	3b01      	subs	r3, #1
 8007152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007156:	b29b      	uxth	r3, r3
 8007158:	029b      	lsls	r3, r3, #10
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007164:	b29a      	uxth	r2, r3
 8007166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	e0e3      	b.n	8007334 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d153      	bne.n	800721c <USB_EPStartXfer+0x4e2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	65bb      	str	r3, [r7, #88]	; 0x58
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800717e:	b29b      	uxth	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007184:	4413      	add	r3, r2
 8007186:	65bb      	str	r3, [r7, #88]	; 0x58
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	00da      	lsls	r2, r3, #3
 800718e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007190:	4413      	add	r3, r2
 8007192:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007196:	657b      	str	r3, [r7, #84]	; 0x54
 8007198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800719a:	2b00      	cmp	r3, #0
 800719c:	d112      	bne.n	80071c4 <USB_EPStartXfer+0x48a>
 800719e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ac:	801a      	strh	r2, [r3, #0]
 80071ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071bc:	b29a      	uxth	r2, r3
 80071be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	e045      	b.n	8007250 <USB_EPStartXfer+0x516>
 80071c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071c6:	2b3e      	cmp	r3, #62	; 0x3e
 80071c8:	d811      	bhi.n	80071ee <USB_EPStartXfer+0x4b4>
 80071ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071cc:	085b      	lsrs	r3, r3, #1
 80071ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80071d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <USB_EPStartXfer+0x4a6>
 80071da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071dc:	3301      	adds	r3, #1
 80071de:	66bb      	str	r3, [r7, #104]	; 0x68
 80071e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	029b      	lsls	r3, r3, #10
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e030      	b.n	8007250 <USB_EPStartXfer+0x516>
 80071ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d102      	bne.n	8007204 <USB_EPStartXfer+0x4ca>
 80071fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007200:	3b01      	subs	r3, #1
 8007202:	66bb      	str	r3, [r7, #104]	; 0x68
 8007204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007206:	b29b      	uxth	r3, r3
 8007208:	029b      	lsls	r3, r3, #10
 800720a:	b29b      	uxth	r3, r3
 800720c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007214:	b29a      	uxth	r2, r3
 8007216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	e019      	b.n	8007250 <USB_EPStartXfer+0x516>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d115      	bne.n	8007250 <USB_EPStartXfer+0x516>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	663b      	str	r3, [r7, #96]	; 0x60
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722e:	b29b      	uxth	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007234:	4413      	add	r3, r2
 8007236:	663b      	str	r3, [r7, #96]	; 0x60
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	00da      	lsls	r2, r3, #3
 800723e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007240:	4413      	add	r3, r2
 8007242:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724a:	b29a      	uxth	r2, r3
 800724c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	653b      	str	r3, [r7, #80]	; 0x50
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d153      	bne.n	8007304 <USB_EPStartXfer+0x5ca>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007266:	b29b      	uxth	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800726c:	4413      	add	r3, r2
 800726e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	00da      	lsls	r2, r3, #3
 8007276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007278:	4413      	add	r3, r2
 800727a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800727e:	647b      	str	r3, [r7, #68]	; 0x44
 8007280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007282:	2b00      	cmp	r3, #0
 8007284:	d112      	bne.n	80072ac <USB_EPStartXfer+0x572>
 8007286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007290:	b29a      	uxth	r2, r3
 8007292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007294:	801a      	strh	r2, [r3, #0]
 8007296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072a8:	801a      	strh	r2, [r3, #0]
 80072aa:	e043      	b.n	8007334 <USB_EPStartXfer+0x5fa>
 80072ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ae:	2b3e      	cmp	r3, #62	; 0x3e
 80072b0:	d811      	bhi.n	80072d6 <USB_EPStartXfer+0x59c>
 80072b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	667b      	str	r3, [r7, #100]	; 0x64
 80072b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <USB_EPStartXfer+0x58e>
 80072c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c4:	3301      	adds	r3, #1
 80072c6:	667b      	str	r3, [r7, #100]	; 0x64
 80072c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	029b      	lsls	r3, r3, #10
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	e02e      	b.n	8007334 <USB_EPStartXfer+0x5fa>
 80072d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	667b      	str	r3, [r7, #100]	; 0x64
 80072dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <USB_EPStartXfer+0x5b2>
 80072e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e8:	3b01      	subs	r3, #1
 80072ea:	667b      	str	r3, [r7, #100]	; 0x64
 80072ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	029b      	lsls	r3, r3, #10
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007300:	801a      	strh	r2, [r3, #0]
 8007302:	e017      	b.n	8007334 <USB_EPStartXfer+0x5fa>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d113      	bne.n	8007334 <USB_EPStartXfer+0x5fa>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007312:	b29b      	uxth	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007318:	4413      	add	r3, r2
 800731a:	653b      	str	r3, [r7, #80]	; 0x50
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	00da      	lsls	r2, r3, #3
 8007322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007324:	4413      	add	r3, r2
 8007326:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800732a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800732c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800732e:	b29a      	uxth	r2, r3
 8007330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007332:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29b      	uxth	r3, r3
 8007342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800734c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800734e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007352:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007354:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007356:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800735a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	441a      	add	r2, r3
 8007366:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800736c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007378:	b29b      	uxth	r3, r3
 800737a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3780      	adds	r7, #128	; 0x80
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d020      	beq.n	80073da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ae:	81bb      	strh	r3, [r7, #12]
 80073b0:	89bb      	ldrh	r3, [r7, #12]
 80073b2:	f083 0310 	eor.w	r3, r3, #16
 80073b6:	81bb      	strh	r3, [r7, #12]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	441a      	add	r2, r3
 80073c2:	89bb      	ldrh	r3, [r7, #12]
 80073c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	8013      	strh	r3, [r2, #0]
 80073d8:	e01f      	b.n	800741a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f0:	81fb      	strh	r3, [r7, #14]
 80073f2:	89fb      	ldrh	r3, [r7, #14]
 80073f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073f8:	81fb      	strh	r3, [r7, #14]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	441a      	add	r2, r3
 8007404:	89fb      	ldrh	r3, [r7, #14]
 8007406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007416:	b29b      	uxth	r3, r3
 8007418:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	7b1b      	ldrb	r3, [r3, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f040 809d 	bne.w	8007576 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	785b      	ldrb	r3, [r3, #1]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d04c      	beq.n	80074de <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	823b      	strh	r3, [r7, #16]
 8007452:	8a3b      	ldrh	r3, [r7, #16]
 8007454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01b      	beq.n	8007494 <USB_EPClearStall+0x6c>
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007472:	81fb      	strh	r3, [r7, #14]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	441a      	add	r2, r3
 800747e:	89fb      	ldrh	r3, [r7, #14]
 8007480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800748c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007490:	b29b      	uxth	r3, r3
 8007492:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	78db      	ldrb	r3, [r3, #3]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d06c      	beq.n	8007576 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b2:	81bb      	strh	r3, [r7, #12]
 80074b4:	89bb      	ldrh	r3, [r7, #12]
 80074b6:	f083 0320 	eor.w	r3, r3, #32
 80074ba:	81bb      	strh	r3, [r7, #12]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	89bb      	ldrh	r3, [r7, #12]
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]
 80074dc:	e04b      	b.n	8007576 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	82fb      	strh	r3, [r7, #22]
 80074ec:	8afb      	ldrh	r3, [r7, #22]
 80074ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01b      	beq.n	800752e <USB_EPClearStall+0x106>
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750c:	82bb      	strh	r3, [r7, #20]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	441a      	add	r2, r3
 8007518:	8abb      	ldrh	r3, [r7, #20]
 800751a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800752a:	b29b      	uxth	r3, r3
 800752c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29b      	uxth	r3, r3
 800753c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007544:	827b      	strh	r3, [r7, #18]
 8007546:	8a7b      	ldrh	r3, [r7, #18]
 8007548:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800754c:	827b      	strh	r3, [r7, #18]
 800754e:	8a7b      	ldrh	r3, [r7, #18]
 8007550:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007554:	827b      	strh	r3, [r7, #18]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	441a      	add	r2, r3
 8007560:	8a7b      	ldrh	r3, [r7, #18]
 8007562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800756a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007572:	b29b      	uxth	r3, r3
 8007574:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2280      	movs	r2, #128	; 0x80
 800759a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80075ec:	68fb      	ldr	r3, [r7, #12]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007612:	b480      	push	{r7}
 8007614:	b08d      	sub	sp, #52	; 0x34
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	4611      	mov	r1, r2
 800761e:	461a      	mov	r2, r3
 8007620:	460b      	mov	r3, r1
 8007622:	80fb      	strh	r3, [r7, #6]
 8007624:	4613      	mov	r3, r2
 8007626:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007628:	88bb      	ldrh	r3, [r7, #4]
 800762a:	3301      	adds	r3, #1
 800762c:	085b      	lsrs	r3, r3, #1
 800762e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007638:	88fa      	ldrh	r2, [r7, #6]
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007648:	e01b      	b.n	8007682 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	3301      	adds	r3, #1
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	b29a      	uxth	r2, r3
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	3302      	adds	r3, #2
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	3301      	adds	r3, #1
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	3b01      	subs	r3, #1
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e0      	bne.n	800764a <USB_WritePMA+0x38>
  }
}
 8007688:	bf00      	nop
 800768a:	3734      	adds	r7, #52	; 0x34
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007694:	b480      	push	{r7}
 8007696:	b08b      	sub	sp, #44	; 0x2c
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4611      	mov	r1, r2
 80076a0:	461a      	mov	r2, r3
 80076a2:	460b      	mov	r3, r1
 80076a4:	80fb      	strh	r3, [r7, #6]
 80076a6:	4613      	mov	r3, r2
 80076a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80076aa:	88bb      	ldrh	r3, [r7, #4]
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076ba:	88fa      	ldrh	r2, [r7, #6]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076c4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ca:	e018      	b.n	80076fe <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	3302      	adds	r3, #2
 80076d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	3301      	adds	r3, #1
 80076e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	3301      	adds	r3, #1
 80076f6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	3b01      	subs	r3, #1
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e3      	bne.n	80076cc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007704:	88bb      	ldrh	r3, [r7, #4]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	b2da      	uxtb	r2, r3
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	701a      	strb	r2, [r3, #0]
  }
}
 8007720:	bf00      	nop
 8007722:	372c      	adds	r7, #44	; 0x2c
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007738:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800773c:	f008 ffce 	bl	80106dc <USBD_static_malloc>
 8007740:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007750:	2302      	movs	r3, #2
 8007752:	e066      	b.n	8007822 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7c1b      	ldrb	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d119      	bne.n	8007798 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007768:	2202      	movs	r2, #2
 800776a:	2181      	movs	r1, #129	; 0x81
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f008 fe62 	bl	8010436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800777c:	2202      	movs	r2, #2
 800777e:	2101      	movs	r1, #1
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f008 fe58 	bl	8010436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2210      	movs	r2, #16
 8007792:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007796:	e016      	b.n	80077c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007798:	2340      	movs	r3, #64	; 0x40
 800779a:	2202      	movs	r2, #2
 800779c:	2181      	movs	r1, #129	; 0x81
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f008 fe49 	bl	8010436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077aa:	2340      	movs	r3, #64	; 0x40
 80077ac:	2202      	movs	r2, #2
 80077ae:	2101      	movs	r1, #1
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f008 fe40 	bl	8010436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2210      	movs	r2, #16
 80077c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80077c6:	2308      	movs	r3, #8
 80077c8:	2203      	movs	r2, #3
 80077ca:	2182      	movs	r1, #130	; 0x82
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f008 fe32 	bl	8010436 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	7c1b      	ldrb	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007806:	2101      	movs	r1, #1
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f008 fefd 	bl	8010608 <USBD_LL_PrepareReceive>
 800780e:	e007      	b.n	8007820 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007816:	2340      	movs	r3, #64	; 0x40
 8007818:	2101      	movs	r1, #1
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f008 fef4 	bl	8010608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	460b      	mov	r3, r1
 8007834:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007836:	2181      	movs	r1, #129	; 0x81
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f008 fe22 	bl	8010482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007844:	2101      	movs	r1, #1
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f008 fe1b 	bl	8010482 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007854:	2182      	movs	r1, #130	; 0x82
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f008 fe13 	bl	8010482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00e      	beq.n	8007894 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007886:	4618      	mov	r0, r3
 8007888:	f008 ff36 	bl	80106f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e0af      	b.n	8007a28 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d03f      	beq.n	8007954 <USBD_CDC_Setup+0xb4>
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	f040 809f 	bne.w	8007a18 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	88db      	ldrh	r3, [r3, #6]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d02e      	beq.n	8007940 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b25b      	sxtb	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da16      	bge.n	800791a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80078f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	88d2      	ldrh	r2, [r2, #6]
 80078fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	88db      	ldrh	r3, [r3, #6]
 8007904:	2b07      	cmp	r3, #7
 8007906:	bf28      	it	cs
 8007908:	2307      	movcs	r3, #7
 800790a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	89fa      	ldrh	r2, [r7, #14]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 fabe 	bl	8008e94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007918:	e085      	b.n	8007a26 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	785a      	ldrb	r2, [r3, #1]
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	88db      	ldrh	r3, [r3, #6]
 8007928:	b2da      	uxtb	r2, r3
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007930:	6939      	ldr	r1, [r7, #16]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	88db      	ldrh	r3, [r3, #6]
 8007936:	461a      	mov	r2, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 fad7 	bl	8008eec <USBD_CtlPrepareRx>
      break;
 800793e:	e072      	b.n	8007a26 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	7850      	ldrb	r0, [r2, #1]
 800794c:	2200      	movs	r2, #0
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	4798      	blx	r3
      break;
 8007952:	e068      	b.n	8007a26 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	785b      	ldrb	r3, [r3, #1]
 8007958:	2b0b      	cmp	r3, #11
 800795a:	d852      	bhi.n	8007a02 <USBD_CDC_Setup+0x162>
 800795c:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <USBD_CDC_Setup+0xc4>)
 800795e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007962:	bf00      	nop
 8007964:	08007995 	.word	0x08007995
 8007968:	08007a11 	.word	0x08007a11
 800796c:	08007a03 	.word	0x08007a03
 8007970:	08007a03 	.word	0x08007a03
 8007974:	08007a03 	.word	0x08007a03
 8007978:	08007a03 	.word	0x08007a03
 800797c:	08007a03 	.word	0x08007a03
 8007980:	08007a03 	.word	0x08007a03
 8007984:	08007a03 	.word	0x08007a03
 8007988:	08007a03 	.word	0x08007a03
 800798c:	080079bf 	.word	0x080079bf
 8007990:	080079e9 	.word	0x080079e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b03      	cmp	r3, #3
 800799e:	d107      	bne.n	80079b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079a0:	f107 030a 	add.w	r3, r7, #10
 80079a4:	2202      	movs	r2, #2
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fa73 	bl	8008e94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079ae:	e032      	b.n	8007a16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 f9fd 	bl	8008db2 <USBD_CtlError>
            ret = USBD_FAIL;
 80079b8:	2303      	movs	r3, #3
 80079ba:	75fb      	strb	r3, [r7, #23]
          break;
 80079bc:	e02b      	b.n	8007a16 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d107      	bne.n	80079da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80079ca:	f107 030d 	add.w	r3, r7, #13
 80079ce:	2201      	movs	r2, #1
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fa5e 	bl	8008e94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079d8:	e01d      	b.n	8007a16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 f9e8 	bl	8008db2 <USBD_CtlError>
            ret = USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	75fb      	strb	r3, [r7, #23]
          break;
 80079e6:	e016      	b.n	8007a16 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d00f      	beq.n	8007a14 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f9db 	bl	8008db2 <USBD_CtlError>
            ret = USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a00:	e008      	b.n	8007a14 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f9d4 	bl	8008db2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a0e:	e002      	b.n	8007a16 <USBD_CDC_Setup+0x176>
          break;
 8007a10:	bf00      	nop
 8007a12:	e008      	b.n	8007a26 <USBD_CDC_Setup+0x186>
          break;
 8007a14:	bf00      	nop
      }
      break;
 8007a16:	e006      	b.n	8007a26 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f001 f9c9 	bl	8008db2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	75fb      	strb	r3, [r7, #23]
      break;
 8007a24:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e04c      	b.n	8007aec <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	3318      	adds	r3, #24
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d026      	beq.n	8007abe <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007a70:	78fa      	ldrb	r2, [r7, #3]
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3318      	adds	r3, #24
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	78fa      	ldrb	r2, [r7, #3]
 8007a84:	68f9      	ldr	r1, [r7, #12]
 8007a86:	0152      	lsls	r2, r2, #5
 8007a88:	440a      	add	r2, r1
 8007a8a:	3238      	adds	r2, #56	; 0x38
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a92:	fb02 f201 	mul.w	r2, r2, r1
 8007a96:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d110      	bne.n	8007abe <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007a9c:	78fa      	ldrb	r2, [r7, #3]
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	3318      	adds	r3, #24
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ab0:	78f9      	ldrb	r1, [r7, #3]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f008 fd85 	bl	80105c6 <USBD_LL_Transmit>
 8007abc:	e015      	b.n	8007aea <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00b      	beq.n	8007aea <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e015      	b.n	8007b42 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f008 fd95 	bl	801064a <USBD_LL_GetRxDataSize>
 8007b20:	4602      	mov	r2, r0
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e01b      	b.n	8007b9c <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d015      	beq.n	8007b9a <USBD_CDC_EP0_RxReady+0x50>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b74:	2bff      	cmp	r3, #255	; 0xff
 8007b76:	d010      	beq.n	8007b9a <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007b86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b8e:	b292      	uxth	r2, r2
 8007b90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2243      	movs	r2, #67	; 0x43
 8007bb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007bb2:	4b03      	ldr	r3, [pc, #12]	; (8007bc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	200000bc 	.word	0x200000bc

08007bc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2243      	movs	r2, #67	; 0x43
 8007bd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007bd2:	4b03      	ldr	r3, [pc, #12]	; (8007be0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	20000078 	.word	0x20000078

08007be4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2243      	movs	r2, #67	; 0x43
 8007bf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007bf2:	4b03      	ldr	r3, [pc, #12]	; (8007c00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	20000100 	.word	0x20000100

08007c04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	220a      	movs	r2, #10
 8007c10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c12:	4b03      	ldr	r3, [pc, #12]	; (8007c20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20000034 	.word	0x20000034

08007c24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e004      	b.n	8007c42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b087      	sub	sp, #28
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e008      	b.n	8007c7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e004      	b.n	8007cb0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e01a      	b.n	8007d14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d114      	bne.n	8007d12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d06:	2181      	movs	r1, #129	; 0x81
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f008 fc5c 	bl	80105c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e016      	b.n	8007d68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7c1b      	ldrb	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f008 fc5a 	bl	8010608 <USBD_LL_PrepareReceive>
 8007d54:	e007      	b.n	8007d66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d5c:	2340      	movs	r3, #64	; 0x40
 8007d5e:	2101      	movs	r1, #1
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f008 fc51 	bl	8010608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e01f      	b.n	8007dc8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	79fa      	ldrb	r2, [r7, #7]
 8007dba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f008 fabd 	bl	801033c <USBD_LL_Init>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e016      	b.n	8007e16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	f107 020e 	add.w	r2, r7, #14
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f008 faea 	bl	8010400 <USBD_LL_Start>
 8007e2c:	4603      	mov	r3, r0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d009      	beq.n	8007e7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	4611      	mov	r1, r2
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d007      	beq.n	8007eaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
  }

  return USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 ff39 	bl	8008d3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007eda:	461a      	mov	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d00e      	beq.n	8007f0e <USBD_LL_SetupStage+0x5a>
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d302      	bcc.n	8007efa <USBD_LL_SetupStage+0x46>
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d014      	beq.n	8007f22 <USBD_LL_SetupStage+0x6e>
 8007ef8:	e01d      	b.n	8007f36 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f9ee 	bl	80082e4 <USBD_StdDevReq>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f0c:	e020      	b.n	8007f50 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa52 	bl	80083c0 <USBD_StdItfReq>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f20:	e016      	b.n	8007f50 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa8f 	bl	800844e <USBD_StdEPReq>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]
      break;
 8007f34:	e00c      	b.n	8007f50 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f008 fabb 	bl	80104c0 <USBD_LL_StallEP>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4e:	bf00      	nop
  }

  return ret;
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b086      	sub	sp, #24
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	460b      	mov	r3, r1
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f68:	7afb      	ldrb	r3, [r7, #11]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d138      	bne.n	8007fe0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d14a      	bne.n	8008016 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d913      	bls.n	8007fb4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	1ad2      	subs	r2, r2, r3
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	bf28      	it	cs
 8007fa6:	4613      	movcs	r3, r2
 8007fa8:	461a      	mov	r2, r3
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 ffba 	bl	8008f26 <USBD_CtlContinueRx>
 8007fb2:	e030      	b.n	8008016 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d10b      	bne.n	8007fd8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 ffb5 	bl	8008f48 <USBD_CtlSendStatus>
 8007fde:	e01a      	b.n	8008016 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d114      	bne.n	8008016 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00e      	beq.n	8008016 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	7afa      	ldrb	r2, [r7, #11]
 8008002:	4611      	mov	r1, r2
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	4798      	blx	r3
 8008008:	4603      	mov	r3, r0
 800800a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	e000      	b.n	8008018 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	460b      	mov	r3, r1
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d16b      	bne.n	800810c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3314      	adds	r3, #20
 8008038:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008040:	2b02      	cmp	r3, #2
 8008042:	d156      	bne.n	80080f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	429a      	cmp	r2, r3
 800804e:	d914      	bls.n	800807a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	1ad2      	subs	r2, r2, r3
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	461a      	mov	r2, r3
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 ff2f 	bl	8008eca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800806c:	2300      	movs	r3, #0
 800806e:	2200      	movs	r2, #0
 8008070:	2100      	movs	r1, #0
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f008 fac8 	bl	8010608 <USBD_LL_PrepareReceive>
 8008078:	e03b      	b.n	80080f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	429a      	cmp	r2, r3
 8008084:	d11c      	bne.n	80080c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800808e:	429a      	cmp	r2, r3
 8008090:	d316      	bcc.n	80080c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800809c:	429a      	cmp	r2, r3
 800809e:	d20f      	bcs.n	80080c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080a0:	2200      	movs	r2, #0
 80080a2:	2100      	movs	r1, #0
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 ff10 	bl	8008eca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080b2:	2300      	movs	r3, #0
 80080b4:	2200      	movs	r2, #0
 80080b6:	2100      	movs	r1, #0
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f008 faa5 	bl	8010608 <USBD_LL_PrepareReceive>
 80080be:	e018      	b.n	80080f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d10b      	bne.n	80080e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080e4:	2180      	movs	r1, #128	; 0x80
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f008 f9ea 	bl	80104c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 ff3e 	bl	8008f6e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d122      	bne.n	8008142 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7ff fe9a 	bl	8007e36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800810a:	e01a      	b.n	8008142 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b03      	cmp	r3, #3
 8008116:	d114      	bne.n	8008142 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00e      	beq.n	8008142 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	7afa      	ldrb	r2, [r7, #11]
 800812e:	4611      	mov	r1, r2
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	4798      	blx	r3
 8008134:	4603      	mov	r3, r0
 8008136:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	e000      	b.n	8008144 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800817c:	2303      	movs	r3, #3
 800817e:	e02f      	b.n	80081e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00f      	beq.n	80081aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d009      	beq.n	80081aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6852      	ldr	r2, [r2, #4]
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	4611      	mov	r1, r2
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081aa:	2340      	movs	r3, #64	; 0x40
 80081ac:	2200      	movs	r2, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f008 f940 	bl	8010436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2240      	movs	r2, #64	; 0x40
 80081c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081c6:	2340      	movs	r3, #64	; 0x40
 80081c8:	2200      	movs	r2, #0
 80081ca:	2180      	movs	r1, #128	; 0x80
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f008 f932 	bl	8010436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2240      	movs	r2, #64	; 0x40
 80081dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008216:	b2da      	uxtb	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2204      	movs	r2, #4
 8008222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b04      	cmp	r3, #4
 8008246:	d106      	bne.n	8008256 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800824e:	b2da      	uxtb	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	e012      	b.n	80082a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b03      	cmp	r3, #3
 8008284:	d10b      	bne.n	800829e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	3301      	adds	r3, #1
 80082be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082c6:	8a3b      	ldrh	r3, [r7, #16]
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	b21a      	sxth	r2, r3
 80082cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	b21b      	sxth	r3, r3
 80082d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082d6:	89fb      	ldrh	r3, [r7, #14]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d004      	beq.n	8008308 <USBD_StdDevReq+0x24>
 80082fe:	2b40      	cmp	r3, #64	; 0x40
 8008300:	d002      	beq.n	8008308 <USBD_StdDevReq+0x24>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <USBD_StdDevReq+0x38>
 8008306:	e050      	b.n	80083aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
 8008316:	4603      	mov	r3, r0
 8008318:	73fb      	strb	r3, [r7, #15]
      break;
 800831a:	e04b      	b.n	80083b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	2b09      	cmp	r3, #9
 8008322:	d83c      	bhi.n	800839e <USBD_StdDevReq+0xba>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USBD_StdDevReq+0x48>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008381 	.word	0x08008381
 8008330:	08008395 	.word	0x08008395
 8008334:	0800839f 	.word	0x0800839f
 8008338:	0800838b 	.word	0x0800838b
 800833c:	0800839f 	.word	0x0800839f
 8008340:	0800835f 	.word	0x0800835f
 8008344:	08008355 	.word	0x08008355
 8008348:	0800839f 	.word	0x0800839f
 800834c:	08008377 	.word	0x08008377
 8008350:	08008369 	.word	0x08008369
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f9d4 	bl	8008704 <USBD_GetDescriptor>
          break;
 800835c:	e024      	b.n	80083a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fb63 	bl	8008a2c <USBD_SetAddress>
          break;
 8008366:	e01f      	b.n	80083a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fba2 	bl	8008ab4 <USBD_SetConfig>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
          break;
 8008374:	e018      	b.n	80083a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fc41 	bl	8008c00 <USBD_GetConfig>
          break;
 800837e:	e013      	b.n	80083a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fc71 	bl	8008c6a <USBD_GetStatus>
          break;
 8008388:	e00e      	b.n	80083a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fca0 	bl	8008cd2 <USBD_SetFeature>
          break;
 8008392:	e009      	b.n	80083a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fcaf 	bl	8008cfa <USBD_ClrFeature>
          break;
 800839c:	e004      	b.n	80083a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fd06 	bl	8008db2 <USBD_CtlError>
          break;
 80083a6:	bf00      	nop
      }
      break;
 80083a8:	e004      	b.n	80083b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fd00 	bl	8008db2 <USBD_CtlError>
      break;
 80083b2:	bf00      	nop
  }

  return ret;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop

080083c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083d6:	2b20      	cmp	r3, #32
 80083d8:	d003      	beq.n	80083e2 <USBD_StdItfReq+0x22>
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	d001      	beq.n	80083e2 <USBD_StdItfReq+0x22>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d12b      	bne.n	800843a <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d81d      	bhi.n	800842c <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	889b      	ldrh	r3, [r3, #4]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d813      	bhi.n	8008422 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	88db      	ldrh	r3, [r3, #6]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d110      	bne.n	8008436 <USBD_StdItfReq+0x76>
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10d      	bne.n	8008436 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fd94 	bl	8008f48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008420:	e009      	b.n	8008436 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fcc4 	bl	8008db2 <USBD_CtlError>
          break;
 800842a:	e004      	b.n	8008436 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fcbf 	bl	8008db2 <USBD_CtlError>
          break;
 8008434:	e000      	b.n	8008438 <USBD_StdItfReq+0x78>
          break;
 8008436:	bf00      	nop
      }
      break;
 8008438:	e004      	b.n	8008444 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fcb8 	bl	8008db2 <USBD_CtlError>
      break;
 8008442:	bf00      	nop
  }

  return ret;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	889b      	ldrh	r3, [r3, #4]
 8008460:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800846a:	2b20      	cmp	r3, #32
 800846c:	d004      	beq.n	8008478 <USBD_StdEPReq+0x2a>
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d002      	beq.n	8008478 <USBD_StdEPReq+0x2a>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <USBD_StdEPReq+0x3e>
 8008476:	e13a      	b.n	80086ee <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]
      break;
 800848a:	e135      	b.n	80086f8 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	785b      	ldrb	r3, [r3, #1]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d03f      	beq.n	8008514 <USBD_StdEPReq+0xc6>
 8008494:	2b03      	cmp	r3, #3
 8008496:	d002      	beq.n	800849e <USBD_StdEPReq+0x50>
 8008498:	2b00      	cmp	r3, #0
 800849a:	d07b      	beq.n	8008594 <USBD_StdEPReq+0x146>
 800849c:	e121      	b.n	80086e2 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d002      	beq.n	80084b0 <USBD_StdEPReq+0x62>
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d015      	beq.n	80084da <USBD_StdEPReq+0x8c>
 80084ae:	e02b      	b.n	8008508 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00c      	beq.n	80084d0 <USBD_StdEPReq+0x82>
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b80      	cmp	r3, #128	; 0x80
 80084ba:	d009      	beq.n	80084d0 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f007 fffd 	bl	80104c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084c6:	2180      	movs	r1, #128	; 0x80
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f007 fff9 	bl	80104c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084ce:	e020      	b.n	8008512 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fc6d 	bl	8008db2 <USBD_CtlError>
              break;
 80084d8:	e01b      	b.n	8008512 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	885b      	ldrh	r3, [r3, #2]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10e      	bne.n	8008500 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00b      	beq.n	8008500 <USBD_StdEPReq+0xb2>
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b80      	cmp	r3, #128	; 0x80
 80084ec:	d008      	beq.n	8008500 <USBD_StdEPReq+0xb2>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	88db      	ldrh	r3, [r3, #6]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f007 ffe0 	bl	80104c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fd21 	bl	8008f48 <USBD_CtlSendStatus>

              break;
 8008506:	e004      	b.n	8008512 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fc51 	bl	8008db2 <USBD_CtlError>
              break;
 8008510:	bf00      	nop
          }
          break;
 8008512:	e0eb      	b.n	80086ec <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d002      	beq.n	8008526 <USBD_StdEPReq+0xd8>
 8008520:	2b03      	cmp	r3, #3
 8008522:	d015      	beq.n	8008550 <USBD_StdEPReq+0x102>
 8008524:	e02f      	b.n	8008586 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00c      	beq.n	8008546 <USBD_StdEPReq+0xf8>
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b80      	cmp	r3, #128	; 0x80
 8008530:	d009      	beq.n	8008546 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f007 ffc2 	bl	80104c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800853c:	2180      	movs	r1, #128	; 0x80
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f007 ffbe 	bl	80104c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008544:	e025      	b.n	8008592 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fc32 	bl	8008db2 <USBD_CtlError>
              break;
 800854e:	e020      	b.n	8008592 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	885b      	ldrh	r3, [r3, #2]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11b      	bne.n	8008590 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800855e:	2b00      	cmp	r3, #0
 8008560:	d004      	beq.n	800856c <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f007 ffc9 	bl	80104fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fceb 	bl	8008f48 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008584:	e004      	b.n	8008590 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fc12 	bl	8008db2 <USBD_CtlError>
              break;
 800858e:	e000      	b.n	8008592 <USBD_StdEPReq+0x144>
              break;
 8008590:	bf00      	nop
          }
          break;
 8008592:	e0ab      	b.n	80086ec <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d002      	beq.n	80085a6 <USBD_StdEPReq+0x158>
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d032      	beq.n	800860a <USBD_StdEPReq+0x1bc>
 80085a4:	e097      	b.n	80086d6 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d007      	beq.n	80085bc <USBD_StdEPReq+0x16e>
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	2b80      	cmp	r3, #128	; 0x80
 80085b0:	d004      	beq.n	80085bc <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fbfc 	bl	8008db2 <USBD_CtlError>
                break;
 80085ba:	e091      	b.n	80086e0 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	da0b      	bge.n	80085dc <USBD_StdEPReq+0x18e>
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	3310      	adds	r3, #16
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	4413      	add	r3, r2
 80085d8:	3304      	adds	r3, #4
 80085da:	e00b      	b.n	80085f4 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	4413      	add	r3, r2
 80085f2:	3304      	adds	r3, #4
 80085f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2202      	movs	r2, #2
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fc46 	bl	8008e94 <USBD_CtlSendData>
              break;
 8008608:	e06a      	b.n	80086e0 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800860a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	da11      	bge.n	8008636 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	f003 020f 	and.w	r2, r3, #15
 8008618:	6879      	ldr	r1, [r7, #4]
 800861a:	4613      	mov	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	440b      	add	r3, r1
 8008624:	3324      	adds	r3, #36	; 0x24
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d117      	bne.n	800865c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fbbf 	bl	8008db2 <USBD_CtlError>
                  break;
 8008634:	e054      	b.n	80086e0 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	f003 020f 	and.w	r2, r3, #15
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	440b      	add	r3, r1
 8008648:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d104      	bne.n	800865c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fbac 	bl	8008db2 <USBD_CtlError>
                  break;
 800865a:	e041      	b.n	80086e0 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800865c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008660:	2b00      	cmp	r3, #0
 8008662:	da0b      	bge.n	800867c <USBD_StdEPReq+0x22e>
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	3310      	adds	r3, #16
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	4413      	add	r3, r2
 8008678:	3304      	adds	r3, #4
 800867a:	e00b      	b.n	8008694 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	4413      	add	r3, r2
 8008692:	3304      	adds	r3, #4
 8008694:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <USBD_StdEPReq+0x254>
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	2b80      	cmp	r3, #128	; 0x80
 80086a0:	d103      	bne.n	80086aa <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	e00e      	b.n	80086c8 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f007 ff44 	bl	801053c <USBD_LL_IsStallEP>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2201      	movs	r2, #1
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e002      	b.n	80086c8 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2202      	movs	r2, #2
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fbe0 	bl	8008e94 <USBD_CtlSendData>
              break;
 80086d4:	e004      	b.n	80086e0 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fb6a 	bl	8008db2 <USBD_CtlError>
              break;
 80086de:	bf00      	nop
          }
          break;
 80086e0:	e004      	b.n	80086ec <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fb64 	bl	8008db2 <USBD_CtlError>
          break;
 80086ea:	bf00      	nop
      }
      break;
 80086ec:	e004      	b.n	80086f8 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fb5e 	bl	8008db2 <USBD_CtlError>
      break;
 80086f6:	bf00      	nop
  }

  return ret;
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	885b      	ldrh	r3, [r3, #2]
 800871e:	0a1b      	lsrs	r3, r3, #8
 8008720:	b29b      	uxth	r3, r3
 8008722:	3b01      	subs	r3, #1
 8008724:	2b0e      	cmp	r3, #14
 8008726:	f200 8152 	bhi.w	80089ce <USBD_GetDescriptor+0x2ca>
 800872a:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <USBD_GetDescriptor+0x2c>)
 800872c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008730:	080087a1 	.word	0x080087a1
 8008734:	080087b9 	.word	0x080087b9
 8008738:	080087f9 	.word	0x080087f9
 800873c:	080089cf 	.word	0x080089cf
 8008740:	080089cf 	.word	0x080089cf
 8008744:	0800896f 	.word	0x0800896f
 8008748:	0800899b 	.word	0x0800899b
 800874c:	080089cf 	.word	0x080089cf
 8008750:	080089cf 	.word	0x080089cf
 8008754:	080089cf 	.word	0x080089cf
 8008758:	080089cf 	.word	0x080089cf
 800875c:	080089cf 	.word	0x080089cf
 8008760:	080089cf 	.word	0x080089cf
 8008764:	080089cf 	.word	0x080089cf
 8008768:	0800876d 	.word	0x0800876d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00b      	beq.n	8008790 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	7c12      	ldrb	r2, [r2, #16]
 8008784:	f107 0108 	add.w	r1, r7, #8
 8008788:	4610      	mov	r0, r2
 800878a:	4798      	blx	r3
 800878c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800878e:	e126      	b.n	80089de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fb0d 	bl	8008db2 <USBD_CtlError>
        err++;
 8008798:	7afb      	ldrb	r3, [r7, #11]
 800879a:	3301      	adds	r3, #1
 800879c:	72fb      	strb	r3, [r7, #11]
      break;
 800879e:	e11e      	b.n	80089de <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	7c12      	ldrb	r2, [r2, #16]
 80087ac:	f107 0108 	add.w	r1, r7, #8
 80087b0:	4610      	mov	r0, r2
 80087b2:	4798      	blx	r3
 80087b4:	60f8      	str	r0, [r7, #12]
      break;
 80087b6:	e112      	b.n	80089de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7c1b      	ldrb	r3, [r3, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10d      	bne.n	80087dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c8:	f107 0208 	add.w	r2, r7, #8
 80087cc:	4610      	mov	r0, r2
 80087ce:	4798      	blx	r3
 80087d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3301      	adds	r3, #1
 80087d6:	2202      	movs	r2, #2
 80087d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087da:	e100      	b.n	80089de <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	f107 0208 	add.w	r2, r7, #8
 80087e8:	4610      	mov	r0, r2
 80087ea:	4798      	blx	r3
 80087ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3301      	adds	r3, #1
 80087f2:	2202      	movs	r2, #2
 80087f4:	701a      	strb	r2, [r3, #0]
      break;
 80087f6:	e0f2      	b.n	80089de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	885b      	ldrh	r3, [r3, #2]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b05      	cmp	r3, #5
 8008800:	f200 80ac 	bhi.w	800895c <USBD_GetDescriptor+0x258>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <USBD_GetDescriptor+0x108>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	08008825 	.word	0x08008825
 8008810:	08008859 	.word	0x08008859
 8008814:	0800888d 	.word	0x0800888d
 8008818:	080088c1 	.word	0x080088c1
 800881c:	080088f5 	.word	0x080088f5
 8008820:	08008929 	.word	0x08008929
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	7c12      	ldrb	r2, [r2, #16]
 800883c:	f107 0108 	add.w	r1, r7, #8
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
 8008844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008846:	e091      	b.n	800896c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fab1 	bl	8008db2 <USBD_CtlError>
            err++;
 8008850:	7afb      	ldrb	r3, [r7, #11]
 8008852:	3301      	adds	r3, #1
 8008854:	72fb      	strb	r3, [r7, #11]
          break;
 8008856:	e089      	b.n	800896c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00b      	beq.n	800887c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	7c12      	ldrb	r2, [r2, #16]
 8008870:	f107 0108 	add.w	r1, r7, #8
 8008874:	4610      	mov	r0, r2
 8008876:	4798      	blx	r3
 8008878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800887a:	e077      	b.n	800896c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fa97 	bl	8008db2 <USBD_CtlError>
            err++;
 8008884:	7afb      	ldrb	r3, [r7, #11]
 8008886:	3301      	adds	r3, #1
 8008888:	72fb      	strb	r3, [r7, #11]
          break;
 800888a:	e06f      	b.n	800896c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	7c12      	ldrb	r2, [r2, #16]
 80088a4:	f107 0108 	add.w	r1, r7, #8
 80088a8:	4610      	mov	r0, r2
 80088aa:	4798      	blx	r3
 80088ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ae:	e05d      	b.n	800896c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fa7d 	bl	8008db2 <USBD_CtlError>
            err++;
 80088b8:	7afb      	ldrb	r3, [r7, #11]
 80088ba:	3301      	adds	r3, #1
 80088bc:	72fb      	strb	r3, [r7, #11]
          break;
 80088be:	e055      	b.n	800896c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00b      	beq.n	80088e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088e2:	e043      	b.n	800896c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fa63 	bl	8008db2 <USBD_CtlError>
            err++;
 80088ec:	7afb      	ldrb	r3, [r7, #11]
 80088ee:	3301      	adds	r3, #1
 80088f0:	72fb      	strb	r3, [r7, #11]
          break;
 80088f2:	e03b      	b.n	800896c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	7c12      	ldrb	r2, [r2, #16]
 800890c:	f107 0108 	add.w	r1, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008916:	e029      	b.n	800896c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fa49 	bl	8008db2 <USBD_CtlError>
            err++;
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	3301      	adds	r3, #1
 8008924:	72fb      	strb	r3, [r7, #11]
          break;
 8008926:	e021      	b.n	800896c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	7c12      	ldrb	r2, [r2, #16]
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894a:	e00f      	b.n	800896c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fa2f 	bl	8008db2 <USBD_CtlError>
            err++;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	3301      	adds	r3, #1
 8008958:	72fb      	strb	r3, [r7, #11]
          break;
 800895a:	e007      	b.n	800896c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa27 	bl	8008db2 <USBD_CtlError>
          err++;
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	3301      	adds	r3, #1
 8008968:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800896a:	bf00      	nop
      }
      break;
 800896c:	e037      	b.n	80089de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7c1b      	ldrb	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897e:	f107 0208 	add.w	r2, r7, #8
 8008982:	4610      	mov	r0, r2
 8008984:	4798      	blx	r3
 8008986:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008988:	e029      	b.n	80089de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fa10 	bl	8008db2 <USBD_CtlError>
        err++;
 8008992:	7afb      	ldrb	r3, [r7, #11]
 8008994:	3301      	adds	r3, #1
 8008996:	72fb      	strb	r3, [r7, #11]
      break;
 8008998:	e021      	b.n	80089de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	7c1b      	ldrb	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10d      	bne.n	80089be <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089aa:	f107 0208 	add.w	r2, r7, #8
 80089ae:	4610      	mov	r0, r2
 80089b0:	4798      	blx	r3
 80089b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3301      	adds	r3, #1
 80089b8:	2207      	movs	r2, #7
 80089ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089bc:	e00f      	b.n	80089de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f9f6 	bl	8008db2 <USBD_CtlError>
        err++;
 80089c6:	7afb      	ldrb	r3, [r7, #11]
 80089c8:	3301      	adds	r3, #1
 80089ca:	72fb      	strb	r3, [r7, #11]
      break;
 80089cc:	e007      	b.n	80089de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f9ee 	bl	8008db2 <USBD_CtlError>
      err++;
 80089d6:	7afb      	ldrb	r3, [r7, #11]
 80089d8:	3301      	adds	r3, #1
 80089da:	72fb      	strb	r3, [r7, #11]
      break;
 80089dc:	bf00      	nop
  }

  if (err != 0U)
 80089de:	7afb      	ldrb	r3, [r7, #11]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d11e      	bne.n	8008a22 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	88db      	ldrh	r3, [r3, #6]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d016      	beq.n	8008a1a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80089ec:	893b      	ldrh	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00e      	beq.n	8008a10 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	88da      	ldrh	r2, [r3, #6]
 80089f6:	893b      	ldrh	r3, [r7, #8]
 80089f8:	4293      	cmp	r3, r2
 80089fa:	bf28      	it	cs
 80089fc:	4613      	movcs	r3, r2
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a02:	893b      	ldrh	r3, [r7, #8]
 8008a04:	461a      	mov	r2, r3
 8008a06:	68f9      	ldr	r1, [r7, #12]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa43 	bl	8008e94 <USBD_CtlSendData>
 8008a0e:	e009      	b.n	8008a24 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9cd 	bl	8008db2 <USBD_CtlError>
 8008a18:	e004      	b.n	8008a24 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa94 	bl	8008f48 <USBD_CtlSendStatus>
 8008a20:	e000      	b.n	8008a24 <USBD_GetDescriptor+0x320>
    return;
 8008a22:	bf00      	nop
  }
}
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop

08008a2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	889b      	ldrh	r3, [r3, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d131      	bne.n	8008aa2 <USBD_SetAddress+0x76>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	88db      	ldrh	r3, [r3, #6]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d12d      	bne.n	8008aa2 <USBD_SetAddress+0x76>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	885b      	ldrh	r3, [r3, #2]
 8008a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a4c:	d829      	bhi.n	8008aa2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	885b      	ldrh	r3, [r3, #2]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d104      	bne.n	8008a70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f9a2 	bl	8008db2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6e:	e01c      	b.n	8008aaa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	7bfa      	ldrb	r2, [r7, #15]
 8008a74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f007 fd83 	bl	8010588 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa60 	bl	8008f48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2202      	movs	r2, #2
 8008a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a96:	e008      	b.n	8008aaa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa0:	e003      	b.n	8008aaa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f984 	bl	8008db2 <USBD_CtlError>
  }
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	885b      	ldrh	r3, [r3, #2]
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	4b4c      	ldr	r3, [pc, #304]	; (8008bfc <USBD_SetConfig+0x148>)
 8008aca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008acc:	4b4b      	ldr	r3, [pc, #300]	; (8008bfc <USBD_SetConfig+0x148>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d905      	bls.n	8008ae0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f96b 	bl	8008db2 <USBD_CtlError>
    return USBD_FAIL;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e088      	b.n	8008bf2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d002      	beq.n	8008af2 <USBD_SetConfig+0x3e>
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d025      	beq.n	8008b3c <USBD_SetConfig+0x88>
 8008af0:	e071      	b.n	8008bd6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008af2:	4b42      	ldr	r3, [pc, #264]	; (8008bfc <USBD_SetConfig+0x148>)
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d01c      	beq.n	8008b34 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008afa:	4b40      	ldr	r3, [pc, #256]	; (8008bfc <USBD_SetConfig+0x148>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b04:	4b3d      	ldr	r3, [pc, #244]	; (8008bfc <USBD_SetConfig+0x148>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff f99e 	bl	8007e4c <USBD_SetClassConfig>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f948 	bl	8008db2 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b22:	e065      	b.n	8008bf0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fa0f 	bl	8008f48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2203      	movs	r2, #3
 8008b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b32:	e05d      	b.n	8008bf0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fa07 	bl	8008f48 <USBD_CtlSendStatus>
      break;
 8008b3a:	e059      	b.n	8008bf0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b3c:	4b2f      	ldr	r3, [pc, #188]	; (8008bfc <USBD_SetConfig+0x148>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d112      	bne.n	8008b6a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008b4c:	4b2b      	ldr	r3, [pc, #172]	; (8008bfc <USBD_SetConfig+0x148>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b56:	4b29      	ldr	r3, [pc, #164]	; (8008bfc <USBD_SetConfig+0x148>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff f991 	bl	8007e84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f9f0 	bl	8008f48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b68:	e042      	b.n	8008bf0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008b6a:	4b24      	ldr	r3, [pc, #144]	; (8008bfc <USBD_SetConfig+0x148>)
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d02a      	beq.n	8008bce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff f97f 	bl	8007e84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b86:	4b1d      	ldr	r3, [pc, #116]	; (8008bfc <USBD_SetConfig+0x148>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b90:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <USBD_SetConfig+0x148>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff f958 	bl	8007e4c <USBD_SetClassConfig>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00f      	beq.n	8008bc6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f902 	bl	8008db2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7ff f964 	bl	8007e84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bc4:	e014      	b.n	8008bf0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f9be 	bl	8008f48 <USBD_CtlSendStatus>
      break;
 8008bcc:	e010      	b.n	8008bf0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f9ba 	bl	8008f48 <USBD_CtlSendStatus>
      break;
 8008bd4:	e00c      	b.n	8008bf0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8ea 	bl	8008db2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bde:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <USBD_SetConfig+0x148>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff f94d 	bl	8007e84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008bea:	2303      	movs	r3, #3
 8008bec:	73fb      	strb	r3, [r7, #15]
      break;
 8008bee:	bf00      	nop
  }

  return ret;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	200002aa 	.word	0x200002aa

08008c00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	88db      	ldrh	r3, [r3, #6]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d004      	beq.n	8008c1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f8cc 	bl	8008db2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c1a:	e022      	b.n	8008c62 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	db17      	blt.n	8008c58 <USBD_GetConfig+0x58>
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	dd02      	ble.n	8008c32 <USBD_GetConfig+0x32>
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d00b      	beq.n	8008c48 <USBD_GetConfig+0x48>
 8008c30:	e012      	b.n	8008c58 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f927 	bl	8008e94 <USBD_CtlSendData>
        break;
 8008c46:	e00c      	b.n	8008c62 <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f91f 	bl	8008e94 <USBD_CtlSendData>
        break;
 8008c56:	e004      	b.n	8008c62 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f8a9 	bl	8008db2 <USBD_CtlError>
        break;
 8008c60:	bf00      	nop
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d81e      	bhi.n	8008cc0 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	88db      	ldrh	r3, [r3, #6]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d004      	beq.n	8008c94 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f890 	bl	8008db2 <USBD_CtlError>
        break;
 8008c92:	e01a      	b.n	8008cca <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d005      	beq.n	8008cb0 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f043 0202 	orr.w	r2, r3, #2
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	330c      	adds	r3, #12
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f8eb 	bl	8008e94 <USBD_CtlSendData>
      break;
 8008cbe:	e004      	b.n	8008cca <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f875 	bl	8008db2 <USBD_CtlError>
      break;
 8008cc8:	bf00      	nop
  }
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	885b      	ldrh	r3, [r3, #2]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d106      	bne.n	8008cf2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f92b 	bl	8008f48 <USBD_CtlSendStatus>
  }
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d80b      	bhi.n	8008d2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	885b      	ldrh	r3, [r3, #2]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d10c      	bne.n	8008d34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f910 	bl	8008f48 <USBD_CtlSendStatus>
      }
      break;
 8008d28:	e004      	b.n	8008d34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f840 	bl	8008db2 <USBD_CtlError>
      break;
 8008d32:	e000      	b.n	8008d36 <USBD_ClrFeature+0x3c>
      break;
 8008d34:	bf00      	nop
  }
}
 8008d36:	bf00      	nop
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	781a      	ldrb	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3301      	adds	r3, #1
 8008d58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	781a      	ldrb	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f7ff fa9d 	bl	80082a8 <SWAPBYTE>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	461a      	mov	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f7ff fa90 	bl	80082a8 <SWAPBYTE>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3301      	adds	r3, #1
 8008d94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f7ff fa83 	bl	80082a8 <SWAPBYTE>
 8008da2:	4603      	mov	r3, r0
 8008da4:	461a      	mov	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	80da      	strh	r2, [r3, #6]
}
 8008daa:	bf00      	nop
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dbc:	2180      	movs	r1, #128	; 0x80
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f007 fb7e 	bl	80104c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f007 fb7a 	bl	80104c0 <USBD_LL_StallEP>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d036      	beq.n	8008e58 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008dee:	6938      	ldr	r0, [r7, #16]
 8008df0:	f000 f836 	bl	8008e60 <USBD_GetLen>
 8008df4:	4603      	mov	r3, r0
 8008df6:	3301      	adds	r3, #1
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	4413      	add	r3, r2
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7812      	ldrb	r2, [r2, #0]
 8008e0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	3301      	adds	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	4413      	add	r3, r2
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	3301      	adds	r3, #1
 8008e22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e24:	e013      	b.n	8008e4e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	7812      	ldrb	r2, [r2, #0]
 8008e30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	3301      	adds	r3, #1
 8008e36:	613b      	str	r3, [r7, #16]
    idx++;
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	4413      	add	r3, r2
 8008e44:	2200      	movs	r2, #0
 8008e46:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e7      	bne.n	8008e26 <USBD_GetString+0x52>
 8008e56:	e000      	b.n	8008e5a <USBD_GetString+0x86>
    return;
 8008e58:	bf00      	nop
  }
}
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e70:	e005      	b.n	8008e7e <USBD_GetLen+0x1e>
  {
    len++;
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	3301      	adds	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f5      	bne.n	8008e72 <USBD_GetLen+0x12>
  }

  return len;
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	2100      	movs	r1, #0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f007 fb83 	bl	80105c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	2100      	movs	r1, #0
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f007 fb72 	bl	80105c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2203      	movs	r2, #3
 8008efc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	2100      	movs	r1, #0
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f007 fb76 	bl	8010608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	2100      	movs	r1, #0
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f007 fb65 	bl	8010608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2204      	movs	r2, #4
 8008f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f007 fb31 	bl	80105c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2200      	movs	r2, #0
 8008f82:	2100      	movs	r1, #0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f007 fb3f 	bl	8010608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008f9a:	1d3b      	adds	r3, r7, #4
 8008f9c:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8008fa8:	f000 f938 	bl	800921c <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	330b      	adds	r3, #11
 8008fb0:	78db      	ldrb	r3, [r3, #3]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b088      	sub	sp, #32
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008fc4:	f107 030c 	add.w	r3, r7, #12
 8008fc8:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8008fce:	f107 020c 	add.w	r2, r7, #12
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8008fda:	f000 f91f 	bl	800921c <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	330b      	adds	r3, #11
 8008fe2:	78db      	ldrb	r3, [r3, #3]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3720      	adds	r7, #32
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b08b      	sub	sp, #44	; 0x2c
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009008:	2300      	movs	r3, #0
 800900a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009014:	4b4a      	ldr	r3, [pc, #296]	; (8009140 <SHCI_GetWirelessFwInfo+0x154>)
 8009016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009018:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800901c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009026:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a44      	ldr	r2, [pc, #272]	; (8009144 <SHCI_GetWirelessFwInfo+0x158>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d10f      	bne.n	8009058 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	e01a      	b.n	800908e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009060:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009064:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	0e1b      	lsrs	r3, r3, #24
 8009092:	b2da      	uxtb	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	0c1b      	lsrs	r3, r3, #16
 800909c:	b2da      	uxtb	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	0a1b      	lsrs	r3, r3, #8
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	091b      	lsrs	r3, r3, #4
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	f003 030f 	and.w	r3, r3, #15
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	f003 030f 	and.w	r3, r3, #15
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	0e1b      	lsrs	r3, r3, #24
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	0c1b      	lsrs	r3, r3, #16
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	0a1b      	lsrs	r3, r3, #8
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	0e1b      	lsrs	r3, r3, #24
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	0c1b      	lsrs	r3, r3, #16
 8009106:	b2da      	uxtb	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	0a1b      	lsrs	r3, r3, #8
 8009110:	b2da      	uxtb	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	0e1b      	lsrs	r3, r3, #24
 800911a:	b2da      	uxtb	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	0c1b      	lsrs	r3, r3, #16
 8009124:	b2da      	uxtb	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	b2da      	uxtb	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	372c      	adds	r7, #44	; 0x2c
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	58004000 	.word	0x58004000
 8009144:	a94656b9 	.word	0xa94656b9

08009148 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	4a08      	ldr	r2, [pc, #32]	; (8009178 <shci_init+0x30>)
 8009158:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800915a:	4a08      	ldr	r2, [pc, #32]	; (800917c <shci_init+0x34>)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009160:	4806      	ldr	r0, [pc, #24]	; (800917c <shci_init+0x34>)
 8009162:	f000 f911 	bl	8009388 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f000 f894 	bl	8009298 <TlInit>

  return;
 8009170:	bf00      	nop
}
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	200002cc 	.word	0x200002cc
 800917c:	200002ac 	.word	0x200002ac

08009180 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009186:	4822      	ldr	r0, [pc, #136]	; (8009210 <shci_user_evt_proc+0x90>)
 8009188:	f001 fce4 	bl	800ab54 <LST_is_empty>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d12b      	bne.n	80091ea <shci_user_evt_proc+0x6a>
 8009192:	4b20      	ldr	r3, [pc, #128]	; (8009214 <shci_user_evt_proc+0x94>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d027      	beq.n	80091ea <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800919a:	f107 030c 	add.w	r3, r7, #12
 800919e:	4619      	mov	r1, r3
 80091a0:	481b      	ldr	r0, [pc, #108]	; (8009210 <shci_user_evt_proc+0x90>)
 80091a2:	f001 fd5e 	bl	800ac62 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80091a6:	4b1c      	ldr	r3, [pc, #112]	; (8009218 <shci_user_evt_proc+0x98>)
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00c      	beq.n	80091c8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80091b2:	2301      	movs	r3, #1
 80091b4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80091b6:	4b18      	ldr	r3, [pc, #96]	; (8009218 <shci_user_evt_proc+0x98>)
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	1d3a      	adds	r2, r7, #4
 80091bc:	4610      	mov	r0, r2
 80091be:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80091c0:	793a      	ldrb	r2, [r7, #4]
 80091c2:	4b14      	ldr	r3, [pc, #80]	; (8009214 <shci_user_evt_proc+0x94>)
 80091c4:	701a      	strb	r2, [r3, #0]
 80091c6:	e002      	b.n	80091ce <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80091c8:	4b12      	ldr	r3, [pc, #72]	; (8009214 <shci_user_evt_proc+0x94>)
 80091ca:	2201      	movs	r2, #1
 80091cc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80091ce:	4b11      	ldr	r3, [pc, #68]	; (8009214 <shci_user_evt_proc+0x94>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fa95 	bl	8009708 <TL_MM_EvtDone>
 80091de:	e004      	b.n	80091ea <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4619      	mov	r1, r3
 80091e4:	480a      	ldr	r0, [pc, #40]	; (8009210 <shci_user_evt_proc+0x90>)
 80091e6:	f001 fcd5 	bl	800ab94 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80091ea:	4809      	ldr	r0, [pc, #36]	; (8009210 <shci_user_evt_proc+0x90>)
 80091ec:	f001 fcb2 	bl	800ab54 <LST_is_empty>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d107      	bne.n	8009206 <shci_user_evt_proc+0x86>
 80091f6:	4b07      	ldr	r3, [pc, #28]	; (8009214 <shci_user_evt_proc+0x94>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80091fe:	4804      	ldr	r0, [pc, #16]	; (8009210 <shci_user_evt_proc+0x90>)
 8009200:	f7f7 f8dc 	bl	80003bc <shci_notify_asynch_evt>
  }


  return;
 8009204:	bf00      	nop
 8009206:	bf00      	nop
}
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	2000026c 	.word	0x2000026c
 8009214:	2000027c 	.word	0x2000027c
 8009218:	200002ac 	.word	0x200002ac

0800921c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	60ba      	str	r2, [r7, #8]
 8009224:	607b      	str	r3, [r7, #4]
 8009226:	4603      	mov	r3, r0
 8009228:	81fb      	strh	r3, [r7, #14]
 800922a:	460b      	mov	r3, r1
 800922c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800922e:	2000      	movs	r0, #0
 8009230:	f000 f864 	bl	80092fc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009234:	4b16      	ldr	r3, [pc, #88]	; (8009290 <shci_send+0x74>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	89fa      	ldrh	r2, [r7, #14]
 800923a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800923e:	4b14      	ldr	r3, [pc, #80]	; (8009290 <shci_send+0x74>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	7b7a      	ldrb	r2, [r7, #13]
 8009244:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009246:	4b12      	ldr	r3, [pc, #72]	; (8009290 <shci_send+0x74>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	330c      	adds	r3, #12
 800924c:	7b7a      	ldrb	r2, [r7, #13]
 800924e:	68b9      	ldr	r1, [r7, #8]
 8009250:	4618      	mov	r0, r3
 8009252:	f007 faf1 	bl	8010838 <memcpy>

  shciContext.io.Send(0,0);
 8009256:	4b0f      	ldr	r3, [pc, #60]	; (8009294 <shci_send+0x78>)
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2100      	movs	r1, #0
 800925c:	2000      	movs	r0, #0
 800925e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009260:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009264:	f7f7 f8ca 	bl	80003fc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f103 0008 	add.w	r0, r3, #8
 800926e:	4b08      	ldr	r3, [pc, #32]	; (8009290 <shci_send+0x74>)
 8009270:	6819      	ldr	r1, [r3, #0]
 8009272:	4b07      	ldr	r3, [pc, #28]	; (8009290 <shci_send+0x74>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	789b      	ldrb	r3, [r3, #2]
 8009278:	3303      	adds	r3, #3
 800927a:	461a      	mov	r2, r3
 800927c:	f007 fadc 	bl	8010838 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009280:	2001      	movs	r0, #1
 8009282:	f000 f83b 	bl	80092fc <Cmd_SetStatus>

  return;
 8009286:	bf00      	nop
}
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000278 	.word	0x20000278
 8009294:	200002ac 	.word	0x200002ac

08009298 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80092a0:	4a10      	ldr	r2, [pc, #64]	; (80092e4 <TlInit+0x4c>)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80092a6:	4810      	ldr	r0, [pc, #64]	; (80092e8 <TlInit+0x50>)
 80092a8:	f001 fc44 	bl	800ab34 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80092ac:	2001      	movs	r0, #1
 80092ae:	f000 f825 	bl	80092fc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80092b2:	4b0e      	ldr	r3, [pc, #56]	; (80092ec <TlInit+0x54>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80092b8:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <TlInit+0x58>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00c      	beq.n	80092da <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80092c4:	4b0b      	ldr	r3, [pc, #44]	; (80092f4 <TlInit+0x5c>)
 80092c6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80092c8:	4b0b      	ldr	r3, [pc, #44]	; (80092f8 <TlInit+0x60>)
 80092ca:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80092cc:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <TlInit+0x58>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f107 020c 	add.w	r2, r7, #12
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
  }

  return;
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
}
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20000278 	.word	0x20000278
 80092e8:	2000026c 	.word	0x2000026c
 80092ec:	2000027c 	.word	0x2000027c
 80092f0:	200002ac 	.word	0x200002ac
 80092f4:	0800934d 	.word	0x0800934d
 80092f8:	08009365 	.word	0x08009365

080092fc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10b      	bne.n	8009324 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800930c:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <Cmd_SetStatus+0x48>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d003      	beq.n	800931c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009314:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <Cmd_SetStatus+0x48>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2000      	movs	r0, #0
 800931a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <Cmd_SetStatus+0x4c>)
 800931e:	2200      	movs	r2, #0
 8009320:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009322:	e00b      	b.n	800933c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009324:	4b08      	ldr	r3, [pc, #32]	; (8009348 <Cmd_SetStatus+0x4c>)
 8009326:	2201      	movs	r2, #1
 8009328:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800932a:	4b06      	ldr	r3, [pc, #24]	; (8009344 <Cmd_SetStatus+0x48>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d004      	beq.n	800933c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009332:	4b04      	ldr	r3, [pc, #16]	; (8009344 <Cmd_SetStatus+0x48>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2001      	movs	r0, #1
 8009338:	4798      	blx	r3
  return;
 800933a:	bf00      	nop
 800933c:	bf00      	nop
}
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200002cc 	.word	0x200002cc
 8009348:	20000274 	.word	0x20000274

0800934c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009354:	2000      	movs	r0, #0
 8009356:	f7f7 f841 	bl	80003dc <shci_cmd_resp_release>

  return;
 800935a:	bf00      	nop
}
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	4805      	ldr	r0, [pc, #20]	; (8009384 <TlUserEvtReceived+0x20>)
 8009370:	f001 fc34 	bl	800abdc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009374:	4803      	ldr	r0, [pc, #12]	; (8009384 <TlUserEvtReceived+0x20>)
 8009376:	f7f7 f821 	bl	80003bc <shci_notify_asynch_evt>

  return;
 800937a:	bf00      	nop
}
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	2000026c 	.word	0x2000026c

08009388 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a05      	ldr	r2, [pc, #20]	; (80093a8 <shci_register_io_bus+0x20>)
 8009394:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a04      	ldr	r2, [pc, #16]	; (80093ac <shci_register_io_bus+0x24>)
 800939a:	611a      	str	r2, [r3, #16]

  return;
 800939c:	bf00      	nop
}
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr
 80093a8:	080094a5 	.word	0x080094a5
 80093ac:	080094f9 	.word	0x080094f9

080093b0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80093b4:	f006 fb8c 	bl	800fad0 <HW_IPCC_Enable>

  return;
 80093b8:	bf00      	nop
}
 80093ba:	bd80      	pop	{r7, pc}

080093bc <TL_Init>:


void TL_Init( void )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80093c0:	4b10      	ldr	r3, [pc, #64]	; (8009404 <TL_Init+0x48>)
 80093c2:	4a11      	ldr	r2, [pc, #68]	; (8009408 <TL_Init+0x4c>)
 80093c4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <TL_Init+0x48>)
 80093c8:	4a10      	ldr	r2, [pc, #64]	; (800940c <TL_Init+0x50>)
 80093ca:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80093cc:	4b0d      	ldr	r3, [pc, #52]	; (8009404 <TL_Init+0x48>)
 80093ce:	4a10      	ldr	r2, [pc, #64]	; (8009410 <TL_Init+0x54>)
 80093d0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80093d2:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <TL_Init+0x48>)
 80093d4:	4a0f      	ldr	r2, [pc, #60]	; (8009414 <TL_Init+0x58>)
 80093d6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 80093d8:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <TL_Init+0x48>)
 80093da:	4a0f      	ldr	r2, [pc, #60]	; (8009418 <TL_Init+0x5c>)
 80093dc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80093de:	4b09      	ldr	r3, [pc, #36]	; (8009404 <TL_Init+0x48>)
 80093e0:	4a0e      	ldr	r2, [pc, #56]	; (800941c <TL_Init+0x60>)
 80093e2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80093e4:	4b07      	ldr	r3, [pc, #28]	; (8009404 <TL_Init+0x48>)
 80093e6:	4a0e      	ldr	r2, [pc, #56]	; (8009420 <TL_Init+0x64>)
 80093e8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80093ea:	4b06      	ldr	r3, [pc, #24]	; (8009404 <TL_Init+0x48>)
 80093ec:	4a0d      	ldr	r2, [pc, #52]	; (8009424 <TL_Init+0x68>)
 80093ee:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80093f0:	4b04      	ldr	r3, [pc, #16]	; (8009404 <TL_Init+0x48>)
 80093f2:	4a0d      	ldr	r2, [pc, #52]	; (8009428 <TL_Init+0x6c>)
 80093f4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80093f6:	4b03      	ldr	r3, [pc, #12]	; (8009404 <TL_Init+0x48>)
 80093f8:	4a0c      	ldr	r2, [pc, #48]	; (800942c <TL_Init+0x70>)
 80093fa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80093fc:	f006 fb7c 	bl	800faf8 <HW_IPCC_Init>

  return;
 8009400:	bf00      	nop
}
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20030000 	.word	0x20030000
 8009408:	20030028 	.word	0x20030028
 800940c:	20030048 	.word	0x20030048
 8009410:	20030058 	.word	0x20030058
 8009414:	20030064 	.word	0x20030064
 8009418:	2003006c 	.word	0x2003006c
 800941c:	20030074 	.word	0x20030074
 8009420:	2003007c 	.word	0x2003007c
 8009424:	20030098 	.word	0x20030098
 8009428:	2003009c 	.word	0x2003009c
 800942c:	200300a8 	.word	0x200300a8

08009430 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009436:	e01c      	b.n	8009472 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009438:	1d3b      	adds	r3, r7, #4
 800943a:	4619      	mov	r1, r3
 800943c:	4812      	ldr	r0, [pc, #72]	; (8009488 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800943e:	f001 fc10 	bl	800ac62 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7a5b      	ldrb	r3, [r3, #9]
 8009446:	2b0f      	cmp	r3, #15
 8009448:	d003      	beq.n	8009452 <HW_IPCC_BLE_RxEvtNot+0x22>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	7a5b      	ldrb	r3, [r3, #9]
 800944e:	2b0e      	cmp	r3, #14
 8009450:	d105      	bne.n	800945e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4619      	mov	r1, r3
 8009456:	2002      	movs	r0, #2
 8009458:	f000 f9ba 	bl	80097d0 <OutputDbgTrace>
 800945c:	e004      	b.n	8009468 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4619      	mov	r1, r3
 8009462:	2003      	movs	r0, #3
 8009464:	f000 f9b4 	bl	80097d0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009468:	4b08      	ldr	r3, [pc, #32]	; (800948c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	4610      	mov	r0, r2
 8009470:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009472:	4805      	ldr	r0, [pc, #20]	; (8009488 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009474:	f001 fb6e 	bl	800ab54 <LST_is_empty>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0dc      	beq.n	8009438 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800947e:	bf00      	nop
}
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	200300c4 	.word	0x200300c4
 800948c:	200002d8 	.word	0x200002d8

08009490 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009494:	4b02      	ldr	r3, [pc, #8]	; (80094a0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4798      	blx	r3

  return;
 800949a:	bf00      	nop
}
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	200002dc 	.word	0x200002dc

080094a4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80094b0:	480d      	ldr	r0, [pc, #52]	; (80094e8 <TL_SYS_Init+0x44>)
 80094b2:	f001 fb3f 	bl	800ab34 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80094b6:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <TL_SYS_Init+0x48>)
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4a08      	ldr	r2, [pc, #32]	; (80094e8 <TL_SYS_Init+0x44>)
 80094c8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80094ca:	f006 fb43 	bl	800fb54 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a07      	ldr	r2, [pc, #28]	; (80094f0 <TL_SYS_Init+0x4c>)
 80094d4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	4a06      	ldr	r2, [pc, #24]	; (80094f4 <TL_SYS_Init+0x50>)
 80094dc:	6013      	str	r3, [r2, #0]

  return 0;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	200300cc 	.word	0x200300cc
 80094ec:	20030000 	.word	0x20030000
 80094f0:	200002e0 	.word	0x200002e0
 80094f4:	200002e4 	.word	0x200002e4

080094f8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009504:	4b09      	ldr	r3, [pc, #36]	; (800952c <TL_SYS_SendCmd+0x34>)
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2210      	movs	r2, #16
 800950c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800950e:	4b07      	ldr	r3, [pc, #28]	; (800952c <TL_SYS_SendCmd+0x34>)
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4619      	mov	r1, r3
 8009516:	2004      	movs	r0, #4
 8009518:	f000 f95a 	bl	80097d0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800951c:	f006 fb24 	bl	800fb68 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20030000 	.word	0x20030000

08009530 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009534:	4b07      	ldr	r3, [pc, #28]	; (8009554 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4619      	mov	r1, r3
 800953c:	2005      	movs	r0, #5
 800953e:	f000 f947 	bl	80097d0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a03      	ldr	r2, [pc, #12]	; (8009554 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009548:	68d2      	ldr	r2, [r2, #12]
 800954a:	6812      	ldr	r2, [r2, #0]
 800954c:	4610      	mov	r0, r2
 800954e:	4798      	blx	r3

  return;
 8009550:	bf00      	nop
}
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20030000 	.word	0x20030000
 8009558:	200002e0 	.word	0x200002e0

0800955c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009562:	e00e      	b.n	8009582 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009564:	1d3b      	adds	r3, r7, #4
 8009566:	4619      	mov	r1, r3
 8009568:	480b      	ldr	r0, [pc, #44]	; (8009598 <HW_IPCC_SYS_EvtNot+0x3c>)
 800956a:	f001 fb7a 	bl	800ac62 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4619      	mov	r1, r3
 8009572:	2006      	movs	r0, #6
 8009574:	f000 f92c 	bl	80097d0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009578:	4b08      	ldr	r3, [pc, #32]	; (800959c <HW_IPCC_SYS_EvtNot+0x40>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	4610      	mov	r0, r2
 8009580:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009582:	4805      	ldr	r0, [pc, #20]	; (8009598 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009584:	f001 fae6 	bl	800ab54 <LST_is_empty>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0ea      	beq.n	8009564 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800958e:	bf00      	nop
}
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	200300cc 	.word	0x200300cc
 800959c:	200002e4 	.word	0x200002e4

080095a0 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <TL_THREAD_Init+0x34>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689a      	ldr	r2, [r3, #8]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 80095c6:	f006 faf5 	bl	800fbb4 <HW_IPCC_THREAD_Init>

  return;
 80095ca:	bf00      	nop
}
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20030000 	.word	0x20030000

080095d8 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 80095dc:	4b04      	ldr	r3, [pc, #16]	; (80095f0 <TL_OT_SendCmd+0x18>)
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	2208      	movs	r2, #8
 80095e4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 80095e6:	f006 faf3 	bl	800fbd0 <HW_IPCC_OT_SendCmd>

  return;
 80095ea:	bf00      	nop
}
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20030000 	.word	0x20030000

080095f4 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80095f8:	4b04      	ldr	r3, [pc, #16]	; (800960c <TL_CLI_SendCmd+0x18>)
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	220a      	movs	r2, #10
 8009600:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8009602:	f006 faf3 	bl	800fbec <HW_IPCC_CLI_SendCmd>

  return;
 8009606:	bf00      	nop
}
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20030000 	.word	0x20030000

08009610 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009614:	4b04      	ldr	r3, [pc, #16]	; (8009628 <TL_THREAD_SendAck+0x18>)
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	220d      	movs	r2, #13
 800961c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800961e:	f006 faef 	bl	800fc00 <HW_IPCC_THREAD_SendAck>

  return;
 8009622:	bf00      	nop
}
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20030000 	.word	0x20030000

0800962c <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <TL_THREAD_CliSendAck+0x18>)
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	220d      	movs	r2, #13
 8009638:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800963a:	f006 faef 	bl	800fc1c <HW_IPCC_THREAD_CliSendAck>

  return;
 800963e:	bf00      	nop
}
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20030000 	.word	0x20030000

08009648 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800964c:	4b03      	ldr	r3, [pc, #12]	; (800965c <HW_IPCC_OT_CmdEvtNot+0x14>)
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	4618      	mov	r0, r3
 8009654:	f005 ff82 	bl	800f55c <TL_OT_CmdEvtReceived>

  return;
 8009658:	bf00      	nop
}
 800965a:	bd80      	pop	{r7, pc}
 800965c:	20030000 	.word	0x20030000

08009660 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8009664:	4b03      	ldr	r3, [pc, #12]	; (8009674 <HW_IPCC_THREAD_EvtNot+0x14>)
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4618      	mov	r0, r3
 800966c:	f005 ff80 	bl	800f570 <TL_THREAD_NotReceived>

  return;
 8009670:	bf00      	nop
}
 8009672:	bd80      	pop	{r7, pc}
 8009674:	20030000 	.word	0x20030000

08009678 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800967c:	4b03      	ldr	r3, [pc, #12]	; (800968c <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	4618      	mov	r0, r3
 8009684:	f006 f822 	bl	800f6cc <TL_THREAD_CliNotReceived>

  return;
 8009688:	bf00      	nop
}
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20030000 	.word	0x20030000

08009690 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009698:	4817      	ldr	r0, [pc, #92]	; (80096f8 <TL_MM_Init+0x68>)
 800969a:	f001 fa4b 	bl	800ab34 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800969e:	4817      	ldr	r0, [pc, #92]	; (80096fc <TL_MM_Init+0x6c>)
 80096a0:	f001 fa48 	bl	800ab34 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80096a4:	4b16      	ldr	r3, [pc, #88]	; (8009700 <TL_MM_Init+0x70>)
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	4a16      	ldr	r2, [pc, #88]	; (8009704 <TL_MM_Init+0x74>)
 80096aa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80096ac:	4b15      	ldr	r3, [pc, #84]	; (8009704 <TL_MM_Init+0x74>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6892      	ldr	r2, [r2, #8]
 80096b4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80096b6:	4b13      	ldr	r3, [pc, #76]	; (8009704 <TL_MM_Init+0x74>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	68d2      	ldr	r2, [r2, #12]
 80096be:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80096c0:	4b10      	ldr	r3, [pc, #64]	; (8009704 <TL_MM_Init+0x74>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a0c      	ldr	r2, [pc, #48]	; (80096f8 <TL_MM_Init+0x68>)
 80096c6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80096c8:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <TL_MM_Init+0x74>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	6812      	ldr	r2, [r2, #0]
 80096d0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <TL_MM_Init+0x74>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	6852      	ldr	r2, [r2, #4]
 80096da:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80096dc:	4b09      	ldr	r3, [pc, #36]	; (8009704 <TL_MM_Init+0x74>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6912      	ldr	r2, [r2, #16]
 80096e4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80096e6:	4b07      	ldr	r3, [pc, #28]	; (8009704 <TL_MM_Init+0x74>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	6952      	ldr	r2, [r2, #20]
 80096ee:	619a      	str	r2, [r3, #24]

  return;
 80096f0:	bf00      	nop
}
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	200300b4 	.word	0x200300b4
 80096fc:	200002d0 	.word	0x200002d0
 8009700:	20030000 	.word	0x20030000
 8009704:	200002e8 	.word	0x200002e8

08009708 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	4807      	ldr	r0, [pc, #28]	; (8009730 <TL_MM_EvtDone+0x28>)
 8009714:	f001 fa62 	bl	800abdc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009718:	6879      	ldr	r1, [r7, #4]
 800971a:	2000      	movs	r0, #0
 800971c:	f000 f858 	bl	80097d0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009720:	4804      	ldr	r0, [pc, #16]	; (8009734 <TL_MM_EvtDone+0x2c>)
 8009722:	f006 faad 	bl	800fc80 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009726:	bf00      	nop
}
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	200002d0 	.word	0x200002d0
 8009734:	08009739 	.word	0x08009739

08009738 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800973e:	e00c      	b.n	800975a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009740:	1d3b      	adds	r3, r7, #4
 8009742:	4619      	mov	r1, r3
 8009744:	480a      	ldr	r0, [pc, #40]	; (8009770 <SendFreeBuf+0x38>)
 8009746:	f001 fa8c 	bl	800ac62 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800974a:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <SendFreeBuf+0x3c>)
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	4611      	mov	r1, r2
 8009754:	4618      	mov	r0, r3
 8009756:	f001 fa41 	bl	800abdc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800975a:	4805      	ldr	r0, [pc, #20]	; (8009770 <SendFreeBuf+0x38>)
 800975c:	f001 f9fa 	bl	800ab54 <LST_is_empty>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0ec      	beq.n	8009740 <SendFreeBuf+0x8>
  }

  return;
 8009766:	bf00      	nop
}
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	200002d0 	.word	0x200002d0
 8009774:	20030000 	.word	0x20030000

08009778 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800977c:	4805      	ldr	r0, [pc, #20]	; (8009794 <TL_TRACES_Init+0x1c>)
 800977e:	f001 f9d9 	bl	800ab34 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009782:	4b05      	ldr	r3, [pc, #20]	; (8009798 <TL_TRACES_Init+0x20>)
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	4a03      	ldr	r2, [pc, #12]	; (8009794 <TL_TRACES_Init+0x1c>)
 8009788:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800978a:	f006 faaf 	bl	800fcec <HW_IPCC_TRACES_Init>

  return;
 800978e:	bf00      	nop
}
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200300bc 	.word	0x200300bc
 8009798:	20030000 	.word	0x20030000

0800979c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80097a2:	e008      	b.n	80097b6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80097a4:	1d3b      	adds	r3, r7, #4
 80097a6:	4619      	mov	r1, r3
 80097a8:	4808      	ldr	r0, [pc, #32]	; (80097cc <HW_IPCC_TRACES_EvtNot+0x30>)
 80097aa:	f001 fa5a 	bl	800ac62 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7f6 fe35 	bl	8000420 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80097b6:	4805      	ldr	r0, [pc, #20]	; (80097cc <HW_IPCC_TRACES_EvtNot+0x30>)
 80097b8:	f001 f9cc 	bl	800ab54 <LST_is_empty>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d0f0      	beq.n	80097a4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80097c2:	bf00      	nop
}
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	200300bc 	.word	0x200300bc

080097d0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	6039      	str	r1, [r7, #0]
 80097da:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	2b06      	cmp	r3, #6
 80097e0:	d849      	bhi.n	8009876 <OutputDbgTrace+0xa6>
 80097e2:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <OutputDbgTrace+0x18>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	08009805 	.word	0x08009805
 80097ec:	08009827 	.word	0x08009827
 80097f0:	0800982d 	.word	0x0800982d
 80097f4:	08009847 	.word	0x08009847
 80097f8:	08009853 	.word	0x08009853
 80097fc:	08009859 	.word	0x08009859
 8009800:	0800986b 	.word	0x0800986b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	7a5b      	ldrb	r3, [r3, #9]
 800980c:	2b0f      	cmp	r3, #15
 800980e:	d004      	beq.n	800981a <OutputDbgTrace+0x4a>
 8009810:	2bff      	cmp	r3, #255	; 0xff
 8009812:	d004      	beq.n	800981e <OutputDbgTrace+0x4e>
 8009814:	2b0e      	cmp	r3, #14
 8009816:	d004      	beq.n	8009822 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009818:	e004      	b.n	8009824 <OutputDbgTrace+0x54>
          break;
 800981a:	bf00      	nop
 800981c:	e02c      	b.n	8009878 <OutputDbgTrace+0xa8>
          break;
 800981e:	bf00      	nop
 8009820:	e02a      	b.n	8009878 <OutputDbgTrace+0xa8>
          break;
 8009822:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009824:	e028      	b.n	8009878 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800982a:	e025      	b.n	8009878 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	7a5b      	ldrb	r3, [r3, #9]
 8009834:	2b0e      	cmp	r3, #14
 8009836:	d002      	beq.n	800983e <OutputDbgTrace+0x6e>
 8009838:	2b0f      	cmp	r3, #15
 800983a:	d002      	beq.n	8009842 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800983c:	e002      	b.n	8009844 <OutputDbgTrace+0x74>
          break;
 800983e:	bf00      	nop
 8009840:	e01a      	b.n	8009878 <OutputDbgTrace+0xa8>
          break;
 8009842:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009844:	e018      	b.n	8009878 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	7a5b      	ldrb	r3, [r3, #9]
 800984e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009850:	e012      	b.n	8009878 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009856:	e00f      	b.n	8009878 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	7a5b      	ldrb	r3, [r3, #9]
 8009860:	2b0e      	cmp	r3, #14
 8009862:	d000      	beq.n	8009866 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009864:	e000      	b.n	8009868 <OutputDbgTrace+0x98>
          break;
 8009866:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009868:	e006      	b.n	8009878 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	7a5b      	ldrb	r3, [r3, #9]
 8009872:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009874:	e000      	b.n	8009878 <OutputDbgTrace+0xa8>

    default:
      break;
 8009876:	bf00      	nop
  }

  return;
 8009878:	bf00      	nop
}
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
 8009890:	4613      	mov	r3, r2
 8009892:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8009894:	f005 fe7c 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009898:	f005 fe18 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800989c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f062 0260 	orn	r2, r2, #96	; 0x60
 80098a6:	701a      	strb	r2, [r3, #0]
 80098a8:	2200      	movs	r2, #0
 80098aa:	705a      	strb	r2, [r3, #1]
 80098ac:	2200      	movs	r2, #0
 80098ae:	709a      	strb	r2, [r3, #2]
 80098b0:	2200      	movs	r2, #0
 80098b2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f042 0203 	orr.w	r2, r2, #3
 80098bc:	711a      	strb	r2, [r3, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	715a      	strb	r2, [r3, #5]
 80098c2:	2200      	movs	r2, #0
 80098c4:	719a      	strb	r2, [r3, #6]
 80098c6:	2200      	movs	r2, #0
 80098c8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 80098d0:	78fa      	ldrb	r2, [r7, #3]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 80098d6:	78ba      	ldrb	r2, [r7, #2]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80098dc:	f005 fe1a 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80098e0:	f005 fe00 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80098e4:	60f8      	str	r0, [r7, #12]
}
 80098e6:	bf00      	nop
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b086      	sub	sp, #24
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	4613      	mov	r3, r2
 80098fa:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 80098fc:	f005 fe48 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009900:	f005 fde4 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009904:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2200      	movs	r2, #0
 800990a:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	2200      	movs	r2, #0
 8009912:	705a      	strb	r2, [r3, #1]
 8009914:	2200      	movs	r2, #0
 8009916:	709a      	strb	r2, [r3, #2]
 8009918:	2200      	movs	r2, #0
 800991a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	2200      	movs	r2, #0
 8009920:	f042 0203 	orr.w	r2, r2, #3
 8009924:	711a      	strb	r2, [r3, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	715a      	strb	r2, [r3, #5]
 800992a:	2200      	movs	r2, #0
 800992c:	719a      	strb	r2, [r3, #6]
 800992e:	2200      	movs	r2, #0
 8009930:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800993e:	79fa      	ldrb	r2, [r7, #7]
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8009944:	f005 fde6 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009948:	f005 fdcc 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800994c:	6178      	str	r0, [r7, #20]
}
 800994e:	bf00      	nop
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8009962:	f005 fe15 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009966:	f005 fdb1 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800996a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	2200      	movs	r2, #0
 8009978:	705a      	strb	r2, [r3, #1]
 800997a:	2200      	movs	r2, #0
 800997c:	709a      	strb	r2, [r3, #2]
 800997e:	2200      	movs	r2, #0
 8009980:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f042 0202 	orr.w	r2, r2, #2
 800998a:	711a      	strb	r2, [r3, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	715a      	strb	r2, [r3, #5]
 8009990:	2200      	movs	r2, #0
 8009992:	719a      	strb	r2, [r3, #6]
 8009994:	2200      	movs	r2, #0
 8009996:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800999e:	78fa      	ldrb	r2, [r7, #3]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80099a4:	f005 fdb6 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80099a8:	f005 fd9c 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80099ac:	60f8      	str	r0, [r7, #12]
}
 80099ae:	bf00      	nop
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	460b      	mov	r3, r1
 80099c0:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 80099c2:	f005 fde5 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80099c6:	f005 fd81 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 80099ca:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f062 025d 	orn	r2, r2, #93	; 0x5d
 80099d4:	701a      	strb	r2, [r3, #0]
 80099d6:	2200      	movs	r2, #0
 80099d8:	705a      	strb	r2, [r3, #1]
 80099da:	2200      	movs	r2, #0
 80099dc:	709a      	strb	r2, [r3, #2]
 80099de:	2200      	movs	r2, #0
 80099e0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f042 0202 	orr.w	r2, r2, #2
 80099ea:	711a      	strb	r2, [r3, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	715a      	strb	r2, [r3, #5]
 80099f0:	2200      	movs	r2, #0
 80099f2:	719a      	strb	r2, [r3, #6]
 80099f4:	2200      	movs	r2, #0
 80099f6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8009a04:	f005 fd86 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009a08:	f005 fd6c 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009a0c:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	b2db      	uxtb	r3, r3
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8009a26:	f005 fdb3 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009a2a:	f005 fd4f 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009a2e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f062 0250 	orn	r2, r2, #80	; 0x50
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	705a      	strb	r2, [r3, #1]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	709a      	strb	r2, [r3, #2]
 8009a42:	2200      	movs	r2, #0
 8009a44:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f042 0202 	orr.w	r2, r2, #2
 8009a4e:	711a      	strb	r2, [r3, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	715a      	strb	r2, [r3, #5]
 8009a54:	2200      	movs	r2, #0
 8009a56:	719a      	strb	r2, [r3, #6]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8009a68:	f005 fd54 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009a6c:	f005 fd3a 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009a70:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	b2db      	uxtb	r3, r3
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009a88:	f005 fd82 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009a8c:	f005 fd1e 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009a90:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8009a9a:	701a      	strb	r2, [r3, #0]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	705a      	strb	r2, [r3, #1]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	709a      	strb	r2, [r3, #2]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f042 0201 	orr.w	r2, r2, #1
 8009ab0:	711a      	strb	r2, [r3, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	715a      	strb	r2, [r3, #5]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	719a      	strb	r2, [r3, #6]
 8009aba:	2200      	movs	r2, #0
 8009abc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009ac4:	f005 fd26 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ac8:	f005 fd0c 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009acc:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	b2db      	uxtb	r3, r3
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8009ae8:	f005 fd52 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009aec:	f005 fcee 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009af0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f062 0256 	orn	r2, r2, #86	; 0x56
 8009afa:	701a      	strb	r2, [r3, #0]
 8009afc:	2200      	movs	r2, #0
 8009afe:	705a      	strb	r2, [r3, #1]
 8009b00:	2200      	movs	r2, #0
 8009b02:	709a      	strb	r2, [r3, #2]
 8009b04:	2200      	movs	r2, #0
 8009b06:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f042 0202 	orr.w	r2, r2, #2
 8009b10:	711a      	strb	r2, [r3, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	715a      	strb	r2, [r3, #5]
 8009b16:	2200      	movs	r2, #0
 8009b18:	719a      	strb	r2, [r3, #6]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8009b24:	887a      	ldrh	r2, [r7, #2]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8009b2a:	f005 fcf3 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009b2e:	f005 fcd9 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009b32:	60f8      	str	r0, [r7, #12]
}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009b44:	f005 fd24 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009b48:	f005 fcc0 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009b4c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f062 0261 	orn	r2, r2, #97	; 0x61
 8009b56:	701a      	strb	r2, [r3, #0]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	705a      	strb	r2, [r3, #1]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	709a      	strb	r2, [r3, #2]
 8009b60:	2200      	movs	r2, #0
 8009b62:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f042 0201 	orr.w	r2, r2, #1
 8009b6c:	711a      	strb	r2, [r3, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	715a      	strb	r2, [r3, #5]
 8009b72:	2200      	movs	r2, #0
 8009b74:	719a      	strb	r2, [r3, #6]
 8009b76:	2200      	movs	r2, #0
 8009b78:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009b80:	f005 fcc8 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009b84:	f005 fcae 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009b88:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	b2db      	uxtb	r3, r3
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009ba0:	f005 fcf6 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009ba4:	f005 fc92 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009ba8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8009bb2:	701a      	strb	r2, [r3, #0]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	705a      	strb	r2, [r3, #1]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	709a      	strb	r2, [r3, #2]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f042 0201 	orr.w	r2, r2, #1
 8009bc8:	711a      	strb	r2, [r3, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	715a      	strb	r2, [r3, #5]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	719a      	strb	r2, [r3, #6]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009bdc:	f005 fc9a 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009be0:	f005 fc80 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009be4:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	b2db      	uxtb	r3, r3
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009bfc:	f005 fcc8 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009c00:	f005 fc64 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009c04:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f062 0255 	orn	r2, r2, #85	; 0x55
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	2200      	movs	r2, #0
 8009c12:	705a      	strb	r2, [r3, #1]
 8009c14:	2200      	movs	r2, #0
 8009c16:	709a      	strb	r2, [r3, #2]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f042 0201 	orr.w	r2, r2, #1
 8009c24:	711a      	strb	r2, [r3, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	715a      	strb	r2, [r3, #5]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	719a      	strb	r2, [r3, #6]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009c38:	f005 fc6c 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009c3c:	f005 fc52 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009c40:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	b29b      	uxth	r3, r3
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009c58:	f005 fc9a 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009c5c:	f005 fc36 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009c60:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f062 0254 	orn	r2, r2, #84	; 0x54
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	705a      	strb	r2, [r3, #1]
 8009c70:	2200      	movs	r2, #0
 8009c72:	709a      	strb	r2, [r3, #2]
 8009c74:	2200      	movs	r2, #0
 8009c76:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f042 0201 	orr.w	r2, r2, #1
 8009c80:	711a      	strb	r2, [r3, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	715a      	strb	r2, [r3, #5]
 8009c86:	2200      	movs	r2, #0
 8009c88:	719a      	strb	r2, [r3, #6]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009c94:	f005 fc3e 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009c98:	f005 fc24 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009c9c:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	b2db      	uxtb	r3, r3
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009cb4:	f005 fc6c 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009cb8:	f005 fc08 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009cbc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f062 0253 	orn	r2, r2, #83	; 0x53
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	705a      	strb	r2, [r3, #1]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	709a      	strb	r2, [r3, #2]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f042 0201 	orr.w	r2, r2, #1
 8009cdc:	711a      	strb	r2, [r3, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	715a      	strb	r2, [r3, #5]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	719a      	strb	r2, [r3, #6]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009cf0:	f005 fc10 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009cf4:	f005 fbf6 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009cf8:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	689b      	ldr	r3, [r3, #8]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8009d10:	f005 fc3e 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d14:	f005 fbda 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009d18:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f062 0259 	orn	r2, r2, #89	; 0x59
 8009d22:	701a      	strb	r2, [r3, #0]
 8009d24:	2200      	movs	r2, #0
 8009d26:	705a      	strb	r2, [r3, #1]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	709a      	strb	r2, [r3, #2]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f042 0201 	orr.w	r2, r2, #1
 8009d38:	711a      	strb	r2, [r3, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	715a      	strb	r2, [r3, #5]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	719a      	strb	r2, [r3, #6]
 8009d42:	2200      	movs	r2, #0
 8009d44:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009d4c:	f005 fbe2 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d50:	f005 fbc8 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d54:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	689b      	ldr	r3, [r3, #8]

}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b086      	sub	sp, #24
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	60b9      	str	r1, [r7, #8]
 8009d6c:	607a      	str	r2, [r7, #4]
 8009d6e:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8009d70:	f005 fc0e 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d74:	f005 fbaa 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009d78:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f062 0258 	orn	r2, r2, #88	; 0x58
 8009d82:	701a      	strb	r2, [r3, #0]
 8009d84:	2200      	movs	r2, #0
 8009d86:	705a      	strb	r2, [r3, #1]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	709a      	strb	r2, [r3, #2]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f042 0203 	orr.w	r2, r2, #3
 8009d98:	711a      	strb	r2, [r3, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	715a      	strb	r2, [r3, #5]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	719a      	strb	r2, [r3, #6]
 8009da2:	2200      	movs	r2, #0
 8009da4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8009db8:	6a3a      	ldr	r2, [r7, #32]
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8009dbe:	f005 fba9 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009dc2:	f005 fb8f 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009dc6:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	b2db      	uxtb	r3, r3
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	460b      	mov	r3, r1
 8009de0:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8009de2:	f005 fbd5 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009de6:	f005 fb71 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009dea:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8009df4:	701a      	strb	r2, [r3, #0]
 8009df6:	2200      	movs	r2, #0
 8009df8:	705a      	strb	r2, [r3, #1]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	709a      	strb	r2, [r3, #2]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f042 0201 	orr.w	r2, r2, #1
 8009e0a:	711a      	strb	r2, [r3, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	715a      	strb	r2, [r3, #5]
 8009e10:	2200      	movs	r2, #0
 8009e12:	719a      	strb	r2, [r3, #6]
 8009e14:	2200      	movs	r2, #0
 8009e16:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8009e18:	887a      	ldrh	r2, [r7, #2]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009e1e:	f005 fb79 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e22:	f005 fb5f 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e26:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	b2db      	uxtb	r3, r3
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8009e40:	f005 fba6 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e44:	f005 fb42 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009e48:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f062 0249 	orn	r2, r2, #73	; 0x49
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	2200      	movs	r2, #0
 8009e56:	705a      	strb	r2, [r3, #1]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	709a      	strb	r2, [r3, #2]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f042 0201 	orr.w	r2, r2, #1
 8009e68:	711a      	strb	r2, [r3, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	715a      	strb	r2, [r3, #5]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	719a      	strb	r2, [r3, #6]
 8009e72:	2200      	movs	r2, #0
 8009e74:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009e7c:	f005 fb4a 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e80:	f005 fb30 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e84:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	b2db      	uxtb	r3, r3
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8009ea0:	f005 fb76 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009ea4:	f005 fb12 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009ea8:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f062 0257 	orn	r2, r2, #87	; 0x57
 8009eb2:	701a      	strb	r2, [r3, #0]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	705a      	strb	r2, [r3, #1]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	709a      	strb	r2, [r3, #2]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f042 0202 	orr.w	r2, r2, #2
 8009ec8:	711a      	strb	r2, [r3, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	715a      	strb	r2, [r3, #5]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	719a      	strb	r2, [r3, #6]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8009ee2:	f005 fb17 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ee6:	f005 fafd 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009eea:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	b2db      	uxtb	r3, r3
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8009f00:	f005 fb46 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f04:	f005 fae2 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009f08:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	2200      	movs	r2, #0
 8009f16:	705a      	strb	r2, [r3, #1]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	709a      	strb	r2, [r3, #2]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	711a      	strb	r2, [r3, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	715a      	strb	r2, [r3, #5]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	719a      	strb	r2, [r3, #6]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8009f32:	f005 faef 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f36:	f005 fad5 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f3a:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	689b      	ldr	r3, [r3, #8]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8009f50:	f005 fb1e 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f54:	f005 faba 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009f58:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f062 0269 	orn	r2, r2, #105	; 0x69
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	2200      	movs	r2, #0
 8009f66:	705a      	strb	r2, [r3, #1]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	709a      	strb	r2, [r3, #2]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	711a      	strb	r2, [r3, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	715a      	strb	r2, [r3, #5]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	719a      	strb	r2, [r3, #6]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8009f82:	f005 fac7 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f86:	f005 faad 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f8a:	60f8      	str	r0, [r7, #12]
}
 8009f8c:	bf00      	nop
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8009fa0:	f005 faf6 	bl	800f590 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8009fa4:	4a15      	ldr	r2, [pc, #84]	; (8009ffc <otSetStateChangedCallback+0x68>)
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009faa:	f005 fa8f 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 8009fae:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f062 0268 	orn	r2, r2, #104	; 0x68
 8009fb8:	701a      	strb	r2, [r3, #0]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	705a      	strb	r2, [r3, #1]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	709a      	strb	r2, [r3, #2]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f042 0201 	orr.w	r2, r2, #1
 8009fce:	711a      	strb	r2, [r3, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	715a      	strb	r2, [r3, #5]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	719a      	strb	r2, [r3, #6]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009fe2:	f005 fa97 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009fe6:	f005 fa7d 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009fea:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	b2db      	uxtb	r3, r3
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	200002ec 	.word	0x200002ec

0800a000 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a008:	f005 fac2 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a00c:	f005 fa5e 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a010:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f062 0264 	orn	r2, r2, #100	; 0x64
 800a01a:	701a      	strb	r2, [r3, #0]
 800a01c:	2200      	movs	r2, #0
 800a01e:	705a      	strb	r2, [r3, #1]
 800a020:	2200      	movs	r2, #0
 800a022:	709a      	strb	r2, [r3, #2]
 800a024:	2200      	movs	r2, #0
 800a026:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	711a      	strb	r2, [r3, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	715a      	strb	r2, [r3, #5]
 800a032:	2200      	movs	r2, #0
 800a034:	719a      	strb	r2, [r3, #6]
 800a036:	2200      	movs	r2, #0
 800a038:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800a03a:	f005 fa6b 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a03e:	f005 fa51 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a042:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	b2db      	uxtb	r3, r3
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	460b      	mov	r3, r1
 800a05c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a05e:	f005 fa97 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a062:	f005 fa33 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a066:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	2200      	movs	r2, #0
 800a074:	705a      	strb	r2, [r3, #1]
 800a076:	2200      	movs	r2, #0
 800a078:	709a      	strb	r2, [r3, #2]
 800a07a:	2200      	movs	r2, #0
 800a07c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f042 0201 	orr.w	r2, r2, #1
 800a086:	711a      	strb	r2, [r3, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	715a      	strb	r2, [r3, #5]
 800a08c:	2200      	movs	r2, #0
 800a08e:	719a      	strb	r2, [r3, #6]
 800a090:	2200      	movs	r2, #0
 800a092:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a094:	78fa      	ldrb	r2, [r7, #3]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a09a:	f005 fa3b 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a09e:	f005 fa21 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a0a2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	b2db      	uxtb	r3, r3
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a0ba:	f005 fa69 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a0be:	f005 fa05 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a0c2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800a0cc:	701a      	strb	r2, [r3, #0]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	705a      	strb	r2, [r3, #1]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	709a      	strb	r2, [r3, #2]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	711a      	strb	r2, [r3, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	715a      	strb	r2, [r3, #5]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	719a      	strb	r2, [r3, #6]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a0ec:	f005 fa12 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a0f0:	f005 f9f8 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a0f4:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bf14      	ite	ne
 800a0fe:	2301      	movne	r3, #1
 800a100:	2300      	moveq	r3, #0
 800a102:	b2db      	uxtb	r3, r3
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a114:	f005 fa3c 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a118:	f005 f9d8 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a11c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800a126:	701a      	strb	r2, [r3, #0]
 800a128:	2200      	movs	r2, #0
 800a12a:	705a      	strb	r2, [r3, #1]
 800a12c:	2200      	movs	r2, #0
 800a12e:	709a      	strb	r2, [r3, #2]
 800a130:	2200      	movs	r2, #0
 800a132:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	711a      	strb	r2, [r3, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	715a      	strb	r2, [r3, #5]
 800a13e:	2200      	movs	r2, #0
 800a140:	719a      	strb	r2, [r3, #6]
 800a142:	2200      	movs	r2, #0
 800a144:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a146:	f005 f9e5 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a14a:	f005 f9cb 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a14e:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	689b      	ldr	r3, [r3, #8]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a164:	f005 fa14 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a168:	f005 f9b0 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a16c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	2200      	movs	r2, #0
 800a17a:	705a      	strb	r2, [r3, #1]
 800a17c:	2200      	movs	r2, #0
 800a17e:	709a      	strb	r2, [r3, #2]
 800a180:	2200      	movs	r2, #0
 800a182:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	711a      	strb	r2, [r3, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	715a      	strb	r2, [r3, #5]
 800a18e:	2200      	movs	r2, #0
 800a190:	719a      	strb	r2, [r3, #6]
 800a192:	2200      	movs	r2, #0
 800a194:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a196:	f005 f9bd 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a19a:	f005 f9a3 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a19e:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	689b      	ldr	r3, [r3, #8]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a1b6:	f005 f9eb 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a1ba:	f005 f987 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a1be:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	705a      	strb	r2, [r3, #1]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	709a      	strb	r2, [r3, #2]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f042 0202 	orr.w	r2, r2, #2
 800a1de:	711a      	strb	r2, [r3, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	715a      	strb	r2, [r3, #5]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	719a      	strb	r2, [r3, #6]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a1f8:	f005 f98c 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a1fc:	f005 f972 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a200:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	b2db      	uxtb	r3, r3
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a21c:	f005 f9b8 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a220:	f005 f954 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a224:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f042 0208 	orr.w	r2, r2, #8
 800a22e:	701a      	strb	r2, [r3, #0]
 800a230:	2200      	movs	r2, #0
 800a232:	705a      	strb	r2, [r3, #1]
 800a234:	2200      	movs	r2, #0
 800a236:	709a      	strb	r2, [r3, #2]
 800a238:	2200      	movs	r2, #0
 800a23a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f042 0201 	orr.w	r2, r2, #1
 800a244:	711a      	strb	r2, [r3, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	715a      	strb	r2, [r3, #5]
 800a24a:	2200      	movs	r2, #0
 800a24c:	719a      	strb	r2, [r3, #6]
 800a24e:	2200      	movs	r2, #0
 800a250:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800a252:	78fa      	ldrb	r2, [r7, #3]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a258:	f005 f95c 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a25c:	f005 f942 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a260:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	b2db      	uxtb	r3, r3
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a27c:	f005 f988 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a280:	f005 f924 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a284:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f042 020f 	orr.w	r2, r2, #15
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	2200      	movs	r2, #0
 800a292:	705a      	strb	r2, [r3, #1]
 800a294:	2200      	movs	r2, #0
 800a296:	709a      	strb	r2, [r3, #2]
 800a298:	2200      	movs	r2, #0
 800a29a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f042 0201 	orr.w	r2, r2, #1
 800a2a4:	711a      	strb	r2, [r3, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	715a      	strb	r2, [r3, #5]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	719a      	strb	r2, [r3, #6]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800a2b2:	887a      	ldrh	r2, [r7, #2]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a2b8:	f005 f92c 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a2bc:	f005 f912 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a2c0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	b2db      	uxtb	r3, r3
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a2d8:	f005 f95a 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a2dc:	f005 f8f6 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a2e0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f062 0246 	orn	r2, r2, #70	; 0x46
 800a2ea:	701a      	strb	r2, [r3, #0]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	705a      	strb	r2, [r3, #1]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	709a      	strb	r2, [r3, #2]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f042 0201 	orr.w	r2, r2, #1
 800a300:	711a      	strb	r2, [r3, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	715a      	strb	r2, [r3, #5]
 800a306:	2200      	movs	r2, #0
 800a308:	719a      	strb	r2, [r3, #6]
 800a30a:	2200      	movs	r2, #0
 800a30c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a314:	f005 f8fe 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a318:	f005 f8e4 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a31c:	60f8      	str	r0, [r7, #12]
}
 800a31e:	bf00      	nop
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a32e:	f005 f92f 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a332:	f005 f8cb 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a336:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f062 0243 	orn	r2, r2, #67	; 0x43
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	2200      	movs	r2, #0
 800a344:	705a      	strb	r2, [r3, #1]
 800a346:	2200      	movs	r2, #0
 800a348:	709a      	strb	r2, [r3, #2]
 800a34a:	2200      	movs	r2, #0
 800a34c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f042 0201 	orr.w	r2, r2, #1
 800a356:	711a      	strb	r2, [r3, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	715a      	strb	r2, [r3, #5]
 800a35c:	2200      	movs	r2, #0
 800a35e:	719a      	strb	r2, [r3, #6]
 800a360:	2200      	movs	r2, #0
 800a362:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a36a:	f005 f8d3 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a36e:	f005 f8b9 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a372:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	b29b      	uxth	r3, r3
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b086      	sub	sp, #24
 800a386:	af00      	add	r7, sp, #0
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	4613      	mov	r3, r2
 800a38e:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800a390:	f005 f8fe 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a394:	f005 f89a 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a398:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800a3a2:	701a      	strb	r2, [r3, #0]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	705a      	strb	r2, [r3, #1]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	709a      	strb	r2, [r3, #2]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f042 0203 	orr.w	r2, r2, #3
 800a3b8:	711a      	strb	r2, [r3, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	715a      	strb	r2, [r3, #5]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	719a      	strb	r2, [r3, #6]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800a3d2:	88fa      	ldrh	r2, [r7, #6]
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800a3d8:	f005 f89c 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a3dc:	f005 f882 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a3e0:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	b2db      	uxtb	r3, r3
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	607a      	str	r2, [r7, #4]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	817b      	strh	r3, [r7, #10]
 800a400:	4613      	mov	r3, r2
 800a402:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800a404:	f005 f8c4 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a408:	f005 f860 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a40c:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2200      	movs	r2, #0
 800a412:	f062 023d 	orn	r2, r2, #61	; 0x3d
 800a416:	701a      	strb	r2, [r3, #0]
 800a418:	2200      	movs	r2, #0
 800a41a:	705a      	strb	r2, [r3, #1]
 800a41c:	2200      	movs	r2, #0
 800a41e:	709a      	strb	r2, [r3, #2]
 800a420:	2200      	movs	r2, #0
 800a422:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2200      	movs	r2, #0
 800a428:	f042 0204 	orr.w	r2, r2, #4
 800a42c:	711a      	strb	r2, [r3, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	715a      	strb	r2, [r3, #5]
 800a432:	2200      	movs	r2, #0
 800a434:	719a      	strb	r2, [r3, #6]
 800a436:	2200      	movs	r2, #0
 800a438:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800a440:	897a      	ldrh	r2, [r7, #10]
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800a44c:	893a      	ldrh	r2, [r7, #8]
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800a452:	f005 f85f 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a456:	f005 f845 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a45a:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	689b      	ldr	r3, [r3, #8]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800a468:	b5b0      	push	{r4, r5, r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800a472:	f005 f843 	bl	800f4fc <THREAD_Get_NotificationPayloadBuffer>
 800a476:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3b01      	subs	r3, #1
 800a47e:	2b17      	cmp	r3, #23
 800a480:	f200 81c3 	bhi.w	800a80a <OpenThread_CallBack_Processing+0x3a2>
 800a484:	a201      	add	r2, pc, #4	; (adr r2, 800a48c <OpenThread_CallBack_Processing+0x24>)
 800a486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48a:	bf00      	nop
 800a48c:	0800a4ed 	.word	0x0800a4ed
 800a490:	0800a509 	.word	0x0800a509
 800a494:	0800a56d 	.word	0x0800a56d
 800a498:	0800a5b5 	.word	0x0800a5b5
 800a49c:	0800a5c1 	.word	0x0800a5c1
 800a4a0:	0800a5df 	.word	0x0800a5df
 800a4a4:	0800a5fd 	.word	0x0800a5fd
 800a4a8:	0800a61b 	.word	0x0800a61b
 800a4ac:	0800a639 	.word	0x0800a639
 800a4b0:	0800a657 	.word	0x0800a657
 800a4b4:	0800a679 	.word	0x0800a679
 800a4b8:	0800a697 	.word	0x0800a697
 800a4bc:	0800a80b 	.word	0x0800a80b
 800a4c0:	0800a6bd 	.word	0x0800a6bd
 800a4c4:	0800a6f1 	.word	0x0800a6f1
 800a4c8:	0800a719 	.word	0x0800a719
 800a4cc:	0800a737 	.word	0x0800a737
 800a4d0:	0800a7a5 	.word	0x0800a7a5
 800a4d4:	0800a7cd 	.word	0x0800a7cd
 800a4d8:	0800a80b 	.word	0x0800a80b
 800a4dc:	0800a7eb 	.word	0x0800a7eb
 800a4e0:	0800a80b 	.word	0x0800a80b
 800a4e4:	0800a80b 	.word	0x0800a80b
 800a4e8:	0800a545 	.word	0x0800a545
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800a4ec:	4b9b      	ldr	r3, [pc, #620]	; (800a75c <OpenThread_CallBack_Processing+0x2f4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f000 818d 	beq.w	800a810 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a4f6:	4b99      	ldr	r3, [pc, #612]	; (800a75c <OpenThread_CallBack_Processing+0x2f4>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a502:	4611      	mov	r1, r2
 800a504:	4798      	blx	r3
        }
        break;
 800a506:	e183      	b.n	800a810 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	461a      	mov	r2, r3
 800a50e:	4b94      	ldr	r3, [pc, #592]	; (800a760 <OpenThread_CallBack_Processing+0x2f8>)
 800a510:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800a512:	4b93      	ldr	r3, [pc, #588]	; (800a760 <OpenThread_CallBack_Processing+0x2f8>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	4a92      	ldr	r2, [pc, #584]	; (800a764 <OpenThread_CallBack_Processing+0x2fc>)
 800a51a:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800a51c:	4b91      	ldr	r3, [pc, #580]	; (800a764 <OpenThread_CallBack_Processing+0x2fc>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 8177 	beq.w	800a814 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a526:	4b8f      	ldr	r3, [pc, #572]	; (800a764 <OpenThread_CallBack_Processing+0x2fc>)
 800a528:	681c      	ldr	r4, [r3, #0]
 800a52a:	4b8d      	ldr	r3, [pc, #564]	; (800a760 <OpenThread_CallBack_Processing+0x2f8>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a534:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a53a:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800a540:	47a0      	blx	r4
        }
        break;
 800a542:	e167      	b.n	800a814 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800a544:	4b88      	ldr	r3, [pc, #544]	; (800a768 <OpenThread_CallBack_Processing+0x300>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 8165 	beq.w	800a818 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a54e:	4b86      	ldr	r3, [pc, #536]	; (800a768 <OpenThread_CallBack_Processing+0x300>)
 800a550:	681c      	ldr	r4, [r3, #0]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a55c:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a562:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a568:	47a0      	blx	r4
        }
        break;
 800a56a:	e155      	b.n	800a818 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	461a      	mov	r2, r3
 800a572:	4b7e      	ldr	r3, [pc, #504]	; (800a76c <OpenThread_CallBack_Processing+0x304>)
 800a574:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800a576:	4b7d      	ldr	r3, [pc, #500]	; (800a76c <OpenThread_CallBack_Processing+0x304>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	4a7c      	ldr	r2, [pc, #496]	; (800a770 <OpenThread_CallBack_Processing+0x308>)
 800a57e:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800a580:	4b7b      	ldr	r3, [pc, #492]	; (800a770 <OpenThread_CallBack_Processing+0x308>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 8149 	beq.w	800a81c <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a58a:	4b79      	ldr	r3, [pc, #484]	; (800a770 <OpenThread_CallBack_Processing+0x308>)
 800a58c:	681c      	ldr	r4, [r3, #0]
 800a58e:	4b77      	ldr	r3, [pc, #476]	; (800a76c <OpenThread_CallBack_Processing+0x304>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a598:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a59e:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a5a4:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	47a0      	blx	r4
        }
        break;
 800a5b2:	e133      	b.n	800a81c <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	f7fe fd00 	bl	8008fba <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800a5ba:	f7f7 fe20 	bl	80021fe <HAL_NVIC_SystemReset>
        break;
 800a5be:	e14c      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800a5c0:	4b6c      	ldr	r3, [pc, #432]	; (800a774 <OpenThread_CallBack_Processing+0x30c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 812b 	beq.w	800a820 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a5ca:	4b6a      	ldr	r3, [pc, #424]	; (800a774 <OpenThread_CallBack_Processing+0x30c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	6892      	ldr	r2, [r2, #8]
 800a5d2:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a5d8:	4611      	mov	r1, r2
 800a5da:	4798      	blx	r3
        }
        break;
 800a5dc:	e120      	b.n	800a820 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800a5de:	4b66      	ldr	r3, [pc, #408]	; (800a778 <OpenThread_CallBack_Processing+0x310>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 811e 	beq.w	800a824 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a5e8:	4b63      	ldr	r3, [pc, #396]	; (800a778 <OpenThread_CallBack_Processing+0x310>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	6892      	ldr	r2, [r2, #8]
 800a5f0:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	4798      	blx	r3
        }
        break;
 800a5fa:	e113      	b.n	800a824 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800a5fc:	4b5f      	ldr	r3, [pc, #380]	; (800a77c <OpenThread_CallBack_Processing+0x314>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 8111 	beq.w	800a828 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a606:	4b5d      	ldr	r3, [pc, #372]	; (800a77c <OpenThread_CallBack_Processing+0x314>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	6892      	ldr	r2, [r2, #8]
 800a60e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a614:	4611      	mov	r1, r2
 800a616:	4798      	blx	r3
        }
        break;
 800a618:	e106      	b.n	800a828 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800a61a:	4b59      	ldr	r3, [pc, #356]	; (800a780 <OpenThread_CallBack_Processing+0x318>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 8104 	beq.w	800a82c <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a624:	4b56      	ldr	r3, [pc, #344]	; (800a780 <OpenThread_CallBack_Processing+0x318>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	6892      	ldr	r2, [r2, #8]
 800a62c:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a62e:	683a      	ldr	r2, [r7, #0]
 800a630:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a632:	4611      	mov	r1, r2
 800a634:	4798      	blx	r3
        }
        break;
 800a636:	e0f9      	b.n	800a82c <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800a638:	4b52      	ldr	r3, [pc, #328]	; (800a784 <OpenThread_CallBack_Processing+0x31c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80f7 	beq.w	800a830 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a642:	4b50      	ldr	r3, [pc, #320]	; (800a784 <OpenThread_CallBack_Processing+0x31c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	6892      	ldr	r2, [r2, #8]
 800a64a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a650:	4611      	mov	r1, r2
 800a652:	4798      	blx	r3
        }
        break;
 800a654:	e0ec      	b.n	800a830 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800a656:	4b4c      	ldr	r3, [pc, #304]	; (800a788 <OpenThread_CallBack_Processing+0x320>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 80ea 	beq.w	800a834 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a660:	4b49      	ldr	r3, [pc, #292]	; (800a788 <OpenThread_CallBack_Processing+0x320>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	6892      	ldr	r2, [r2, #8]
 800a668:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a66e:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a674:	4798      	blx	r3
        }
        break;
 800a676:	e0dd      	b.n	800a834 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800a678:	4b44      	ldr	r3, [pc, #272]	; (800a78c <OpenThread_CallBack_Processing+0x324>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 80db 	beq.w	800a838 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a682:	4b42      	ldr	r3, [pc, #264]	; (800a78c <OpenThread_CallBack_Processing+0x324>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	6892      	ldr	r2, [r2, #8]
 800a68a:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a690:	4611      	mov	r1, r2
 800a692:	4798      	blx	r3
        }
        break;
 800a694:	e0d0      	b.n	800a838 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800a696:	4b3e      	ldr	r3, [pc, #248]	; (800a790 <OpenThread_CallBack_Processing+0x328>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 80ce 	beq.w	800a83c <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a6a0:	4b3b      	ldr	r3, [pc, #236]	; (800a790 <OpenThread_CallBack_Processing+0x328>)
 800a6a2:	681c      	ldr	r4, [r3, #0]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a6ac:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a6b2:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a6b8:	47a0      	blx	r4
        }
        break;
 800a6ba:	e0bf      	b.n	800a83c <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800a6bc:	4b35      	ldr	r3, [pc, #212]	; (800a794 <OpenThread_CallBack_Processing+0x32c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 80bd 	beq.w	800a840 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a6c6:	4b33      	ldr	r3, [pc, #204]	; (800a794 <OpenThread_CallBack_Processing+0x32c>)
 800a6c8:	681c      	ldr	r4, [r3, #0]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a6d4:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a6da:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	462a      	mov	r2, r5
 800a6ec:	47a0      	blx	r4
        }
        break;
 800a6ee:	e0a7      	b.n	800a840 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800a6f0:	4b29      	ldr	r3, [pc, #164]	; (800a798 <OpenThread_CallBack_Processing+0x330>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 80a5 	beq.w	800a844 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a6fa:	4b27      	ldr	r3, [pc, #156]	; (800a798 <OpenThread_CallBack_Processing+0x330>)
 800a6fc:	681c      	ldr	r4, [r3, #0]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a708:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a70e:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a714:	47a0      	blx	r4
        }
        break;
 800a716:	e095      	b.n	800a844 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800a718:	4b20      	ldr	r3, [pc, #128]	; (800a79c <OpenThread_CallBack_Processing+0x334>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 8093 	beq.w	800a848 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800a722:	4b1e      	ldr	r3, [pc, #120]	; (800a79c <OpenThread_CallBack_Processing+0x334>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	6892      	ldr	r2, [r2, #8]
 800a72a:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800a730:	4611      	mov	r1, r2
 800a732:	4798      	blx	r3
        }
        break;
 800a734:	e088      	b.n	800a848 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800a736:	4b1a      	ldr	r3, [pc, #104]	; (800a7a0 <OpenThread_CallBack_Processing+0x338>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8086 	beq.w	800a84c <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a740:	4b17      	ldr	r3, [pc, #92]	; (800a7a0 <OpenThread_CallBack_Processing+0x338>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	6892      	ldr	r2, [r2, #8]
 800a748:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a74e:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a754:	b2d2      	uxtb	r2, r2
 800a756:	4798      	blx	r3
        }
        break;
 800a758:	e078      	b.n	800a84c <OpenThread_CallBack_Processing+0x3e4>
 800a75a:	bf00      	nop
 800a75c:	200002ec 	.word	0x200002ec
 800a760:	20004e60 	.word	0x20004e60
 800a764:	2000032c 	.word	0x2000032c
 800a768:	20000330 	.word	0x20000330
 800a76c:	20004e5c 	.word	0x20004e5c
 800a770:	20000334 	.word	0x20000334
 800a774:	200002f4 	.word	0x200002f4
 800a778:	200002f0 	.word	0x200002f0
 800a77c:	200002f8 	.word	0x200002f8
 800a780:	200002fc 	.word	0x200002fc
 800a784:	20000300 	.word	0x20000300
 800a788:	20000304 	.word	0x20000304
 800a78c:	20000308 	.word	0x20000308
 800a790:	2000030c 	.word	0x2000030c
 800a794:	20000310 	.word	0x20000310
 800a798:	20000314 	.word	0x20000314
 800a79c:	20000318 	.word	0x20000318
 800a7a0:	2000031c 	.word	0x2000031c
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800a7a4:	4b30      	ldr	r3, [pc, #192]	; (800a868 <OpenThread_CallBack_Processing+0x400>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d051      	beq.n	800a850 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a7ac:	4b2e      	ldr	r3, [pc, #184]	; (800a868 <OpenThread_CallBack_Processing+0x400>)
 800a7ae:	681c      	ldr	r4, [r3, #0]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a7ba:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a7c0:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	47a0      	blx	r4
        }
        break;
 800a7ca:	e041      	b.n	800a850 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800a7cc:	4b27      	ldr	r3, [pc, #156]	; (800a86c <OpenThread_CallBack_Processing+0x404>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d03f      	beq.n	800a854 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a7d4:	4b25      	ldr	r3, [pc, #148]	; (800a86c <OpenThread_CallBack_Processing+0x404>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	6892      	ldr	r2, [r2, #8]
 800a7dc:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a7e2:	b252      	sxtb	r2, r2
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4798      	blx	r3
        }
        break;
 800a7e8:	e034      	b.n	800a854 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800a7ea:	4b21      	ldr	r3, [pc, #132]	; (800a870 <OpenThread_CallBack_Processing+0x408>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d032      	beq.n	800a858 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a7f2:	4b1f      	ldr	r3, [pc, #124]	; (800a870 <OpenThread_CallBack_Processing+0x408>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	6892      	ldr	r2, [r2, #8]
 800a7fa:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a800:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800a806:	4798      	blx	r3
        }
        break;
 800a808:	e026      	b.n	800a858 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	71fb      	strb	r3, [r7, #7]
        break;
 800a80e:	e024      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a810:	bf00      	nop
 800a812:	e022      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a814:	bf00      	nop
 800a816:	e020      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a818:	bf00      	nop
 800a81a:	e01e      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a81c:	bf00      	nop
 800a81e:	e01c      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a820:	bf00      	nop
 800a822:	e01a      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a824:	bf00      	nop
 800a826:	e018      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a828:	bf00      	nop
 800a82a:	e016      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a82c:	bf00      	nop
 800a82e:	e014      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a830:	bf00      	nop
 800a832:	e012      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a834:	bf00      	nop
 800a836:	e010      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a838:	bf00      	nop
 800a83a:	e00e      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a83c:	bf00      	nop
 800a83e:	e00c      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a840:	bf00      	nop
 800a842:	e00a      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a844:	bf00      	nop
 800a846:	e008      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a848:	bf00      	nop
 800a84a:	e006      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a84c:	bf00      	nop
 800a84e:	e004      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a850:	bf00      	nop
 800a852:	e002      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a854:	bf00      	nop
 800a856:	e000      	b.n	800a85a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800a858:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800a85a:	f7fe fed9 	bl	8009610 <TL_THREAD_SendAck>
    return status;
 800a85e:	79fb      	ldrb	r3, [r7, #7]

}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bdb0      	pop	{r4, r5, r7, pc}
 800a868:	20000320 	.word	0x20000320
 800a86c:	20000324 	.word	0x20000324
 800a870:	20000328 	.word	0x20000328

0800a874 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800a880:	f004 fe86 	bl	800f590 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a884:	f004 fe22 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a888:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800a892:	701a      	strb	r2, [r3, #0]
 800a894:	2200      	movs	r2, #0
 800a896:	f042 0201 	orr.w	r2, r2, #1
 800a89a:	705a      	strb	r2, [r3, #1]
 800a89c:	2200      	movs	r2, #0
 800a89e:	709a      	strb	r2, [r3, #2]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f042 0201 	orr.w	r2, r2, #1
 800a8ac:	711a      	strb	r2, [r3, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	715a      	strb	r2, [r3, #5]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	719a      	strb	r2, [r3, #6]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800a8ba:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a8c2:	f004 fe27 	bl	800f514 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a8c6:	f004 fe0d 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a8ca:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	b2db      	uxtb	r3, r3
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a8e6:	f004 fe53 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a8ea:	f004 fdef 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a8ee:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	705a      	strb	r2, [r3, #1]
 800a8fe:	2200      	movs	r2, #0
 800a900:	709a      	strb	r2, [r3, #2]
 800a902:	2200      	movs	r2, #0
 800a904:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	f042 0201 	orr.w	r2, r2, #1
 800a90e:	711a      	strb	r2, [r3, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	715a      	strb	r2, [r3, #5]
 800a914:	2200      	movs	r2, #0
 800a916:	719a      	strb	r2, [r3, #6]
 800a918:	2200      	movs	r2, #0
 800a91a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a91c:	78fa      	ldrb	r2, [r7, #3]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a922:	f004 fdf7 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a926:	f004 fddd 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a92a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	b2db      	uxtb	r3, r3
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a944:	f004 fe24 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a948:	f004 fdc0 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a94c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	2200      	movs	r2, #0
 800a95a:	705a      	strb	r2, [r3, #1]
 800a95c:	2200      	movs	r2, #0
 800a95e:	709a      	strb	r2, [r3, #2]
 800a960:	2200      	movs	r2, #0
 800a962:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f042 0201 	orr.w	r2, r2, #1
 800a96c:	711a      	strb	r2, [r3, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	715a      	strb	r2, [r3, #5]
 800a972:	2200      	movs	r2, #0
 800a974:	719a      	strb	r2, [r3, #6]
 800a976:	2200      	movs	r2, #0
 800a978:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a980:	f004 fdc8 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a984:	f004 fdae 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a988:	60f8      	str	r0, [r7, #12]
}
 800a98a:	bf00      	nop
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <otThreadGetMeshLocalEid>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a99a:	f004 fdf9 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a99e:	f004 fd95 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a9a2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 800a9ac:	701a      	strb	r2, [r3, #0]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	705a      	strb	r2, [r3, #1]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	709a      	strb	r2, [r3, #2]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	711a      	strb	r2, [r3, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	715a      	strb	r2, [r3, #5]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	719a      	strb	r2, [r3, #6]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a9cc:	f004 fda2 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a9d0:	f004 fd88 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a9d4:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	689b      	ldr	r3, [r3, #8]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a9ea:	f004 fdd1 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a9ee:	f004 fd6d 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800a9f2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 800a9fc:	701a      	strb	r2, [r3, #0]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	705a      	strb	r2, [r3, #1]
 800aa02:	2200      	movs	r2, #0
 800aa04:	709a      	strb	r2, [r3, #2]
 800aa06:	2200      	movs	r2, #0
 800aa08:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	711a      	strb	r2, [r3, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	715a      	strb	r2, [r3, #5]
 800aa14:	2200      	movs	r2, #0
 800aa16:	719a      	strb	r2, [r3, #6]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800aa1c:	f004 fd7a 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aa20:	f004 fd60 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aa24:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	689b      	ldr	r3, [r3, #8]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800aa3c:	f004 fda8 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aa40:	f004 fd44 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800aa44:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800aa4e:	701a      	strb	r2, [r3, #0]
 800aa50:	2200      	movs	r2, #0
 800aa52:	705a      	strb	r2, [r3, #1]
 800aa54:	2200      	movs	r2, #0
 800aa56:	709a      	strb	r2, [r3, #2]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f042 0201 	orr.w	r2, r2, #1
 800aa64:	711a      	strb	r2, [r3, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	715a      	strb	r2, [r3, #5]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	719a      	strb	r2, [r3, #6]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800aa78:	f004 fd4c 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aa7c:	f004 fd32 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aa80:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	b2db      	uxtb	r3, r3
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800aa98:	f004 fd7a 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aa9c:	f004 fd16 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800aaa0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800aaaa:	701a      	strb	r2, [r3, #0]
 800aaac:	2200      	movs	r2, #0
 800aaae:	705a      	strb	r2, [r3, #1]
 800aab0:	2200      	movs	r2, #0
 800aab2:	709a      	strb	r2, [r3, #2]
 800aab4:	2200      	movs	r2, #0
 800aab6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	711a      	strb	r2, [r3, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	715a      	strb	r2, [r3, #5]
 800aac2:	2200      	movs	r2, #0
 800aac4:	719a      	strb	r2, [r3, #6]
 800aac6:	2200      	movs	r2, #0
 800aac8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800aaca:	f004 fd23 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aace:	f004 fd09 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aad2:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	b2db      	uxtb	r3, r3
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800aaea:	f004 fd51 	bl	800f590 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aaee:	f004 fced 	bl	800f4cc <THREAD_Get_OTCmdPayloadBuffer>
 800aaf2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800aafc:	701a      	strb	r2, [r3, #0]
 800aafe:	2200      	movs	r2, #0
 800ab00:	705a      	strb	r2, [r3, #1]
 800ab02:	2200      	movs	r2, #0
 800ab04:	709a      	strb	r2, [r3, #2]
 800ab06:	2200      	movs	r2, #0
 800ab08:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	711a      	strb	r2, [r3, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	715a      	strb	r2, [r3, #5]
 800ab14:	2200      	movs	r2, #0
 800ab16:	719a      	strb	r2, [r3, #6]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ab1c:	f004 fcfa 	bl	800f514 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ab20:	f004 fce0 	bl	800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ab24:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	b29b      	uxth	r3, r3
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	605a      	str	r2, [r3, #4]
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab60:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab62:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab66:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d102      	bne.n	800ab78 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800ab72:	2301      	movs	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]
 800ab76:	e001      	b.n	800ab7c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	75fb      	strb	r3, [r7, #23]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab9e:	f3ef 8310 	mrs	r3, PRIMASK
 800aba2:	60fb      	str	r3, [r7, #12]
  return(result);
 800aba4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aba6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aba8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	683a      	ldr	r2, [r7, #0]
 800abbc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	605a      	str	r2, [r3, #4]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800abd0:	bf00      	nop
 800abd2:	371c      	adds	r7, #28
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abe6:	f3ef 8310 	mrs	r3, PRIMASK
 800abea:	60fb      	str	r3, [r7, #12]
  return(result);
 800abec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abf0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac18:	bf00      	nop
 800ac1a:	371c      	adds	r7, #28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b087      	sub	sp, #28
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac30:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac32:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac36:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	6812      	ldr	r2, [r2, #0]
 800ac40:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6852      	ldr	r2, [r2, #4]
 800ac4a:	605a      	str	r2, [r3, #4]
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac56:	bf00      	nop
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b086      	sub	sp, #24
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac70:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac76:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7ff ffcd 	bl	800ac24 <LST_remove_node>
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac94:	bf00      	nop
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac9c:	b480      	push	{r7}
 800ac9e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800aca0:	bf00      	nop
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
	...

0800acac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acb2:	f3ef 8305 	mrs	r3, IPSR
 800acb6:	60bb      	str	r3, [r7, #8]
  return(result);
 800acb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10f      	bne.n	800acde <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acbe:	f3ef 8310 	mrs	r3, PRIMASK
 800acc2:	607b      	str	r3, [r7, #4]
  return(result);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d105      	bne.n	800acd6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acca:	f3ef 8311 	mrs	r3, BASEPRI
 800acce:	603b      	str	r3, [r7, #0]
  return(result);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d007      	beq.n	800ace6 <osKernelInitialize+0x3a>
 800acd6:	4b0e      	ldr	r3, [pc, #56]	; (800ad10 <osKernelInitialize+0x64>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d103      	bne.n	800ace6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800acde:	f06f 0305 	mvn.w	r3, #5
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	e00c      	b.n	800ad00 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ace6:	4b0a      	ldr	r3, [pc, #40]	; (800ad10 <osKernelInitialize+0x64>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d105      	bne.n	800acfa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acee:	4b08      	ldr	r3, [pc, #32]	; (800ad10 <osKernelInitialize+0x64>)
 800acf0:	2201      	movs	r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	e002      	b.n	800ad00 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800acfa:	f04f 33ff 	mov.w	r3, #4294967295
 800acfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ad00:	68fb      	ldr	r3, [r7, #12]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	20000338 	.word	0x20000338

0800ad14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad1a:	f3ef 8305 	mrs	r3, IPSR
 800ad1e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10f      	bne.n	800ad46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad26:	f3ef 8310 	mrs	r3, PRIMASK
 800ad2a:	607b      	str	r3, [r7, #4]
  return(result);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d105      	bne.n	800ad3e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad32:	f3ef 8311 	mrs	r3, BASEPRI
 800ad36:	603b      	str	r3, [r7, #0]
  return(result);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d007      	beq.n	800ad4e <osKernelStart+0x3a>
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <osKernelStart+0x68>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d103      	bne.n	800ad4e <osKernelStart+0x3a>
    stat = osErrorISR;
 800ad46:	f06f 0305 	mvn.w	r3, #5
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	e010      	b.n	800ad70 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad4e:	4b0b      	ldr	r3, [pc, #44]	; (800ad7c <osKernelStart+0x68>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d109      	bne.n	800ad6a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad56:	f7ff ffa1 	bl	800ac9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad5a:	4b08      	ldr	r3, [pc, #32]	; (800ad7c <osKernelStart+0x68>)
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad60:	f001 ffd8 	bl	800cd14 <vTaskStartScheduler>
      stat = osOK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	60fb      	str	r3, [r7, #12]
 800ad68:	e002      	b.n	800ad70 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ad6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ad70:	68fb      	ldr	r3, [r7, #12]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20000338 	.word	0x20000338

0800ad80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b090      	sub	sp, #64	; 0x40
 800ad84:	af04      	add	r7, sp, #16
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad90:	f3ef 8305 	mrs	r3, IPSR
 800ad94:	61fb      	str	r3, [r7, #28]
  return(result);
 800ad96:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f040 8090 	bne.w	800aebe <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad9e:	f3ef 8310 	mrs	r3, PRIMASK
 800ada2:	61bb      	str	r3, [r7, #24]
  return(result);
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d105      	bne.n	800adb6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800adaa:	f3ef 8311 	mrs	r3, BASEPRI
 800adae:	617b      	str	r3, [r7, #20]
  return(result);
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <osThreadNew+0x3e>
 800adb6:	4b44      	ldr	r3, [pc, #272]	; (800aec8 <osThreadNew+0x148>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d07f      	beq.n	800aebe <osThreadNew+0x13e>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d07c      	beq.n	800aebe <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800adc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adc8:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800adca:	2318      	movs	r3, #24
 800adcc:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800adce:	2300      	movs	r3, #0
 800add0:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800add2:	f04f 33ff 	mov.w	r3, #4294967295
 800add6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d045      	beq.n	800ae6a <osThreadNew+0xea>
      if (attr->name != NULL) {
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <osThreadNew+0x6c>
        name = attr->name;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d008      	beq.n	800ae12 <osThreadNew+0x92>
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	2b38      	cmp	r3, #56	; 0x38
 800ae04:	d805      	bhi.n	800ae12 <osThreadNew+0x92>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <osThreadNew+0x96>
        return (NULL);
 800ae12:	2300      	movs	r3, #0
 800ae14:	e054      	b.n	800aec0 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d003      	beq.n	800ae26 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	089b      	lsrs	r3, r3, #2
 800ae24:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00e      	beq.n	800ae4c <osThreadNew+0xcc>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	2b5b      	cmp	r3, #91	; 0x5b
 800ae34:	d90a      	bls.n	800ae4c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d006      	beq.n	800ae4c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <osThreadNew+0xcc>
        mem = 1;
 800ae46:	2301      	movs	r3, #1
 800ae48:	623b      	str	r3, [r7, #32]
 800ae4a:	e010      	b.n	800ae6e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10c      	bne.n	800ae6e <osThreadNew+0xee>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d108      	bne.n	800ae6e <osThreadNew+0xee>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d104      	bne.n	800ae6e <osThreadNew+0xee>
          mem = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	623b      	str	r3, [r7, #32]
 800ae68:	e001      	b.n	800ae6e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d110      	bne.n	800ae96 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae7c:	9202      	str	r2, [sp, #8]
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f001 fd70 	bl	800c970 <xTaskCreateStatic>
 800ae90:	4603      	mov	r3, r0
 800ae92:	613b      	str	r3, [r7, #16]
 800ae94:	e013      	b.n	800aebe <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d110      	bne.n	800aebe <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	f107 0310 	add.w	r3, r7, #16
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f001 fdb8 	bl	800ca24 <xTaskCreate>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d001      	beq.n	800aebe <osThreadNew+0x13e>
          hTask = NULL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aebe:	693b      	ldr	r3, [r7, #16]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3730      	adds	r7, #48	; 0x30
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20000338 	.word	0x20000338

0800aecc <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08a      	sub	sp, #40	; 0x28
 800aed0:	af02      	add	r7, sp, #8
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <osThreadFlagsSet+0x1a>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	da03      	bge.n	800aeee <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800aee6:	f06f 0303 	mvn.w	r3, #3
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e046      	b.n	800af7c <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800aeee:	f04f 33ff 	mov.w	r3, #4294967295
 800aef2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aef4:	f3ef 8305 	mrs	r3, IPSR
 800aef8:	61bb      	str	r3, [r7, #24]
  return(result);
 800aefa:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10f      	bne.n	800af20 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af00:	f3ef 8310 	mrs	r3, PRIMASK
 800af04:	617b      	str	r3, [r7, #20]
  return(result);
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d105      	bne.n	800af18 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af0c:	f3ef 8311 	mrs	r3, BASEPRI
 800af10:	613b      	str	r3, [r7, #16]
  return(result);
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d024      	beq.n	800af62 <osThreadFlagsSet+0x96>
 800af18:	4b1b      	ldr	r3, [pc, #108]	; (800af88 <osThreadFlagsSet+0xbc>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d120      	bne.n	800af62 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800af20:	2300      	movs	r3, #0
 800af22:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800af24:	f107 0308 	add.w	r3, r7, #8
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	2300      	movs	r3, #0
 800af2c:	2201      	movs	r2, #1
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	69f8      	ldr	r0, [r7, #28]
 800af32:	f002 fe2b 	bl	800db8c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800af36:	f107 020c 	add.w	r2, r7, #12
 800af3a:	2300      	movs	r3, #0
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	4613      	mov	r3, r2
 800af40:	2200      	movs	r2, #0
 800af42:	2100      	movs	r1, #0
 800af44:	69f8      	ldr	r0, [r7, #28]
 800af46:	f002 fe21 	bl	800db8c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d015      	beq.n	800af7c <osThreadFlagsSet+0xb0>
 800af50:	4b0e      	ldr	r3, [pc, #56]	; (800af8c <osThreadFlagsSet+0xc0>)
 800af52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	e00c      	b.n	800af7c <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800af62:	2300      	movs	r3, #0
 800af64:	2201      	movs	r2, #1
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	69f8      	ldr	r0, [r7, #28]
 800af6a:	f002 fd59 	bl	800da20 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800af6e:	f107 030c 	add.w	r3, r7, #12
 800af72:	2200      	movs	r2, #0
 800af74:	2100      	movs	r1, #0
 800af76:	69f8      	ldr	r0, [r7, #28]
 800af78:	f002 fd52 	bl	800da20 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800af7c:	68fb      	ldr	r3, [r7, #12]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3720      	adds	r7, #32
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20000338 	.word	0x20000338
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800af90:	b580      	push	{r7, lr}
 800af92:	b08e      	sub	sp, #56	; 0x38
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af9c:	f3ef 8305 	mrs	r3, IPSR
 800afa0:	61fb      	str	r3, [r7, #28]
  return(result);
 800afa2:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10f      	bne.n	800afc8 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa8:	f3ef 8310 	mrs	r3, PRIMASK
 800afac:	61bb      	str	r3, [r7, #24]
  return(result);
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d105      	bne.n	800afc0 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800afb4:	f3ef 8311 	mrs	r3, BASEPRI
 800afb8:	617b      	str	r3, [r7, #20]
  return(result);
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d007      	beq.n	800afd0 <osThreadFlagsWait+0x40>
 800afc0:	4b3c      	ldr	r3, [pc, #240]	; (800b0b4 <osThreadFlagsWait+0x124>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d103      	bne.n	800afd0 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800afc8:	f06f 0305 	mvn.w	r3, #5
 800afcc:	637b      	str	r3, [r7, #52]	; 0x34
 800afce:	e06b      	b.n	800b0a8 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	da03      	bge.n	800afde <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800afd6:	f06f 0303 	mvn.w	r3, #3
 800afda:	637b      	str	r3, [r7, #52]	; 0x34
 800afdc:	e064      	b.n	800b0a8 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	f003 0302 	and.w	r3, r3, #2
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d002      	beq.n	800afee <osThreadFlagsWait+0x5e>
      clear = 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	633b      	str	r3, [r7, #48]	; 0x30
 800afec:	e001      	b.n	800aff2 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800aff2:	2300      	movs	r3, #0
 800aff4:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800affa:	f001 ffd1 	bl	800cfa0 <xTaskGetTickCount>
 800affe:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800b000:	f107 0210 	add.w	r2, r7, #16
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b008:	2000      	movs	r0, #0
 800b00a:	f002 fcaf 	bl	800d96c <xTaskNotifyWait>
 800b00e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	2b01      	cmp	r3, #1
 800b014:	d137      	bne.n	800b086 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800b016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	4013      	ands	r3, r2
 800b01c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b022:	4313      	orrs	r3, r2
 800b024:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00c      	beq.n	800b04a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b034:	4013      	ands	r3, r2
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d032      	beq.n	800b0a2 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10f      	bne.n	800b062 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b042:	f06f 0302 	mvn.w	r3, #2
 800b046:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b048:	e02e      	b.n	800b0a8 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04e:	4013      	ands	r3, r2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d128      	bne.n	800b0a6 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d103      	bne.n	800b062 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b05a:	f06f 0302 	mvn.w	r3, #2
 800b05e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b060:	e022      	b.n	800b0a8 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b062:	f001 ff9d 	bl	800cfa0 <xTaskGetTickCount>
 800b066:	4602      	mov	r2, r0
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800b06e:	6a3a      	ldr	r2, [r7, #32]
 800b070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b072:	429a      	cmp	r2, r3
 800b074:	d902      	bls.n	800b07c <osThreadFlagsWait+0xec>
          tout  = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b07a:	e00e      	b.n	800b09a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800b07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b07e:	6a3b      	ldr	r3, [r7, #32]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b084:	e009      	b.n	800b09a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d103      	bne.n	800b094 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800b08c:	f06f 0302 	mvn.w	r3, #2
 800b090:	637b      	str	r3, [r7, #52]	; 0x34
 800b092:	e002      	b.n	800b09a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b094:	f06f 0301 	mvn.w	r3, #1
 800b098:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1af      	bne.n	800b000 <osThreadFlagsWait+0x70>
 800b0a0:	e002      	b.n	800b0a8 <osThreadFlagsWait+0x118>
            break;
 800b0a2:	bf00      	nop
 800b0a4:	e000      	b.n	800b0a8 <osThreadFlagsWait+0x118>
            break;
 800b0a6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3738      	adds	r7, #56	; 0x38
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000338 	.word	0x20000338

0800b0b8 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0c0:	f3ef 8305 	mrs	r3, IPSR
 800b0c4:	613b      	str	r3, [r7, #16]
  return(result);
 800b0c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10f      	bne.n	800b0ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b0d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d105      	bne.n	800b0e4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b0d8:	f3ef 8311 	mrs	r3, BASEPRI
 800b0dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d007      	beq.n	800b0f4 <osDelay+0x3c>
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <osDelay+0x58>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d103      	bne.n	800b0f4 <osDelay+0x3c>
    stat = osErrorISR;
 800b0ec:	f06f 0305 	mvn.w	r3, #5
 800b0f0:	617b      	str	r3, [r7, #20]
 800b0f2:	e007      	b.n	800b104 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 fdd4 	bl	800ccac <vTaskDelay>
    }
  }

  return (stat);
 800b104:	697b      	ldr	r3, [r7, #20]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20000338 	.word	0x20000338

0800b114 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b114:	b580      	push	{r7, lr}
 800b116:	b08a      	sub	sp, #40	; 0x28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b11c:	2300      	movs	r3, #0
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b120:	f3ef 8305 	mrs	r3, IPSR
 800b124:	613b      	str	r3, [r7, #16]
  return(result);
 800b126:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f040 8085 	bne.w	800b238 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b12e:	f3ef 8310 	mrs	r3, PRIMASK
 800b132:	60fb      	str	r3, [r7, #12]
  return(result);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d105      	bne.n	800b146 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b13a:	f3ef 8311 	mrs	r3, BASEPRI
 800b13e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <osMutexNew+0x3a>
 800b146:	4b3f      	ldr	r3, [pc, #252]	; (800b244 <osMutexNew+0x130>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d074      	beq.n	800b238 <osMutexNew+0x124>
    if (attr != NULL) {
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <osMutexNew+0x48>
      type = attr->attr_bits;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	623b      	str	r3, [r7, #32]
 800b15a:	e001      	b.n	800b160 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b15c:	2300      	movs	r3, #0
 800b15e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	2b00      	cmp	r3, #0
 800b168:	d002      	beq.n	800b170 <osMutexNew+0x5c>
      rmtx = 1U;
 800b16a:	2301      	movs	r3, #1
 800b16c:	61fb      	str	r3, [r7, #28]
 800b16e:	e001      	b.n	800b174 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	f003 0308 	and.w	r3, r3, #8
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d15c      	bne.n	800b238 <osMutexNew+0x124>
      mem = -1;
 800b17e:	f04f 33ff 	mov.w	r3, #4294967295
 800b182:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d015      	beq.n	800b1b6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d006      	beq.n	800b1a0 <osMutexNew+0x8c>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	2b4f      	cmp	r3, #79	; 0x4f
 800b198:	d902      	bls.n	800b1a0 <osMutexNew+0x8c>
          mem = 1;
 800b19a:	2301      	movs	r3, #1
 800b19c:	61bb      	str	r3, [r7, #24]
 800b19e:	e00c      	b.n	800b1ba <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d108      	bne.n	800b1ba <osMutexNew+0xa6>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d104      	bne.n	800b1ba <osMutexNew+0xa6>
            mem = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	61bb      	str	r3, [r7, #24]
 800b1b4:	e001      	b.n	800b1ba <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d112      	bne.n	800b1e6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d007      	beq.n	800b1d6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	2004      	movs	r0, #4
 800b1ce:	f000 fc9c 	bl	800bb0a <xQueueCreateMutexStatic>
 800b1d2:	6278      	str	r0, [r7, #36]	; 0x24
 800b1d4:	e016      	b.n	800b204 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	2001      	movs	r0, #1
 800b1de:	f000 fc94 	bl	800bb0a <xQueueCreateMutexStatic>
 800b1e2:	6278      	str	r0, [r7, #36]	; 0x24
 800b1e4:	e00e      	b.n	800b204 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10b      	bne.n	800b204 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b1f2:	2004      	movs	r0, #4
 800b1f4:	f000 fc71 	bl	800bada <xQueueCreateMutex>
 800b1f8:	6278      	str	r0, [r7, #36]	; 0x24
 800b1fa:	e003      	b.n	800b204 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b1fc:	2001      	movs	r0, #1
 800b1fe:	f000 fc6c 	bl	800bada <xQueueCreateMutex>
 800b202:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00c      	beq.n	800b224 <osMutexNew+0x110>
        if (attr != NULL) {
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <osMutexNew+0x104>
          name = attr->name;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	617b      	str	r3, [r7, #20]
 800b216:	e001      	b.n	800b21c <osMutexNew+0x108>
        } else {
          name = NULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b21c:	6979      	ldr	r1, [r7, #20]
 800b21e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b220:	f001 fb20 	bl	800c864 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	2b00      	cmp	r3, #0
 800b228:	d006      	beq.n	800b238 <osMutexNew+0x124>
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d003      	beq.n	800b238 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	f043 0301 	orr.w	r3, r3, #1
 800b236:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3728      	adds	r7, #40	; 0x28
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20000338 	.word	0x20000338

0800b248 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f023 0301 	bic.w	r3, r3, #1
 800b258:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b262:	2300      	movs	r3, #0
 800b264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b266:	f3ef 8305 	mrs	r3, IPSR
 800b26a:	613b      	str	r3, [r7, #16]
  return(result);
 800b26c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10f      	bne.n	800b292 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b272:	f3ef 8310 	mrs	r3, PRIMASK
 800b276:	60fb      	str	r3, [r7, #12]
  return(result);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d105      	bne.n	800b28a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b27e:	f3ef 8311 	mrs	r3, BASEPRI
 800b282:	60bb      	str	r3, [r7, #8]
  return(result);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d007      	beq.n	800b29a <osMutexAcquire+0x52>
 800b28a:	4b1d      	ldr	r3, [pc, #116]	; (800b300 <osMutexAcquire+0xb8>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d103      	bne.n	800b29a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800b292:	f06f 0305 	mvn.w	r3, #5
 800b296:	61fb      	str	r3, [r7, #28]
 800b298:	e02c      	b.n	800b2f4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d103      	bne.n	800b2a8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800b2a0:	f06f 0303 	mvn.w	r3, #3
 800b2a4:	61fb      	str	r3, [r7, #28]
 800b2a6:	e025      	b.n	800b2f4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d011      	beq.n	800b2d2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	69b8      	ldr	r0, [r7, #24]
 800b2b2:	f000 fc78 	bl	800bba6 <xQueueTakeMutexRecursive>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d01b      	beq.n	800b2f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800b2c2:	f06f 0301 	mvn.w	r3, #1
 800b2c6:	61fb      	str	r3, [r7, #28]
 800b2c8:	e014      	b.n	800b2f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b2ca:	f06f 0302 	mvn.w	r3, #2
 800b2ce:	61fb      	str	r3, [r7, #28]
 800b2d0:	e010      	b.n	800b2f4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	69b8      	ldr	r0, [r7, #24]
 800b2d6:	f000 fff5 	bl	800c2c4 <xQueueSemaphoreTake>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d009      	beq.n	800b2f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d003      	beq.n	800b2ee <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800b2e6:	f06f 0301 	mvn.w	r3, #1
 800b2ea:	61fb      	str	r3, [r7, #28]
 800b2ec:	e002      	b.n	800b2f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b2ee:	f06f 0302 	mvn.w	r3, #2
 800b2f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b2f4:	69fb      	ldr	r3, [r7, #28]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20000338 	.word	0x20000338

0800b304 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f023 0301 	bic.w	r3, r3, #1
 800b312:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b31c:	2300      	movs	r3, #0
 800b31e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b320:	f3ef 8305 	mrs	r3, IPSR
 800b324:	613b      	str	r3, [r7, #16]
  return(result);
 800b326:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10f      	bne.n	800b34c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b32c:	f3ef 8310 	mrs	r3, PRIMASK
 800b330:	60fb      	str	r3, [r7, #12]
  return(result);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d105      	bne.n	800b344 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b338:	f3ef 8311 	mrs	r3, BASEPRI
 800b33c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d007      	beq.n	800b354 <osMutexRelease+0x50>
 800b344:	4b16      	ldr	r3, [pc, #88]	; (800b3a0 <osMutexRelease+0x9c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d103      	bne.n	800b354 <osMutexRelease+0x50>
    stat = osErrorISR;
 800b34c:	f06f 0305 	mvn.w	r3, #5
 800b350:	61fb      	str	r3, [r7, #28]
 800b352:	e01f      	b.n	800b394 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d103      	bne.n	800b362 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800b35a:	f06f 0303 	mvn.w	r3, #3
 800b35e:	61fb      	str	r3, [r7, #28]
 800b360:	e018      	b.n	800b394 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d009      	beq.n	800b37c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b368:	69b8      	ldr	r0, [r7, #24]
 800b36a:	f000 fbe9 	bl	800bb40 <xQueueGiveMutexRecursive>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b01      	cmp	r3, #1
 800b372:	d00f      	beq.n	800b394 <osMutexRelease+0x90>
        stat = osErrorResource;
 800b374:	f06f 0302 	mvn.w	r3, #2
 800b378:	61fb      	str	r3, [r7, #28]
 800b37a:	e00b      	b.n	800b394 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b37c:	2300      	movs	r3, #0
 800b37e:	2200      	movs	r2, #0
 800b380:	2100      	movs	r1, #0
 800b382:	69b8      	ldr	r0, [r7, #24]
 800b384:	f000 fcaa 	bl	800bcdc <xQueueGenericSend>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d002      	beq.n	800b394 <osMutexRelease+0x90>
        stat = osErrorResource;
 800b38e:	f06f 0302 	mvn.w	r3, #2
 800b392:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800b394:	69fb      	ldr	r3, [r7, #28]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3720      	adds	r7, #32
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20000338 	.word	0x20000338

0800b3a4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b08c      	sub	sp, #48	; 0x30
 800b3a8:	af02      	add	r7, sp, #8
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b4:	f3ef 8305 	mrs	r3, IPSR
 800b3b8:	61bb      	str	r3, [r7, #24]
  return(result);
 800b3ba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f040 8087 	bne.w	800b4d0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c6:	617b      	str	r3, [r7, #20]
  return(result);
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d105      	bne.n	800b3da <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3ce:	f3ef 8311 	mrs	r3, BASEPRI
 800b3d2:	613b      	str	r3, [r7, #16]
  return(result);
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <osSemaphoreNew+0x3e>
 800b3da:	4b40      	ldr	r3, [pc, #256]	; (800b4dc <osSemaphoreNew+0x138>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d076      	beq.n	800b4d0 <osSemaphoreNew+0x12c>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d073      	beq.n	800b4d0 <osSemaphoreNew+0x12c>
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d86f      	bhi.n	800b4d0 <osSemaphoreNew+0x12c>
    mem = -1;
 800b3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d015      	beq.n	800b428 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d006      	beq.n	800b412 <osSemaphoreNew+0x6e>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	2b4f      	cmp	r3, #79	; 0x4f
 800b40a:	d902      	bls.n	800b412 <osSemaphoreNew+0x6e>
        mem = 1;
 800b40c:	2301      	movs	r3, #1
 800b40e:	623b      	str	r3, [r7, #32]
 800b410:	e00c      	b.n	800b42c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d108      	bne.n	800b42c <osSemaphoreNew+0x88>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d104      	bne.n	800b42c <osSemaphoreNew+0x88>
          mem = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	623b      	str	r3, [r7, #32]
 800b426:	e001      	b.n	800b42c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800b42c:	6a3b      	ldr	r3, [r7, #32]
 800b42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b432:	d04d      	beq.n	800b4d0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d129      	bne.n	800b48e <osSemaphoreNew+0xea>
        if (mem == 1) {
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d10b      	bne.n	800b458 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689a      	ldr	r2, [r3, #8]
 800b444:	2303      	movs	r3, #3
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	4613      	mov	r3, r2
 800b44a:	2200      	movs	r2, #0
 800b44c:	2100      	movs	r1, #0
 800b44e:	2001      	movs	r0, #1
 800b450:	f000 fa54 	bl	800b8fc <xQueueGenericCreateStatic>
 800b454:	6278      	str	r0, [r7, #36]	; 0x24
 800b456:	e005      	b.n	800b464 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800b458:	2203      	movs	r2, #3
 800b45a:	2100      	movs	r1, #0
 800b45c:	2001      	movs	r0, #1
 800b45e:	f000 fac0 	bl	800b9e2 <xQueueGenericCreate>
 800b462:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	2b00      	cmp	r3, #0
 800b468:	d022      	beq.n	800b4b0 <osSemaphoreNew+0x10c>
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d01f      	beq.n	800b4b0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b470:	2300      	movs	r3, #0
 800b472:	2200      	movs	r2, #0
 800b474:	2100      	movs	r1, #0
 800b476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b478:	f000 fc30 	bl	800bcdc <xQueueGenericSend>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d016      	beq.n	800b4b0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800b482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b484:	f001 f8a3 	bl	800c5ce <vQueueDelete>
            hSemaphore = NULL;
 800b488:	2300      	movs	r3, #0
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
 800b48c:	e010      	b.n	800b4b0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	2b01      	cmp	r3, #1
 800b492:	d108      	bne.n	800b4a6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	461a      	mov	r2, r3
 800b49a:	68b9      	ldr	r1, [r7, #8]
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 fbb7 	bl	800bc10 <xQueueCreateCountingSemaphoreStatic>
 800b4a2:	6278      	str	r0, [r7, #36]	; 0x24
 800b4a4:	e004      	b.n	800b4b0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 fbe6 	bl	800bc7a <xQueueCreateCountingSemaphore>
 800b4ae:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00c      	beq.n	800b4d0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <osSemaphoreNew+0x120>
          name = attr->name;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	61fb      	str	r3, [r7, #28]
 800b4c2:	e001      	b.n	800b4c8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b4c8:	69f9      	ldr	r1, [r7, #28]
 800b4ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4cc:	f001 f9ca 	bl	800c864 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3728      	adds	r7, #40	; 0x28
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20000338 	.word	0x20000338

0800b4e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d103      	bne.n	800b500 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b4f8:	f06f 0303 	mvn.w	r3, #3
 800b4fc:	61fb      	str	r3, [r7, #28]
 800b4fe:	e04b      	b.n	800b598 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b500:	f3ef 8305 	mrs	r3, IPSR
 800b504:	617b      	str	r3, [r7, #20]
  return(result);
 800b506:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10f      	bne.n	800b52c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b50c:	f3ef 8310 	mrs	r3, PRIMASK
 800b510:	613b      	str	r3, [r7, #16]
  return(result);
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d105      	bne.n	800b524 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b518:	f3ef 8311 	mrs	r3, BASEPRI
 800b51c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d026      	beq.n	800b572 <osSemaphoreAcquire+0x92>
 800b524:	4b1f      	ldr	r3, [pc, #124]	; (800b5a4 <osSemaphoreAcquire+0xc4>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b02      	cmp	r3, #2
 800b52a:	d122      	bne.n	800b572 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800b532:	f06f 0303 	mvn.w	r3, #3
 800b536:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b538:	e02d      	b.n	800b596 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b53e:	f107 0308 	add.w	r3, r7, #8
 800b542:	461a      	mov	r2, r3
 800b544:	2100      	movs	r1, #0
 800b546:	69b8      	ldr	r0, [r7, #24]
 800b548:	f000 ffc4 	bl	800c4d4 <xQueueReceiveFromISR>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d003      	beq.n	800b55a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800b552:	f06f 0302 	mvn.w	r3, #2
 800b556:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b558:	e01d      	b.n	800b596 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d01a      	beq.n	800b596 <osSemaphoreAcquire+0xb6>
 800b560:	4b11      	ldr	r3, [pc, #68]	; (800b5a8 <osSemaphoreAcquire+0xc8>)
 800b562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800b570:	e011      	b.n	800b596 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	69b8      	ldr	r0, [r7, #24]
 800b576:	f000 fea5 	bl	800c2c4 <xQueueSemaphoreTake>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d00b      	beq.n	800b598 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800b586:	f06f 0301 	mvn.w	r3, #1
 800b58a:	61fb      	str	r3, [r7, #28]
 800b58c:	e004      	b.n	800b598 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800b58e:	f06f 0302 	mvn.w	r3, #2
 800b592:	61fb      	str	r3, [r7, #28]
 800b594:	e000      	b.n	800b598 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800b596:	bf00      	nop
      }
    }
  }

  return (stat);
 800b598:	69fb      	ldr	r3, [r7, #28]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3720      	adds	r7, #32
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000338 	.word	0x20000338
 800b5a8:	e000ed04 	.word	0xe000ed04

0800b5ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d103      	bne.n	800b5ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b5c2:	f06f 0303 	mvn.w	r3, #3
 800b5c6:	61fb      	str	r3, [r7, #28]
 800b5c8:	e03e      	b.n	800b648 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ca:	f3ef 8305 	mrs	r3, IPSR
 800b5ce:	617b      	str	r3, [r7, #20]
  return(result);
 800b5d0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10f      	bne.n	800b5f6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5da:	613b      	str	r3, [r7, #16]
  return(result);
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d105      	bne.n	800b5ee <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5e2:	f3ef 8311 	mrs	r3, BASEPRI
 800b5e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d01e      	beq.n	800b62c <osSemaphoreRelease+0x80>
 800b5ee:	4b19      	ldr	r3, [pc, #100]	; (800b654 <osSemaphoreRelease+0xa8>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d11a      	bne.n	800b62c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b5fa:	f107 0308 	add.w	r3, r7, #8
 800b5fe:	4619      	mov	r1, r3
 800b600:	69b8      	ldr	r0, [r7, #24]
 800b602:	f000 fcf9 	bl	800bff8 <xQueueGiveFromISR>
 800b606:	4603      	mov	r3, r0
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d003      	beq.n	800b614 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800b60c:	f06f 0302 	mvn.w	r3, #2
 800b610:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b612:	e018      	b.n	800b646 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d015      	beq.n	800b646 <osSemaphoreRelease+0x9a>
 800b61a:	4b0f      	ldr	r3, [pc, #60]	; (800b658 <osSemaphoreRelease+0xac>)
 800b61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b620:	601a      	str	r2, [r3, #0]
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b62a:	e00c      	b.n	800b646 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b62c:	2300      	movs	r3, #0
 800b62e:	2200      	movs	r2, #0
 800b630:	2100      	movs	r1, #0
 800b632:	69b8      	ldr	r0, [r7, #24]
 800b634:	f000 fb52 	bl	800bcdc <xQueueGenericSend>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d004      	beq.n	800b648 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800b63e:	f06f 0302 	mvn.w	r3, #2
 800b642:	61fb      	str	r3, [r7, #28]
 800b644:	e000      	b.n	800b648 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b646:	bf00      	nop
    }
  }

  return (stat);
 800b648:	69fb      	ldr	r3, [r7, #28]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3720      	adds	r7, #32
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20000338 	.word	0x20000338
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	4a07      	ldr	r2, [pc, #28]	; (800b688 <vApplicationGetIdleTaskMemory+0x2c>)
 800b66c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	4a06      	ldr	r2, [pc, #24]	; (800b68c <vApplicationGetIdleTaskMemory+0x30>)
 800b672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b67a:	601a      	str	r2, [r3, #0]
}
 800b67c:	bf00      	nop
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	2000033c 	.word	0x2000033c
 800b68c:	20000398 	.word	0x20000398

0800b690 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4a07      	ldr	r2, [pc, #28]	; (800b6bc <vApplicationGetTimerTaskMemory+0x2c>)
 800b6a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	4a06      	ldr	r2, [pc, #24]	; (800b6c0 <vApplicationGetTimerTaskMemory+0x30>)
 800b6a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6ae:	601a      	str	r2, [r3, #0]
}
 800b6b0:	bf00      	nop
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	20000b98 	.word	0x20000b98
 800b6c0:	20000bf4 	.word	0x20000bf4

0800b6c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f103 0208 	add.w	r2, r3, #8
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f103 0208 	add.w	r2, r3, #8
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f103 0208 	add.w	r2, r3, #8
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b712:	bf00      	nop
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b71e:	b480      	push	{r7}
 800b720:	b085      	sub	sp, #20
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	689a      	ldr	r2, [r3, #8]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	601a      	str	r2, [r3, #0]
}
 800b75a:	bf00      	nop
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77c:	d103      	bne.n	800b786 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e00c      	b.n	800b7a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	3308      	adds	r3, #8
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	e002      	b.n	800b794 <vListInsert+0x2e>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d2f6      	bcs.n	800b78e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	601a      	str	r2, [r3, #0]
}
 800b7cc:	bf00      	nop
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	6892      	ldr	r2, [r2, #8]
 800b7ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6852      	ldr	r2, [r2, #4]
 800b7f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	429a      	cmp	r2, r3
 800b802:	d103      	bne.n	800b80c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	689a      	ldr	r2, [r3, #8]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	1e5a      	subs	r2, r3, #1
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d109      	bne.n	800b854 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	60bb      	str	r3, [r7, #8]
 800b852:	e7fe      	b.n	800b852 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b854:	f002 ff32 	bl	800e6bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b860:	68f9      	ldr	r1, [r7, #12]
 800b862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b864:	fb01 f303 	mul.w	r3, r1, r3
 800b868:	441a      	add	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b884:	3b01      	subs	r3, #1
 800b886:	68f9      	ldr	r1, [r7, #12]
 800b888:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b88a:	fb01 f303 	mul.w	r3, r1, r3
 800b88e:	441a      	add	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	22ff      	movs	r2, #255	; 0xff
 800b898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	22ff      	movs	r2, #255	; 0xff
 800b8a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d114      	bne.n	800b8d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d01a      	beq.n	800b8e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3310      	adds	r3, #16
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f001 fce4 	bl	800d284 <xTaskRemoveFromEventList>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d012      	beq.n	800b8e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8c2:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <xQueueGenericReset+0xcc>)
 800b8c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	e009      	b.n	800b8e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3310      	adds	r3, #16
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff fef3 	bl	800b6c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3324      	adds	r3, #36	; 0x24
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff feee 	bl	800b6c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8e8:	f002 ff16 	bl	800e718 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8ec:	2301      	movs	r3, #1
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	e000ed04 	.word	0xe000ed04

0800b8fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08e      	sub	sp, #56	; 0x38
 800b900:	af02      	add	r7, sp, #8
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d109      	bne.n	800b924 <xQueueGenericCreateStatic+0x28>
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	62bb      	str	r3, [r7, #40]	; 0x28
 800b922:	e7fe      	b.n	800b922 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d109      	bne.n	800b93e <xQueueGenericCreateStatic+0x42>
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	627b      	str	r3, [r7, #36]	; 0x24
 800b93c:	e7fe      	b.n	800b93c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <xQueueGenericCreateStatic+0x4e>
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <xQueueGenericCreateStatic+0x52>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e000      	b.n	800b950 <xQueueGenericCreateStatic+0x54>
 800b94e:	2300      	movs	r3, #0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d109      	bne.n	800b968 <xQueueGenericCreateStatic+0x6c>
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	623b      	str	r3, [r7, #32]
 800b966:	e7fe      	b.n	800b966 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d102      	bne.n	800b974 <xQueueGenericCreateStatic+0x78>
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <xQueueGenericCreateStatic+0x7c>
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <xQueueGenericCreateStatic+0x7e>
 800b978:	2300      	movs	r3, #0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d109      	bne.n	800b992 <xQueueGenericCreateStatic+0x96>
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	61fb      	str	r3, [r7, #28]
 800b990:	e7fe      	b.n	800b990 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b992:	2350      	movs	r3, #80	; 0x50
 800b994:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2b50      	cmp	r3, #80	; 0x50
 800b99a:	d009      	beq.n	800b9b0 <xQueueGenericCreateStatic+0xb4>
 800b99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	61bb      	str	r3, [r7, #24]
 800b9ae:	e7fe      	b.n	800b9ae <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00d      	beq.n	800b9d8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9c4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	68b9      	ldr	r1, [r7, #8]
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f000 f844 	bl	800ba60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3730      	adds	r7, #48	; 0x30
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b08a      	sub	sp, #40	; 0x28
 800b9e6:	af02      	add	r7, sp, #8
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d109      	bne.n	800ba0a <xQueueGenericCreate+0x28>
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	613b      	str	r3, [r7, #16]
 800ba08:	e7fe      	b.n	800ba08 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d102      	bne.n	800ba16 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	61fb      	str	r3, [r7, #28]
 800ba14:	e004      	b.n	800ba20 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	fb02 f303 	mul.w	r3, r2, r3
 800ba1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	3350      	adds	r3, #80	; 0x50
 800ba24:	4618      	mov	r0, r3
 800ba26:	f002 ff63 	bl	800e8f0 <pvPortMalloc>
 800ba2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d011      	beq.n	800ba56 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	3350      	adds	r3, #80	; 0x50
 800ba3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba44:	79fa      	ldrb	r2, [r7, #7]
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f805 	bl	800ba60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba56:	69bb      	ldr	r3, [r7, #24]
	}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3720      	adds	r7, #32
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d103      	bne.n	800ba7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	69ba      	ldr	r2, [r7, #24]
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	e002      	b.n	800ba82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba8e:	2101      	movs	r1, #1
 800ba90:	69b8      	ldr	r0, [r7, #24]
 800ba92:	f7ff fecb 	bl	800b82c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	78fa      	ldrb	r2, [r7, #3]
 800ba9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00e      	beq.n	800bad2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bac6:	2300      	movs	r3, #0
 800bac8:	2200      	movs	r2, #0
 800baca:	2100      	movs	r1, #0
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f905 	bl	800bcdc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bad2:	bf00      	nop
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bada:	b580      	push	{r7, lr}
 800badc:	b086      	sub	sp, #24
 800bade:	af00      	add	r7, sp, #0
 800bae0:	4603      	mov	r3, r0
 800bae2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bae4:	2301      	movs	r3, #1
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	2300      	movs	r3, #0
 800baea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800baec:	79fb      	ldrb	r3, [r7, #7]
 800baee:	461a      	mov	r2, r3
 800baf0:	6939      	ldr	r1, [r7, #16]
 800baf2:	6978      	ldr	r0, [r7, #20]
 800baf4:	f7ff ff75 	bl	800b9e2 <xQueueGenericCreate>
 800baf8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f7ff ffd3 	bl	800baa6 <prvInitialiseMutex>

		return xNewQueue;
 800bb00:	68fb      	ldr	r3, [r7, #12]
	}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b088      	sub	sp, #32
 800bb0e:	af02      	add	r7, sp, #8
 800bb10:	4603      	mov	r3, r0
 800bb12:	6039      	str	r1, [r7, #0]
 800bb14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb16:	2301      	movs	r3, #1
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb1e:	79fb      	ldrb	r3, [r7, #7]
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2200      	movs	r2, #0
 800bb26:	6939      	ldr	r1, [r7, #16]
 800bb28:	6978      	ldr	r0, [r7, #20]
 800bb2a:	f7ff fee7 	bl	800b8fc <xQueueGenericCreateStatic>
 800bb2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f7ff ffb8 	bl	800baa6 <prvInitialiseMutex>

		return xNewQueue;
 800bb36:	68fb      	ldr	r3, [r7, #12]
	}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bb40:	b590      	push	{r4, r7, lr}
 800bb42:	b087      	sub	sp, #28
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d109      	bne.n	800bb66 <xQueueGiveMutexRecursive+0x26>
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	e7fe      	b.n	800bb64 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	689c      	ldr	r4, [r3, #8]
 800bb6a:	f001 fd69 	bl	800d640 <xTaskGetCurrentTaskHandle>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	429c      	cmp	r4, r3
 800bb72:	d111      	bne.n	800bb98 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	1e5a      	subs	r2, r3, #1
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d105      	bne.n	800bb92 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bb86:	2300      	movs	r3, #0
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	6938      	ldr	r0, [r7, #16]
 800bb8e:	f000 f8a5 	bl	800bcdc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bb92:	2301      	movs	r3, #1
 800bb94:	617b      	str	r3, [r7, #20]
 800bb96:	e001      	b.n	800bb9c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bb9c:	697b      	ldr	r3, [r7, #20]
	}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd90      	pop	{r4, r7, pc}

0800bba6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bba6:	b590      	push	{r4, r7, lr}
 800bba8:	b087      	sub	sp, #28
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d109      	bne.n	800bbce <xQueueTakeMutexRecursive+0x28>
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	e7fe      	b.n	800bbcc <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	689c      	ldr	r4, [r3, #8]
 800bbd2:	f001 fd35 	bl	800d640 <xTaskGetCurrentTaskHandle>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	429c      	cmp	r4, r3
 800bbda:	d107      	bne.n	800bbec <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	e00c      	b.n	800bc06 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6938      	ldr	r0, [r7, #16]
 800bbf0:	f000 fb68 	bl	800c2c4 <xQueueSemaphoreTake>
 800bbf4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d004      	beq.n	800bc06 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bc06:	697b      	ldr	r3, [r7, #20]
	}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	371c      	adds	r7, #28
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd90      	pop	{r4, r7, pc}

0800bc10 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08a      	sub	sp, #40	; 0x28
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d109      	bne.n	800bc36 <xQueueCreateCountingSemaphoreStatic+0x26>
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	61bb      	str	r3, [r7, #24]
 800bc34:	e7fe      	b.n	800bc34 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d909      	bls.n	800bc52 <xQueueCreateCountingSemaphoreStatic+0x42>
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	617b      	str	r3, [r7, #20]
 800bc50:	e7fe      	b.n	800bc50 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc52:	2302      	movs	r3, #2
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f7ff fe4d 	bl	800b8fc <xQueueGenericCreateStatic>
 800bc62:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bc70:	69fb      	ldr	r3, [r7, #28]
	}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3720      	adds	r7, #32
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b086      	sub	sp, #24
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d109      	bne.n	800bc9e <xQueueCreateCountingSemaphore+0x24>
 800bc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	613b      	str	r3, [r7, #16]
 800bc9c:	e7fe      	b.n	800bc9c <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d909      	bls.n	800bcba <xQueueCreateCountingSemaphore+0x40>
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e7fe      	b.n	800bcb8 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bcba:	2202      	movs	r2, #2
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff fe8f 	bl	800b9e2 <xQueueGenericCreate>
 800bcc4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bcd2:	697b      	ldr	r3, [r7, #20]
	}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08e      	sub	sp, #56	; 0x38
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bcea:	2300      	movs	r3, #0
 800bcec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d109      	bne.n	800bd0c <xQueueGenericSend+0x30>
 800bcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd0a:	e7fe      	b.n	800bd0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d103      	bne.n	800bd1a <xQueueGenericSend+0x3e>
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d101      	bne.n	800bd1e <xQueueGenericSend+0x42>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e000      	b.n	800bd20 <xQueueGenericSend+0x44>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d109      	bne.n	800bd38 <xQueueGenericSend+0x5c>
 800bd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	627b      	str	r3, [r7, #36]	; 0x24
 800bd36:	e7fe      	b.n	800bd36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d103      	bne.n	800bd46 <xQueueGenericSend+0x6a>
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d101      	bne.n	800bd4a <xQueueGenericSend+0x6e>
 800bd46:	2301      	movs	r3, #1
 800bd48:	e000      	b.n	800bd4c <xQueueGenericSend+0x70>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d109      	bne.n	800bd64 <xQueueGenericSend+0x88>
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	623b      	str	r3, [r7, #32]
 800bd62:	e7fe      	b.n	800bd62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd64:	f001 fc7c 	bl	800d660 <xTaskGetSchedulerState>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d102      	bne.n	800bd74 <xQueueGenericSend+0x98>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <xQueueGenericSend+0x9c>
 800bd74:	2301      	movs	r3, #1
 800bd76:	e000      	b.n	800bd7a <xQueueGenericSend+0x9e>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d109      	bne.n	800bd92 <xQueueGenericSend+0xb6>
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	61fb      	str	r3, [r7, #28]
 800bd90:	e7fe      	b.n	800bd90 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd92:	f002 fc93 	bl	800e6bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d302      	bcc.n	800bda8 <xQueueGenericSend+0xcc>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d129      	bne.n	800bdfc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	68b9      	ldr	r1, [r7, #8]
 800bdac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdae:	f000 fc48 	bl	800c642 <prvCopyDataToQueue>
 800bdb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d010      	beq.n	800bdde <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	3324      	adds	r3, #36	; 0x24
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f001 fa5f 	bl	800d284 <xTaskRemoveFromEventList>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d013      	beq.n	800bdf4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bdcc:	4b3f      	ldr	r3, [pc, #252]	; (800becc <xQueueGenericSend+0x1f0>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	e00a      	b.n	800bdf4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d007      	beq.n	800bdf4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bde4:	4b39      	ldr	r3, [pc, #228]	; (800becc <xQueueGenericSend+0x1f0>)
 800bde6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bdf4:	f002 fc90 	bl	800e718 <vPortExitCritical>
				return pdPASS;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e063      	b.n	800bec4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d103      	bne.n	800be0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be02:	f002 fc89 	bl	800e718 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be06:	2300      	movs	r3, #0
 800be08:	e05c      	b.n	800bec4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d106      	bne.n	800be1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be10:	f107 0314 	add.w	r3, r7, #20
 800be14:	4618      	mov	r0, r3
 800be16:	f001 fa99 	bl	800d34c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be1a:	2301      	movs	r3, #1
 800be1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be1e:	f002 fc7b 	bl	800e718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be22:	f000 ffdb 	bl	800cddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be26:	f002 fc49 	bl	800e6bc <vPortEnterCritical>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be30:	b25b      	sxtb	r3, r3
 800be32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be36:	d103      	bne.n	800be40 <xQueueGenericSend+0x164>
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be46:	b25b      	sxtb	r3, r3
 800be48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4c:	d103      	bne.n	800be56 <xQueueGenericSend+0x17a>
 800be4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be50:	2200      	movs	r2, #0
 800be52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be56:	f002 fc5f 	bl	800e718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be5a:	1d3a      	adds	r2, r7, #4
 800be5c:	f107 0314 	add.w	r3, r7, #20
 800be60:	4611      	mov	r1, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f001 fa88 	bl	800d378 <xTaskCheckForTimeOut>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d124      	bne.n	800beb8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be70:	f000 fcdf 	bl	800c832 <prvIsQueueFull>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d018      	beq.n	800beac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	3310      	adds	r3, #16
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	4611      	mov	r1, r2
 800be82:	4618      	mov	r0, r3
 800be84:	f001 f9b0 	bl	800d1e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be8a:	f000 fc6a 	bl	800c762 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be8e:	f000 ffeb 	bl	800ce68 <xTaskResumeAll>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	f47f af7c 	bne.w	800bd92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800be9a:	4b0c      	ldr	r3, [pc, #48]	; (800becc <xQueueGenericSend+0x1f0>)
 800be9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	e772      	b.n	800bd92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800beac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beae:	f000 fc58 	bl	800c762 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800beb2:	f000 ffd9 	bl	800ce68 <xTaskResumeAll>
 800beb6:	e76c      	b.n	800bd92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800beb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beba:	f000 fc52 	bl	800c762 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bebe:	f000 ffd3 	bl	800ce68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3738      	adds	r7, #56	; 0x38
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	e000ed04 	.word	0xe000ed04

0800bed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b08e      	sub	sp, #56	; 0x38
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d109      	bne.n	800befc <xQueueGenericSendFromISR+0x2c>
 800bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	627b      	str	r3, [r7, #36]	; 0x24
 800befa:	e7fe      	b.n	800befa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d103      	bne.n	800bf0a <xQueueGenericSendFromISR+0x3a>
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <xQueueGenericSendFromISR+0x3e>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e000      	b.n	800bf10 <xQueueGenericSendFromISR+0x40>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d109      	bne.n	800bf28 <xQueueGenericSendFromISR+0x58>
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	623b      	str	r3, [r7, #32]
 800bf26:	e7fe      	b.n	800bf26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d103      	bne.n	800bf36 <xQueueGenericSendFromISR+0x66>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d101      	bne.n	800bf3a <xQueueGenericSendFromISR+0x6a>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e000      	b.n	800bf3c <xQueueGenericSendFromISR+0x6c>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d109      	bne.n	800bf54 <xQueueGenericSendFromISR+0x84>
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	61fb      	str	r3, [r7, #28]
 800bf52:	e7fe      	b.n	800bf52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf54:	f002 fc8e 	bl	800e874 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf58:	f3ef 8211 	mrs	r2, BASEPRI
 800bf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	61ba      	str	r2, [r7, #24]
 800bf6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d302      	bcc.n	800bf86 <xQueueGenericSendFromISR+0xb6>
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d12c      	bne.n	800bfe0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	68b9      	ldr	r1, [r7, #8]
 800bf94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf96:	f000 fb54 	bl	800c642 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa2:	d112      	bne.n	800bfca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d016      	beq.n	800bfda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	3324      	adds	r3, #36	; 0x24
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f001 f967 	bl	800d284 <xTaskRemoveFromEventList>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00e      	beq.n	800bfda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00b      	beq.n	800bfda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	601a      	str	r2, [r3, #0]
 800bfc8:	e007      	b.n	800bfda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfce:	3301      	adds	r3, #1
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	b25a      	sxtb	r2, r3
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bfde:	e001      	b.n	800bfe4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3738      	adds	r7, #56	; 0x38
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b08e      	sub	sp, #56	; 0x38
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d109      	bne.n	800c020 <xQueueGiveFromISR+0x28>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	623b      	str	r3, [r7, #32]
 800c01e:	e7fe      	b.n	800c01e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c024:	2b00      	cmp	r3, #0
 800c026:	d009      	beq.n	800c03c <xQueueGiveFromISR+0x44>
 800c028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	61fb      	str	r3, [r7, #28]
 800c03a:	e7fe      	b.n	800c03a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d103      	bne.n	800c04c <xQueueGiveFromISR+0x54>
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <xQueueGiveFromISR+0x58>
 800c04c:	2301      	movs	r3, #1
 800c04e:	e000      	b.n	800c052 <xQueueGiveFromISR+0x5a>
 800c050:	2300      	movs	r3, #0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d109      	bne.n	800c06a <xQueueGiveFromISR+0x72>
 800c056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	61bb      	str	r3, [r7, #24]
 800c068:	e7fe      	b.n	800c068 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c06a:	f002 fc03 	bl	800e874 <vPortValidateInterruptPriority>
	__asm volatile
 800c06e:	f3ef 8211 	mrs	r2, BASEPRI
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	617a      	str	r2, [r7, #20]
 800c084:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c086:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c088:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c096:	429a      	cmp	r2, r3
 800c098:	d22b      	bcs.n	800c0f2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	1c5a      	adds	r2, r3, #1
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b4:	d112      	bne.n	800c0dc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d016      	beq.n	800c0ec <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	3324      	adds	r3, #36	; 0x24
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f001 f8de 	bl	800d284 <xTaskRemoveFromEventList>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00e      	beq.n	800c0ec <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00b      	beq.n	800c0ec <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	e007      	b.n	800c0ec <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	b25a      	sxtb	r2, r3
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c0f0:	e001      	b.n	800c0f6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c102:	4618      	mov	r0, r3
 800c104:	3738      	adds	r7, #56	; 0x38
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
	...

0800c10c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b08c      	sub	sp, #48	; 0x30
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c118:	2300      	movs	r3, #0
 800c11a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c122:	2b00      	cmp	r3, #0
 800c124:	d109      	bne.n	800c13a <xQueueReceive+0x2e>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	623b      	str	r3, [r7, #32]
 800c138:	e7fe      	b.n	800c138 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d103      	bne.n	800c148 <xQueueReceive+0x3c>
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <xQueueReceive+0x40>
 800c148:	2301      	movs	r3, #1
 800c14a:	e000      	b.n	800c14e <xQueueReceive+0x42>
 800c14c:	2300      	movs	r3, #0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d109      	bne.n	800c166 <xQueueReceive+0x5a>
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	61fb      	str	r3, [r7, #28]
 800c164:	e7fe      	b.n	800c164 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c166:	f001 fa7b 	bl	800d660 <xTaskGetSchedulerState>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d102      	bne.n	800c176 <xQueueReceive+0x6a>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <xQueueReceive+0x6e>
 800c176:	2301      	movs	r3, #1
 800c178:	e000      	b.n	800c17c <xQueueReceive+0x70>
 800c17a:	2300      	movs	r3, #0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d109      	bne.n	800c194 <xQueueReceive+0x88>
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	61bb      	str	r3, [r7, #24]
 800c192:	e7fe      	b.n	800c192 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c194:	f002 fa92 	bl	800e6bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d01f      	beq.n	800c1e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1a8:	f000 fab5 	bl	800c716 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	1e5a      	subs	r2, r3, #1
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00f      	beq.n	800c1dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	3310      	adds	r3, #16
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f001 f85f 	bl	800d284 <xTaskRemoveFromEventList>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d007      	beq.n	800c1dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1cc:	4b3c      	ldr	r3, [pc, #240]	; (800c2c0 <xQueueReceive+0x1b4>)
 800c1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1dc:	f002 fa9c 	bl	800e718 <vPortExitCritical>
				return pdPASS;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e069      	b.n	800c2b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1ea:	f002 fa95 	bl	800e718 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e062      	b.n	800c2b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d106      	bne.n	800c206 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1f8:	f107 0310 	add.w	r3, r7, #16
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f001 f8a5 	bl	800d34c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c202:	2301      	movs	r3, #1
 800c204:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c206:	f002 fa87 	bl	800e718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c20a:	f000 fde7 	bl	800cddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c20e:	f002 fa55 	bl	800e6bc <vPortEnterCritical>
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c218:	b25b      	sxtb	r3, r3
 800c21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21e:	d103      	bne.n	800c228 <xQueueReceive+0x11c>
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	2200      	movs	r2, #0
 800c224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c22e:	b25b      	sxtb	r3, r3
 800c230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c234:	d103      	bne.n	800c23e <xQueueReceive+0x132>
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c23e:	f002 fa6b 	bl	800e718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c242:	1d3a      	adds	r2, r7, #4
 800c244:	f107 0310 	add.w	r3, r7, #16
 800c248:	4611      	mov	r1, r2
 800c24a:	4618      	mov	r0, r3
 800c24c:	f001 f894 	bl	800d378 <xTaskCheckForTimeOut>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d123      	bne.n	800c29e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c258:	f000 fad5 	bl	800c806 <prvIsQueueEmpty>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d017      	beq.n	800c292 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	3324      	adds	r3, #36	; 0x24
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	4611      	mov	r1, r2
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 ffbc 	bl	800d1e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c272:	f000 fa76 	bl	800c762 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c276:	f000 fdf7 	bl	800ce68 <xTaskResumeAll>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d189      	bne.n	800c194 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c280:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <xQueueReceive+0x1b4>)
 800c282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c286:	601a      	str	r2, [r3, #0]
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	e780      	b.n	800c194 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c294:	f000 fa65 	bl	800c762 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c298:	f000 fde6 	bl	800ce68 <xTaskResumeAll>
 800c29c:	e77a      	b.n	800c194 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c29e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2a0:	f000 fa5f 	bl	800c762 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2a4:	f000 fde0 	bl	800ce68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2aa:	f000 faac 	bl	800c806 <prvIsQueueEmpty>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f43f af6f 	beq.w	800c194 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3730      	adds	r7, #48	; 0x30
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	e000ed04 	.word	0xe000ed04

0800c2c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08e      	sub	sp, #56	; 0x38
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d109      	bne.n	800c2f4 <xQueueSemaphoreTake+0x30>
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	623b      	str	r3, [r7, #32]
 800c2f2:	e7fe      	b.n	800c2f2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d009      	beq.n	800c310 <xQueueSemaphoreTake+0x4c>
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	61fb      	str	r3, [r7, #28]
 800c30e:	e7fe      	b.n	800c30e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c310:	f001 f9a6 	bl	800d660 <xTaskGetSchedulerState>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d102      	bne.n	800c320 <xQueueSemaphoreTake+0x5c>
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <xQueueSemaphoreTake+0x60>
 800c320:	2301      	movs	r3, #1
 800c322:	e000      	b.n	800c326 <xQueueSemaphoreTake+0x62>
 800c324:	2300      	movs	r3, #0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d109      	bne.n	800c33e <xQueueSemaphoreTake+0x7a>
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	61bb      	str	r3, [r7, #24]
 800c33c:	e7fe      	b.n	800c33c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c33e:	f002 f9bd 	bl	800e6bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c346:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d024      	beq.n	800c398 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c350:	1e5a      	subs	r2, r3, #1
 800c352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c354:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d104      	bne.n	800c368 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c35e:	f001 faf1 	bl	800d944 <pvTaskIncrementMutexHeldCount>
 800c362:	4602      	mov	r2, r0
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00f      	beq.n	800c390 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c372:	3310      	adds	r3, #16
 800c374:	4618      	mov	r0, r3
 800c376:	f000 ff85 	bl	800d284 <xTaskRemoveFromEventList>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d007      	beq.n	800c390 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c380:	4b53      	ldr	r3, [pc, #332]	; (800c4d0 <xQueueSemaphoreTake+0x20c>)
 800c382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c386:	601a      	str	r2, [r3, #0]
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c390:	f002 f9c2 	bl	800e718 <vPortExitCritical>
				return pdPASS;
 800c394:	2301      	movs	r3, #1
 800c396:	e096      	b.n	800c4c6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d110      	bne.n	800c3c0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d009      	beq.n	800c3b8 <xQueueSemaphoreTake+0xf4>
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	617b      	str	r3, [r7, #20]
 800c3b6:	e7fe      	b.n	800c3b6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c3b8:	f002 f9ae 	bl	800e718 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	e082      	b.n	800c4c6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d106      	bne.n	800c3d4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 ffbe 	bl	800d34c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3d4:	f002 f9a0 	bl	800e718 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3d8:	f000 fd00 	bl	800cddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3dc:	f002 f96e 	bl	800e6bc <vPortEnterCritical>
 800c3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3e6:	b25b      	sxtb	r3, r3
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ec:	d103      	bne.n	800c3f6 <xQueueSemaphoreTake+0x132>
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3fc:	b25b      	sxtb	r3, r3
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c402:	d103      	bne.n	800c40c <xQueueSemaphoreTake+0x148>
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	2200      	movs	r2, #0
 800c408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c40c:	f002 f984 	bl	800e718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c410:	463a      	mov	r2, r7
 800c412:	f107 030c 	add.w	r3, r7, #12
 800c416:	4611      	mov	r1, r2
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 ffad 	bl	800d378 <xTaskCheckForTimeOut>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d132      	bne.n	800c48a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c426:	f000 f9ee 	bl	800c806 <prvIsQueueEmpty>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d026      	beq.n	800c47e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d109      	bne.n	800c44c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c438:	f002 f940 	bl	800e6bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	4618      	mov	r0, r3
 800c442:	f001 f92b 	bl	800d69c <xTaskPriorityInherit>
 800c446:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c448:	f002 f966 	bl	800e718 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44e:	3324      	adds	r3, #36	; 0x24
 800c450:	683a      	ldr	r2, [r7, #0]
 800c452:	4611      	mov	r1, r2
 800c454:	4618      	mov	r0, r3
 800c456:	f000 fec7 	bl	800d1e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c45a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c45c:	f000 f981 	bl	800c762 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c460:	f000 fd02 	bl	800ce68 <xTaskResumeAll>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	f47f af69 	bne.w	800c33e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c46c:	4b18      	ldr	r3, [pc, #96]	; (800c4d0 <xQueueSemaphoreTake+0x20c>)
 800c46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	e75f      	b.n	800c33e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c47e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c480:	f000 f96f 	bl	800c762 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c484:	f000 fcf0 	bl	800ce68 <xTaskResumeAll>
 800c488:	e759      	b.n	800c33e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c48c:	f000 f969 	bl	800c762 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c490:	f000 fcea 	bl	800ce68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c496:	f000 f9b6 	bl	800c806 <prvIsQueueEmpty>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f43f af4e 	beq.w	800c33e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00d      	beq.n	800c4c4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c4a8:	f002 f908 	bl	800e6bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c4ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4ae:	f000 f8b0 	bl	800c612 <prvGetDisinheritPriorityAfterTimeout>
 800c4b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f001 f9c2 	bl	800d844 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c4c0:	f002 f92a 	bl	800e718 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3738      	adds	r7, #56	; 0x38
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	e000ed04 	.word	0xe000ed04

0800c4d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b08e      	sub	sp, #56	; 0x38
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d109      	bne.n	800c4fe <xQueueReceiveFromISR+0x2a>
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	623b      	str	r3, [r7, #32]
 800c4fc:	e7fe      	b.n	800c4fc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d103      	bne.n	800c50c <xQueueReceiveFromISR+0x38>
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <xQueueReceiveFromISR+0x3c>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e000      	b.n	800c512 <xQueueReceiveFromISR+0x3e>
 800c510:	2300      	movs	r3, #0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d109      	bne.n	800c52a <xQueueReceiveFromISR+0x56>
 800c516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	61fb      	str	r3, [r7, #28]
 800c528:	e7fe      	b.n	800c528 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c52a:	f002 f9a3 	bl	800e874 <vPortValidateInterruptPriority>
	__asm volatile
 800c52e:	f3ef 8211 	mrs	r2, BASEPRI
 800c532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	61ba      	str	r2, [r7, #24]
 800c544:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c546:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c548:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	2b00      	cmp	r3, #0
 800c554:	d02f      	beq.n	800c5b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c560:	68b9      	ldr	r1, [r7, #8]
 800c562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c564:	f000 f8d7 	bl	800c716 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56a:	1e5a      	subs	r2, r3, #1
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c578:	d112      	bne.n	800c5a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d016      	beq.n	800c5b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	3310      	adds	r3, #16
 800c586:	4618      	mov	r0, r3
 800c588:	f000 fe7c 	bl	800d284 <xTaskRemoveFromEventList>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00e      	beq.n	800c5b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00b      	beq.n	800c5b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	601a      	str	r2, [r3, #0]
 800c59e:	e007      	b.n	800c5b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	b25a      	sxtb	r2, r3
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b4:	e001      	b.n	800c5ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3738      	adds	r7, #56	; 0x38
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d109      	bne.n	800c5f4 <vQueueDelete+0x26>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	60bb      	str	r3, [r7, #8]
 800c5f2:	e7fe      	b.n	800c5f2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f000 f95d 	bl	800c8b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c600:	2b00      	cmp	r3, #0
 800c602:	d102      	bne.n	800c60a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f002 fa35 	bl	800ea74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c60a:	bf00      	nop
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c612:	b480      	push	{r7}
 800c614:	b085      	sub	sp, #20
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d006      	beq.n	800c630 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	e001      	b.n	800c634 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c630:	2300      	movs	r3, #0
 800c632:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c634:	68fb      	ldr	r3, [r7, #12]
	}
 800c636:	4618      	mov	r0, r3
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b086      	sub	sp, #24
 800c646:	af00      	add	r7, sp, #0
 800c648:	60f8      	str	r0, [r7, #12]
 800c64a:	60b9      	str	r1, [r7, #8]
 800c64c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c656:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d10d      	bne.n	800c67c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d14d      	bne.n	800c704 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f001 f87d 	bl	800d76c <xTaskPriorityDisinherit>
 800c672:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2200      	movs	r2, #0
 800c678:	609a      	str	r2, [r3, #8]
 800c67a:	e043      	b.n	800c704 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d119      	bne.n	800c6b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6858      	ldr	r0, [r3, #4]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68a:	461a      	mov	r2, r3
 800c68c:	68b9      	ldr	r1, [r7, #8]
 800c68e:	f004 f8d3 	bl	8010838 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69a:	441a      	add	r2, r3
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	685a      	ldr	r2, [r3, #4]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d32b      	bcc.n	800c704 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	605a      	str	r2, [r3, #4]
 800c6b4:	e026      	b.n	800c704 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	68d8      	ldr	r0, [r3, #12]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6be:	461a      	mov	r2, r3
 800c6c0:	68b9      	ldr	r1, [r7, #8]
 800c6c2:	f004 f8b9 	bl	8010838 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	68da      	ldr	r2, [r3, #12]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ce:	425b      	negs	r3, r3
 800c6d0:	441a      	add	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	68da      	ldr	r2, [r3, #12]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d207      	bcs.n	800c6f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	689a      	ldr	r2, [r3, #8]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ea:	425b      	negs	r3, r3
 800c6ec:	441a      	add	r2, r3
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d105      	bne.n	800c704 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	3b01      	subs	r3, #1
 800c702:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	1c5a      	adds	r2, r3, #1
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c70c:	697b      	ldr	r3, [r7, #20]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3718      	adds	r7, #24
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b082      	sub	sp, #8
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c724:	2b00      	cmp	r3, #0
 800c726:	d018      	beq.n	800c75a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	68da      	ldr	r2, [r3, #12]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c730:	441a      	add	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68da      	ldr	r2, [r3, #12]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d303      	bcc.n	800c74a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68d9      	ldr	r1, [r3, #12]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c752:	461a      	mov	r2, r3
 800c754:	6838      	ldr	r0, [r7, #0]
 800c756:	f004 f86f 	bl	8010838 <memcpy>
	}
}
 800c75a:	bf00      	nop
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b084      	sub	sp, #16
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c76a:	f001 ffa7 	bl	800e6bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c774:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c776:	e011      	b.n	800c79c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d012      	beq.n	800c7a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3324      	adds	r3, #36	; 0x24
 800c784:	4618      	mov	r0, r3
 800c786:	f000 fd7d 	bl	800d284 <xTaskRemoveFromEventList>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d001      	beq.n	800c794 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c790:	f000 fe52 	bl	800d438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	3b01      	subs	r3, #1
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c79c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	dce9      	bgt.n	800c778 <prvUnlockQueue+0x16>
 800c7a4:	e000      	b.n	800c7a8 <prvUnlockQueue+0x46>
					break;
 800c7a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	22ff      	movs	r2, #255	; 0xff
 800c7ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c7b0:	f001 ffb2 	bl	800e718 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c7b4:	f001 ff82 	bl	800e6bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7c0:	e011      	b.n	800c7e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d012      	beq.n	800c7f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	3310      	adds	r3, #16
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f000 fd58 	bl	800d284 <xTaskRemoveFromEventList>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c7da:	f000 fe2d 	bl	800d438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c7de:	7bbb      	ldrb	r3, [r7, #14]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	dce9      	bgt.n	800c7c2 <prvUnlockQueue+0x60>
 800c7ee:	e000      	b.n	800c7f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c7f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	22ff      	movs	r2, #255	; 0xff
 800c7f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c7fa:	f001 ff8d 	bl	800e718 <vPortExitCritical>
}
 800c7fe:	bf00      	nop
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b084      	sub	sp, #16
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c80e:	f001 ff55 	bl	800e6bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c816:	2b00      	cmp	r3, #0
 800c818:	d102      	bne.n	800c820 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c81a:	2301      	movs	r3, #1
 800c81c:	60fb      	str	r3, [r7, #12]
 800c81e:	e001      	b.n	800c824 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c820:	2300      	movs	r3, #0
 800c822:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c824:	f001 ff78 	bl	800e718 <vPortExitCritical>

	return xReturn;
 800c828:	68fb      	ldr	r3, [r7, #12]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c83a:	f001 ff3f 	bl	800e6bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c846:	429a      	cmp	r2, r3
 800c848:	d102      	bne.n	800c850 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c84a:	2301      	movs	r3, #1
 800c84c:	60fb      	str	r3, [r7, #12]
 800c84e:	e001      	b.n	800c854 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c850:	2300      	movs	r3, #0
 800c852:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c854:	f001 ff60 	bl	800e718 <vPortExitCritical>

	return xReturn;
 800c858:	68fb      	ldr	r3, [r7, #12]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c86e:	2300      	movs	r3, #0
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	e014      	b.n	800c89e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c874:	4a0e      	ldr	r2, [pc, #56]	; (800c8b0 <vQueueAddToRegistry+0x4c>)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10b      	bne.n	800c898 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c880:	490b      	ldr	r1, [pc, #44]	; (800c8b0 <vQueueAddToRegistry+0x4c>)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c88a:	4a09      	ldr	r2, [pc, #36]	; (800c8b0 <vQueueAddToRegistry+0x4c>)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	00db      	lsls	r3, r3, #3
 800c890:	4413      	add	r3, r2
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c896:	e005      	b.n	800c8a4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	3301      	adds	r3, #1
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b07      	cmp	r3, #7
 800c8a2:	d9e7      	bls.n	800c874 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8a4:	bf00      	nop
 800c8a6:	3714      	adds	r7, #20
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr
 800c8b0:	20004e64 	.word	0x20004e64

0800c8b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8bc:	2300      	movs	r3, #0
 800c8be:	60fb      	str	r3, [r7, #12]
 800c8c0:	e016      	b.n	800c8f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c8c2:	4a10      	ldr	r2, [pc, #64]	; (800c904 <vQueueUnregisterQueue+0x50>)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	4413      	add	r3, r2
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d10b      	bne.n	800c8ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c8d2:	4a0c      	ldr	r2, [pc, #48]	; (800c904 <vQueueUnregisterQueue+0x50>)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c8dc:	4a09      	ldr	r2, [pc, #36]	; (800c904 <vQueueUnregisterQueue+0x50>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	4413      	add	r3, r2
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	605a      	str	r2, [r3, #4]
				break;
 800c8e8:	e005      	b.n	800c8f6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	60fb      	str	r3, [r7, #12]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2b07      	cmp	r3, #7
 800c8f4:	d9e5      	bls.n	800c8c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c8f6:	bf00      	nop
 800c8f8:	3714      	adds	r7, #20
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	20004e64 	.word	0x20004e64

0800c908 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c918:	f001 fed0 	bl	800e6bc <vPortEnterCritical>
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c922:	b25b      	sxtb	r3, r3
 800c924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c928:	d103      	bne.n	800c932 <vQueueWaitForMessageRestricted+0x2a>
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c938:	b25b      	sxtb	r3, r3
 800c93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c93e:	d103      	bne.n	800c948 <vQueueWaitForMessageRestricted+0x40>
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c948:	f001 fee6 	bl	800e718 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c950:	2b00      	cmp	r3, #0
 800c952:	d106      	bne.n	800c962 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	3324      	adds	r3, #36	; 0x24
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	68b9      	ldr	r1, [r7, #8]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 fc67 	bl	800d230 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c962:	6978      	ldr	r0, [r7, #20]
 800c964:	f7ff fefd 	bl	800c762 <prvUnlockQueue>
	}
 800c968:	bf00      	nop
 800c96a:	3718      	adds	r7, #24
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c970:	b580      	push	{r7, lr}
 800c972:	b08e      	sub	sp, #56	; 0x38
 800c974:	af04      	add	r7, sp, #16
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
 800c97c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c980:	2b00      	cmp	r3, #0
 800c982:	d109      	bne.n	800c998 <xTaskCreateStatic+0x28>
 800c984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	623b      	str	r3, [r7, #32]
 800c996:	e7fe      	b.n	800c996 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d109      	bne.n	800c9b2 <xTaskCreateStatic+0x42>
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	61fb      	str	r3, [r7, #28]
 800c9b0:	e7fe      	b.n	800c9b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c9b2:	235c      	movs	r3, #92	; 0x5c
 800c9b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	2b5c      	cmp	r3, #92	; 0x5c
 800c9ba:	d009      	beq.n	800c9d0 <xTaskCreateStatic+0x60>
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	61bb      	str	r3, [r7, #24]
 800c9ce:	e7fe      	b.n	800c9ce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d01e      	beq.n	800ca16 <xTaskCreateStatic+0xa6>
 800c9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d01b      	beq.n	800ca16 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	9303      	str	r3, [sp, #12]
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	9302      	str	r3, [sp, #8]
 800c9f8:	f107 0314 	add.w	r3, r7, #20
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	68b9      	ldr	r1, [r7, #8]
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 f850 	bl	800caae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca10:	f000 f8dc 	bl	800cbcc <prvAddNewTaskToReadyList>
 800ca14:	e001      	b.n	800ca1a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ca16:	2300      	movs	r3, #0
 800ca18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca1a:	697b      	ldr	r3, [r7, #20]
	}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3728      	adds	r7, #40	; 0x28
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08c      	sub	sp, #48	; 0x30
 800ca28:	af04      	add	r7, sp, #16
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	603b      	str	r3, [r7, #0]
 800ca30:	4613      	mov	r3, r2
 800ca32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca34:	88fb      	ldrh	r3, [r7, #6]
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f001 ff59 	bl	800e8f0 <pvPortMalloc>
 800ca3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00e      	beq.n	800ca64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca46:	205c      	movs	r0, #92	; 0x5c
 800ca48:	f001 ff52 	bl	800e8f0 <pvPortMalloc>
 800ca4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d003      	beq.n	800ca5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	631a      	str	r2, [r3, #48]	; 0x30
 800ca5a:	e005      	b.n	800ca68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca5c:	6978      	ldr	r0, [r7, #20]
 800ca5e:	f002 f809 	bl	800ea74 <vPortFree>
 800ca62:	e001      	b.n	800ca68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca64:	2300      	movs	r3, #0
 800ca66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d017      	beq.n	800ca9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca76:	88fa      	ldrh	r2, [r7, #6]
 800ca78:	2300      	movs	r3, #0
 800ca7a:	9303      	str	r3, [sp, #12]
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	9302      	str	r3, [sp, #8]
 800ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca82:	9301      	str	r3, [sp, #4]
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	68b9      	ldr	r1, [r7, #8]
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f000 f80e 	bl	800caae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca92:	69f8      	ldr	r0, [r7, #28]
 800ca94:	f000 f89a 	bl	800cbcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	61bb      	str	r3, [r7, #24]
 800ca9c:	e002      	b.n	800caa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca9e:	f04f 33ff 	mov.w	r3, #4294967295
 800caa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800caa4:	69bb      	ldr	r3, [r7, #24]
	}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3720      	adds	r7, #32
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b088      	sub	sp, #32
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	60f8      	str	r0, [r7, #12]
 800cab6:	60b9      	str	r1, [r7, #8]
 800cab8:	607a      	str	r2, [r7, #4]
 800caba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	461a      	mov	r2, r3
 800cac6:	21a5      	movs	r1, #165	; 0xa5
 800cac8:	f003 fec1 	bl	801084e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cad6:	3b01      	subs	r3, #1
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	4413      	add	r3, r2
 800cadc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	f023 0307 	bic.w	r3, r3, #7
 800cae4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	f003 0307 	and.w	r3, r3, #7
 800caec:	2b00      	cmp	r3, #0
 800caee:	d009      	beq.n	800cb04 <prvInitialiseNewTask+0x56>
 800caf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf4:	f383 8811 	msr	BASEPRI, r3
 800caf8:	f3bf 8f6f 	isb	sy
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	617b      	str	r3, [r7, #20]
 800cb02:	e7fe      	b.n	800cb02 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d01f      	beq.n	800cb4a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	61fb      	str	r3, [r7, #28]
 800cb0e:	e012      	b.n	800cb36 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	4413      	add	r3, r2
 800cb16:	7819      	ldrb	r1, [r3, #0]
 800cb18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	3334      	adds	r3, #52	; 0x34
 800cb20:	460a      	mov	r2, r1
 800cb22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	4413      	add	r3, r2
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d006      	beq.n	800cb3e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	3301      	adds	r3, #1
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	2b0f      	cmp	r3, #15
 800cb3a:	d9e9      	bls.n	800cb10 <prvInitialiseNewTask+0x62>
 800cb3c:	e000      	b.n	800cb40 <prvInitialiseNewTask+0x92>
			{
				break;
 800cb3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	2200      	movs	r2, #0
 800cb44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb48:	e003      	b.n	800cb52 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	2b37      	cmp	r3, #55	; 0x37
 800cb56:	d901      	bls.n	800cb5c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb58:	2337      	movs	r3, #55	; 0x37
 800cb5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	3304      	adds	r3, #4
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe fdc6 	bl	800b704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	3318      	adds	r3, #24
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fe fdc1 	bl	800b704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	2200      	movs	r2, #0
 800cba2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	68f9      	ldr	r1, [r7, #12]
 800cbaa:	69b8      	ldr	r0, [r7, #24]
 800cbac:	f001 fc60 	bl	800e470 <pxPortInitialiseStack>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbc2:	bf00      	nop
 800cbc4:	3720      	adds	r7, #32
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cbd4:	f001 fd72 	bl	800e6bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cbd8:	4b2d      	ldr	r3, [pc, #180]	; (800cc90 <prvAddNewTaskToReadyList+0xc4>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	4a2c      	ldr	r2, [pc, #176]	; (800cc90 <prvAddNewTaskToReadyList+0xc4>)
 800cbe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cbe2:	4b2c      	ldr	r3, [pc, #176]	; (800cc94 <prvAddNewTaskToReadyList+0xc8>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d109      	bne.n	800cbfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cbea:	4a2a      	ldr	r2, [pc, #168]	; (800cc94 <prvAddNewTaskToReadyList+0xc8>)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cbf0:	4b27      	ldr	r3, [pc, #156]	; (800cc90 <prvAddNewTaskToReadyList+0xc4>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d110      	bne.n	800cc1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cbf8:	f000 fc68 	bl	800d4cc <prvInitialiseTaskLists>
 800cbfc:	e00d      	b.n	800cc1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cbfe:	4b26      	ldr	r3, [pc, #152]	; (800cc98 <prvAddNewTaskToReadyList+0xcc>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d109      	bne.n	800cc1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc06:	4b23      	ldr	r3, [pc, #140]	; (800cc94 <prvAddNewTaskToReadyList+0xc8>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d802      	bhi.n	800cc1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc14:	4a1f      	ldr	r2, [pc, #124]	; (800cc94 <prvAddNewTaskToReadyList+0xc8>)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc1a:	4b20      	ldr	r3, [pc, #128]	; (800cc9c <prvAddNewTaskToReadyList+0xd0>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	4a1e      	ldr	r2, [pc, #120]	; (800cc9c <prvAddNewTaskToReadyList+0xd0>)
 800cc22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc24:	4b1d      	ldr	r3, [pc, #116]	; (800cc9c <prvAddNewTaskToReadyList+0xd0>)
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc30:	4b1b      	ldr	r3, [pc, #108]	; (800cca0 <prvAddNewTaskToReadyList+0xd4>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d903      	bls.n	800cc40 <prvAddNewTaskToReadyList+0x74>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3c:	4a18      	ldr	r2, [pc, #96]	; (800cca0 <prvAddNewTaskToReadyList+0xd4>)
 800cc3e:	6013      	str	r3, [r2, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc44:	4613      	mov	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	4a15      	ldr	r2, [pc, #84]	; (800cca4 <prvAddNewTaskToReadyList+0xd8>)
 800cc4e:	441a      	add	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	3304      	adds	r3, #4
 800cc54:	4619      	mov	r1, r3
 800cc56:	4610      	mov	r0, r2
 800cc58:	f7fe fd61 	bl	800b71e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc5c:	f001 fd5c 	bl	800e718 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc60:	4b0d      	ldr	r3, [pc, #52]	; (800cc98 <prvAddNewTaskToReadyList+0xcc>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00e      	beq.n	800cc86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <prvAddNewTaskToReadyList+0xc8>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d207      	bcs.n	800cc86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc76:	4b0c      	ldr	r3, [pc, #48]	; (800cca8 <prvAddNewTaskToReadyList+0xdc>)
 800cc78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc7c:	601a      	str	r2, [r3, #0]
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc86:	bf00      	nop
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	200020c8 	.word	0x200020c8
 800cc94:	20001bf4 	.word	0x20001bf4
 800cc98:	200020d4 	.word	0x200020d4
 800cc9c:	200020e4 	.word	0x200020e4
 800cca0:	200020d0 	.word	0x200020d0
 800cca4:	20001bf8 	.word	0x20001bf8
 800cca8:	e000ed04 	.word	0xe000ed04

0800ccac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d016      	beq.n	800ccec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ccbe:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <vTaskDelay+0x60>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d009      	beq.n	800ccda <vTaskDelay+0x2e>
 800ccc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	60bb      	str	r3, [r7, #8]
 800ccd8:	e7fe      	b.n	800ccd8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ccda:	f000 f87f 	bl	800cddc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ccde:	2100      	movs	r1, #0
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f001 f82b 	bl	800dd3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cce6:	f000 f8bf 	bl	800ce68 <xTaskResumeAll>
 800ccea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d107      	bne.n	800cd02 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ccf2:	4b07      	ldr	r3, [pc, #28]	; (800cd10 <vTaskDelay+0x64>)
 800ccf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd02:	bf00      	nop
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	200020f0 	.word	0x200020f0
 800cd10:	e000ed04 	.word	0xe000ed04

0800cd14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b08a      	sub	sp, #40	; 0x28
 800cd18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd22:	463a      	mov	r2, r7
 800cd24:	1d39      	adds	r1, r7, #4
 800cd26:	f107 0308 	add.w	r3, r7, #8
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fe fc96 	bl	800b65c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	9202      	str	r2, [sp, #8]
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	2300      	movs	r3, #0
 800cd40:	460a      	mov	r2, r1
 800cd42:	4920      	ldr	r1, [pc, #128]	; (800cdc4 <vTaskStartScheduler+0xb0>)
 800cd44:	4820      	ldr	r0, [pc, #128]	; (800cdc8 <vTaskStartScheduler+0xb4>)
 800cd46:	f7ff fe13 	bl	800c970 <xTaskCreateStatic>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	4b1f      	ldr	r3, [pc, #124]	; (800cdcc <vTaskStartScheduler+0xb8>)
 800cd4e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd50:	4b1e      	ldr	r3, [pc, #120]	; (800cdcc <vTaskStartScheduler+0xb8>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d002      	beq.n	800cd5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	617b      	str	r3, [r7, #20]
 800cd5c:	e001      	b.n	800cd62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d102      	bne.n	800cd6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd68:	f001 f83c 	bl	800dde4 <xTimerCreateTimerTask>
 800cd6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d115      	bne.n	800cda0 <vTaskStartScheduler+0x8c>
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd86:	4b12      	ldr	r3, [pc, #72]	; (800cdd0 <vTaskStartScheduler+0xbc>)
 800cd88:	f04f 32ff 	mov.w	r2, #4294967295
 800cd8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd8e:	4b11      	ldr	r3, [pc, #68]	; (800cdd4 <vTaskStartScheduler+0xc0>)
 800cd90:	2201      	movs	r2, #1
 800cd92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd94:	4b10      	ldr	r3, [pc, #64]	; (800cdd8 <vTaskStartScheduler+0xc4>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd9a:	f001 fbf1 	bl	800e580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd9e:	e00d      	b.n	800cdbc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda6:	d109      	bne.n	800cdbc <vTaskStartScheduler+0xa8>
 800cda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdac:	f383 8811 	msr	BASEPRI, r3
 800cdb0:	f3bf 8f6f 	isb	sy
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	e7fe      	b.n	800cdba <vTaskStartScheduler+0xa6>
}
 800cdbc:	bf00      	nop
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	0801092c 	.word	0x0801092c
 800cdc8:	0800d451 	.word	0x0800d451
 800cdcc:	200020ec 	.word	0x200020ec
 800cdd0:	200020e8 	.word	0x200020e8
 800cdd4:	200020d4 	.word	0x200020d4
 800cdd8:	200020cc 	.word	0x200020cc

0800cddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cddc:	b480      	push	{r7}
 800cdde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cde0:	4b04      	ldr	r3, [pc, #16]	; (800cdf4 <vTaskSuspendAll+0x18>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	3301      	adds	r3, #1
 800cde6:	4a03      	ldr	r2, [pc, #12]	; (800cdf4 <vTaskSuspendAll+0x18>)
 800cde8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cdea:	bf00      	nop
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	200020f0 	.word	0x200020f0

0800cdf8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800ce02:	4b14      	ldr	r3, [pc, #80]	; (800ce54 <prvGetExpectedIdleTime+0x5c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ce0e:	4b12      	ldr	r3, [pc, #72]	; (800ce58 <prvGetExpectedIdleTime+0x60>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d002      	beq.n	800ce1e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	607b      	str	r3, [r7, #4]
 800ce1c:	e012      	b.n	800ce44 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800ce1e:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <prvGetExpectedIdleTime+0x64>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d902      	bls.n	800ce2c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	607b      	str	r3, [r7, #4]
 800ce2a:	e00b      	b.n	800ce44 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	607b      	str	r3, [r7, #4]
 800ce36:	e005      	b.n	800ce44 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800ce38:	4b09      	ldr	r3, [pc, #36]	; (800ce60 <prvGetExpectedIdleTime+0x68>)
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	4b09      	ldr	r3, [pc, #36]	; (800ce64 <prvGetExpectedIdleTime+0x6c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800ce44:	687b      	ldr	r3, [r7, #4]
	}
 800ce46:	4618      	mov	r0, r3
 800ce48:	370c      	adds	r7, #12
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	200020d0 	.word	0x200020d0
 800ce58:	20001bf4 	.word	0x20001bf4
 800ce5c:	20001bf8 	.word	0x20001bf8
 800ce60:	200020e8 	.word	0x200020e8
 800ce64:	200020cc 	.word	0x200020cc

0800ce68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce72:	2300      	movs	r3, #0
 800ce74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce76:	4b41      	ldr	r3, [pc, #260]	; (800cf7c <xTaskResumeAll+0x114>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d109      	bne.n	800ce92 <xTaskResumeAll+0x2a>
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	603b      	str	r3, [r7, #0]
 800ce90:	e7fe      	b.n	800ce90 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce92:	f001 fc13 	bl	800e6bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce96:	4b39      	ldr	r3, [pc, #228]	; (800cf7c <xTaskResumeAll+0x114>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	4a37      	ldr	r2, [pc, #220]	; (800cf7c <xTaskResumeAll+0x114>)
 800ce9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cea0:	4b36      	ldr	r3, [pc, #216]	; (800cf7c <xTaskResumeAll+0x114>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d162      	bne.n	800cf6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cea8:	4b35      	ldr	r3, [pc, #212]	; (800cf80 <xTaskResumeAll+0x118>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d05e      	beq.n	800cf6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ceb0:	e02f      	b.n	800cf12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceb2:	4b34      	ldr	r3, [pc, #208]	; (800cf84 <xTaskResumeAll+0x11c>)
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	3318      	adds	r3, #24
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fe fc8a 	bl	800b7d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	3304      	adds	r3, #4
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe fc85 	bl	800b7d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced2:	4b2d      	ldr	r3, [pc, #180]	; (800cf88 <xTaskResumeAll+0x120>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d903      	bls.n	800cee2 <xTaskResumeAll+0x7a>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cede:	4a2a      	ldr	r2, [pc, #168]	; (800cf88 <xTaskResumeAll+0x120>)
 800cee0:	6013      	str	r3, [r2, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4a27      	ldr	r2, [pc, #156]	; (800cf8c <xTaskResumeAll+0x124>)
 800cef0:	441a      	add	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3304      	adds	r3, #4
 800cef6:	4619      	mov	r1, r3
 800cef8:	4610      	mov	r0, r2
 800cefa:	f7fe fc10 	bl	800b71e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf02:	4b23      	ldr	r3, [pc, #140]	; (800cf90 <xTaskResumeAll+0x128>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d302      	bcc.n	800cf12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cf0c:	4b21      	ldr	r3, [pc, #132]	; (800cf94 <xTaskResumeAll+0x12c>)
 800cf0e:	2201      	movs	r2, #1
 800cf10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf12:	4b1c      	ldr	r3, [pc, #112]	; (800cf84 <xTaskResumeAll+0x11c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1cb      	bne.n	800ceb2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf20:	f000 fb6e 	bl	800d600 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cf24:	4b1c      	ldr	r3, [pc, #112]	; (800cf98 <xTaskResumeAll+0x130>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d010      	beq.n	800cf52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf30:	f000 f846 	bl	800cfc0 <xTaskIncrementTick>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d002      	beq.n	800cf40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cf3a:	4b16      	ldr	r3, [pc, #88]	; (800cf94 <xTaskResumeAll+0x12c>)
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f1      	bne.n	800cf30 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800cf4c:	4b12      	ldr	r3, [pc, #72]	; (800cf98 <xTaskResumeAll+0x130>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf52:	4b10      	ldr	r3, [pc, #64]	; (800cf94 <xTaskResumeAll+0x12c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d009      	beq.n	800cf6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf5e:	4b0f      	ldr	r3, [pc, #60]	; (800cf9c <xTaskResumeAll+0x134>)
 800cf60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf64:	601a      	str	r2, [r3, #0]
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf6e:	f001 fbd3 	bl	800e718 <vPortExitCritical>

	return xAlreadyYielded;
 800cf72:	68bb      	ldr	r3, [r7, #8]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	200020f0 	.word	0x200020f0
 800cf80:	200020c8 	.word	0x200020c8
 800cf84:	20002088 	.word	0x20002088
 800cf88:	200020d0 	.word	0x200020d0
 800cf8c:	20001bf8 	.word	0x20001bf8
 800cf90:	20001bf4 	.word	0x20001bf4
 800cf94:	200020dc 	.word	0x200020dc
 800cf98:	200020d8 	.word	0x200020d8
 800cf9c:	e000ed04 	.word	0xe000ed04

0800cfa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cfa6:	4b05      	ldr	r3, [pc, #20]	; (800cfbc <xTaskGetTickCount+0x1c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cfac:	687b      	ldr	r3, [r7, #4]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	200020cc 	.word	0x200020cc

0800cfc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfca:	4b4e      	ldr	r3, [pc, #312]	; (800d104 <xTaskIncrementTick+0x144>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f040 8088 	bne.w	800d0e4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfd4:	4b4c      	ldr	r3, [pc, #304]	; (800d108 <xTaskIncrementTick+0x148>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfdc:	4a4a      	ldr	r2, [pc, #296]	; (800d108 <xTaskIncrementTick+0x148>)
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d11f      	bne.n	800d028 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfe8:	4b48      	ldr	r3, [pc, #288]	; (800d10c <xTaskIncrementTick+0x14c>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d009      	beq.n	800d006 <xTaskIncrementTick+0x46>
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	f383 8811 	msr	BASEPRI, r3
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	603b      	str	r3, [r7, #0]
 800d004:	e7fe      	b.n	800d004 <xTaskIncrementTick+0x44>
 800d006:	4b41      	ldr	r3, [pc, #260]	; (800d10c <xTaskIncrementTick+0x14c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]
 800d00c:	4b40      	ldr	r3, [pc, #256]	; (800d110 <xTaskIncrementTick+0x150>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a3e      	ldr	r2, [pc, #248]	; (800d10c <xTaskIncrementTick+0x14c>)
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	4a3e      	ldr	r2, [pc, #248]	; (800d110 <xTaskIncrementTick+0x150>)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6013      	str	r3, [r2, #0]
 800d01a:	4b3e      	ldr	r3, [pc, #248]	; (800d114 <xTaskIncrementTick+0x154>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	3301      	adds	r3, #1
 800d020:	4a3c      	ldr	r2, [pc, #240]	; (800d114 <xTaskIncrementTick+0x154>)
 800d022:	6013      	str	r3, [r2, #0]
 800d024:	f000 faec 	bl	800d600 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d028:	4b3b      	ldr	r3, [pc, #236]	; (800d118 <xTaskIncrementTick+0x158>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d349      	bcc.n	800d0c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d032:	4b36      	ldr	r3, [pc, #216]	; (800d10c <xTaskIncrementTick+0x14c>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d104      	bne.n	800d046 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d03c:	4b36      	ldr	r3, [pc, #216]	; (800d118 <xTaskIncrementTick+0x158>)
 800d03e:	f04f 32ff 	mov.w	r2, #4294967295
 800d042:	601a      	str	r2, [r3, #0]
					break;
 800d044:	e03f      	b.n	800d0c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d046:	4b31      	ldr	r3, [pc, #196]	; (800d10c <xTaskIncrementTick+0x14c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d056:	693a      	ldr	r2, [r7, #16]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d203      	bcs.n	800d066 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d05e:	4a2e      	ldr	r2, [pc, #184]	; (800d118 <xTaskIncrementTick+0x158>)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d064:	e02f      	b.n	800d0c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	3304      	adds	r3, #4
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fbb4 	bl	800b7d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d074:	2b00      	cmp	r3, #0
 800d076:	d004      	beq.n	800d082 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	3318      	adds	r3, #24
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fe fbab 	bl	800b7d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d086:	4b25      	ldr	r3, [pc, #148]	; (800d11c <xTaskIncrementTick+0x15c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d903      	bls.n	800d096 <xTaskIncrementTick+0xd6>
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d092:	4a22      	ldr	r2, [pc, #136]	; (800d11c <xTaskIncrementTick+0x15c>)
 800d094:	6013      	str	r3, [r2, #0]
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09a:	4613      	mov	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4a1f      	ldr	r2, [pc, #124]	; (800d120 <xTaskIncrementTick+0x160>)
 800d0a4:	441a      	add	r2, r3
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	f7fe fb36 	bl	800b71e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b6:	4b1b      	ldr	r3, [pc, #108]	; (800d124 <xTaskIncrementTick+0x164>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d3b8      	bcc.n	800d032 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0c4:	e7b5      	b.n	800d032 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d0c6:	4b17      	ldr	r3, [pc, #92]	; (800d124 <xTaskIncrementTick+0x164>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0cc:	4914      	ldr	r1, [pc, #80]	; (800d120 <xTaskIncrementTick+0x160>)
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4413      	add	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	440b      	add	r3, r1
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d907      	bls.n	800d0ee <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	617b      	str	r3, [r7, #20]
 800d0e2:	e004      	b.n	800d0ee <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d0e4:	4b10      	ldr	r3, [pc, #64]	; (800d128 <xTaskIncrementTick+0x168>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	4a0f      	ldr	r2, [pc, #60]	; (800d128 <xTaskIncrementTick+0x168>)
 800d0ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d0ee:	4b0f      	ldr	r3, [pc, #60]	; (800d12c <xTaskIncrementTick+0x16c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d001      	beq.n	800d0fa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d0fa:	697b      	ldr	r3, [r7, #20]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	200020f0 	.word	0x200020f0
 800d108:	200020cc 	.word	0x200020cc
 800d10c:	20002080 	.word	0x20002080
 800d110:	20002084 	.word	0x20002084
 800d114:	200020e0 	.word	0x200020e0
 800d118:	200020e8 	.word	0x200020e8
 800d11c:	200020d0 	.word	0x200020d0
 800d120:	20001bf8 	.word	0x20001bf8
 800d124:	20001bf4 	.word	0x20001bf4
 800d128:	200020d8 	.word	0x200020d8
 800d12c:	200020dc 	.word	0x200020dc

0800d130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d136:	4b27      	ldr	r3, [pc, #156]	; (800d1d4 <vTaskSwitchContext+0xa4>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d13e:	4b26      	ldr	r3, [pc, #152]	; (800d1d8 <vTaskSwitchContext+0xa8>)
 800d140:	2201      	movs	r2, #1
 800d142:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d144:	e040      	b.n	800d1c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d146:	4b24      	ldr	r3, [pc, #144]	; (800d1d8 <vTaskSwitchContext+0xa8>)
 800d148:	2200      	movs	r2, #0
 800d14a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d14c:	4b23      	ldr	r3, [pc, #140]	; (800d1dc <vTaskSwitchContext+0xac>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	60fb      	str	r3, [r7, #12]
 800d152:	e00f      	b.n	800d174 <vTaskSwitchContext+0x44>
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d109      	bne.n	800d16e <vTaskSwitchContext+0x3e>
 800d15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15e:	f383 8811 	msr	BASEPRI, r3
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	607b      	str	r3, [r7, #4]
 800d16c:	e7fe      	b.n	800d16c <vTaskSwitchContext+0x3c>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3b01      	subs	r3, #1
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	491a      	ldr	r1, [pc, #104]	; (800d1e0 <vTaskSwitchContext+0xb0>)
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	4613      	mov	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	440b      	add	r3, r1
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d0e5      	beq.n	800d154 <vTaskSwitchContext+0x24>
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	4613      	mov	r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4a13      	ldr	r2, [pc, #76]	; (800d1e0 <vTaskSwitchContext+0xb0>)
 800d194:	4413      	add	r3, r2
 800d196:	60bb      	str	r3, [r7, #8]
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	685a      	ldr	r2, [r3, #4]
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	605a      	str	r2, [r3, #4]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	685a      	ldr	r2, [r3, #4]
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	3308      	adds	r3, #8
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d104      	bne.n	800d1b8 <vTaskSwitchContext+0x88>
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	685a      	ldr	r2, [r3, #4]
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	605a      	str	r2, [r3, #4]
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	4a09      	ldr	r2, [pc, #36]	; (800d1e4 <vTaskSwitchContext+0xb4>)
 800d1c0:	6013      	str	r3, [r2, #0]
 800d1c2:	4a06      	ldr	r2, [pc, #24]	; (800d1dc <vTaskSwitchContext+0xac>)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6013      	str	r3, [r2, #0]
}
 800d1c8:	bf00      	nop
 800d1ca:	3714      	adds	r7, #20
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr
 800d1d4:	200020f0 	.word	0x200020f0
 800d1d8:	200020dc 	.word	0x200020dc
 800d1dc:	200020d0 	.word	0x200020d0
 800d1e0:	20001bf8 	.word	0x20001bf8
 800d1e4:	20001bf4 	.word	0x20001bf4

0800d1e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d109      	bne.n	800d20c <vTaskPlaceOnEventList+0x24>
 800d1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	60fb      	str	r3, [r7, #12]
 800d20a:	e7fe      	b.n	800d20a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d20c:	4b07      	ldr	r3, [pc, #28]	; (800d22c <vTaskPlaceOnEventList+0x44>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3318      	adds	r3, #24
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7fe faa6 	bl	800b766 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d21a:	2101      	movs	r1, #1
 800d21c:	6838      	ldr	r0, [r7, #0]
 800d21e:	f000 fd8d 	bl	800dd3c <prvAddCurrentTaskToDelayedList>
}
 800d222:	bf00      	nop
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	20001bf4 	.word	0x20001bf4

0800d230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d230:	b580      	push	{r7, lr}
 800d232:	b086      	sub	sp, #24
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d109      	bne.n	800d256 <vTaskPlaceOnEventListRestricted+0x26>
 800d242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	617b      	str	r3, [r7, #20]
 800d254:	e7fe      	b.n	800d254 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d256:	4b0a      	ldr	r3, [pc, #40]	; (800d280 <vTaskPlaceOnEventListRestricted+0x50>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3318      	adds	r3, #24
 800d25c:	4619      	mov	r1, r3
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f7fe fa5d 	bl	800b71e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d26a:	f04f 33ff 	mov.w	r3, #4294967295
 800d26e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	68b8      	ldr	r0, [r7, #8]
 800d274:	f000 fd62 	bl	800dd3c <prvAddCurrentTaskToDelayedList>
	}
 800d278:	bf00      	nop
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	20001bf4 	.word	0x20001bf4

0800d284 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d109      	bne.n	800d2ae <xTaskRemoveFromEventList+0x2a>
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	60fb      	str	r3, [r7, #12]
 800d2ac:	e7fe      	b.n	800d2ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	3318      	adds	r3, #24
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe fa90 	bl	800b7d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2b8:	4b1e      	ldr	r3, [pc, #120]	; (800d334 <xTaskRemoveFromEventList+0xb0>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d11f      	bne.n	800d300 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7fe fa87 	bl	800b7d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ce:	4b1a      	ldr	r3, [pc, #104]	; (800d338 <xTaskRemoveFromEventList+0xb4>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d903      	bls.n	800d2de <xTaskRemoveFromEventList+0x5a>
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2da:	4a17      	ldr	r2, [pc, #92]	; (800d338 <xTaskRemoveFromEventList+0xb4>)
 800d2dc:	6013      	str	r3, [r2, #0]
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4a14      	ldr	r2, [pc, #80]	; (800d33c <xTaskRemoveFromEventList+0xb8>)
 800d2ec:	441a      	add	r2, r3
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	3304      	adds	r3, #4
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	f7fe fa12 	bl	800b71e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800d2fa:	f000 f981 	bl	800d600 <prvResetNextTaskUnblockTime>
 800d2fe:	e005      	b.n	800d30c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	3318      	adds	r3, #24
 800d304:	4619      	mov	r1, r3
 800d306:	480e      	ldr	r0, [pc, #56]	; (800d340 <xTaskRemoveFromEventList+0xbc>)
 800d308:	f7fe fa09 	bl	800b71e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d310:	4b0c      	ldr	r3, [pc, #48]	; (800d344 <xTaskRemoveFromEventList+0xc0>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d316:	429a      	cmp	r2, r3
 800d318:	d905      	bls.n	800d326 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d31a:	2301      	movs	r3, #1
 800d31c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d31e:	4b0a      	ldr	r3, [pc, #40]	; (800d348 <xTaskRemoveFromEventList+0xc4>)
 800d320:	2201      	movs	r2, #1
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e001      	b.n	800d32a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d326:	2300      	movs	r3, #0
 800d328:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d32a:	697b      	ldr	r3, [r7, #20]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3718      	adds	r7, #24
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	200020f0 	.word	0x200020f0
 800d338:	200020d0 	.word	0x200020d0
 800d33c:	20001bf8 	.word	0x20001bf8
 800d340:	20002088 	.word	0x20002088
 800d344:	20001bf4 	.word	0x20001bf4
 800d348:	200020dc 	.word	0x200020dc

0800d34c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d354:	4b06      	ldr	r3, [pc, #24]	; (800d370 <vTaskInternalSetTimeOutState+0x24>)
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d35c:	4b05      	ldr	r3, [pc, #20]	; (800d374 <vTaskInternalSetTimeOutState+0x28>)
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	605a      	str	r2, [r3, #4]
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	200020e0 	.word	0x200020e0
 800d374:	200020cc 	.word	0x200020cc

0800d378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d109      	bne.n	800d39c <xTaskCheckForTimeOut+0x24>
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	613b      	str	r3, [r7, #16]
 800d39a:	e7fe      	b.n	800d39a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d109      	bne.n	800d3b6 <xTaskCheckForTimeOut+0x3e>
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	60fb      	str	r3, [r7, #12]
 800d3b4:	e7fe      	b.n	800d3b4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d3b6:	f001 f981 	bl	800e6bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d3ba:	4b1d      	ldr	r3, [pc, #116]	; (800d430 <xTaskCheckForTimeOut+0xb8>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	69ba      	ldr	r2, [r7, #24]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d2:	d102      	bne.n	800d3da <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	61fb      	str	r3, [r7, #28]
 800d3d8:	e023      	b.n	800d422 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	4b15      	ldr	r3, [pc, #84]	; (800d434 <xTaskCheckForTimeOut+0xbc>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d007      	beq.n	800d3f6 <xTaskCheckForTimeOut+0x7e>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d302      	bcc.n	800d3f6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	61fb      	str	r3, [r7, #28]
 800d3f4:	e015      	b.n	800d422 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	697a      	ldr	r2, [r7, #20]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d20b      	bcs.n	800d418 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	1ad2      	subs	r2, r2, r3
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7ff ff9d 	bl	800d34c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d412:	2300      	movs	r3, #0
 800d414:	61fb      	str	r3, [r7, #28]
 800d416:	e004      	b.n	800d422 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2200      	movs	r2, #0
 800d41c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d41e:	2301      	movs	r3, #1
 800d420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d422:	f001 f979 	bl	800e718 <vPortExitCritical>

	return xReturn;
 800d426:	69fb      	ldr	r3, [r7, #28]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3720      	adds	r7, #32
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	200020cc 	.word	0x200020cc
 800d434:	200020e0 	.word	0x200020e0

0800d438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d43c:	4b03      	ldr	r3, [pc, #12]	; (800d44c <vTaskMissedYield+0x14>)
 800d43e:	2201      	movs	r2, #1
 800d440:	601a      	str	r2, [r3, #0]
}
 800d442:	bf00      	nop
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	200020dc 	.word	0x200020dc

0800d450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d458:	f000 f878 	bl	800d54c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d45c:	4b17      	ldr	r3, [pc, #92]	; (800d4bc <prvIdleTask+0x6c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d907      	bls.n	800d474 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d464:	4b16      	ldr	r3, [pc, #88]	; (800d4c0 <prvIdleTask+0x70>)
 800d466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d46a:	601a      	str	r2, [r3, #0]
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800d474:	f7ff fcc0 	bl	800cdf8 <prvGetExpectedIdleTime>
 800d478:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d9eb      	bls.n	800d458 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800d480:	f7ff fcac 	bl	800cddc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800d484:	4b0f      	ldr	r3, [pc, #60]	; (800d4c4 <prvIdleTask+0x74>)
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	4b0f      	ldr	r3, [pc, #60]	; (800d4c8 <prvIdleTask+0x78>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d209      	bcs.n	800d4a4 <prvIdleTask+0x54>
 800d490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d494:	f383 8811 	msr	BASEPRI, r3
 800d498:	f3bf 8f6f 	isb	sy
 800d49c:	f3bf 8f4f 	dsb	sy
 800d4a0:	60bb      	str	r3, [r7, #8]
 800d4a2:	e7fe      	b.n	800d4a2 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800d4a4:	f7ff fca8 	bl	800cdf8 <prvGetExpectedIdleTime>
 800d4a8:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d902      	bls.n	800d4b6 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f7f2 ffe2 	bl	800047a <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800d4b6:	f7ff fcd7 	bl	800ce68 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800d4ba:	e7cd      	b.n	800d458 <prvIdleTask+0x8>
 800d4bc:	20001bf8 	.word	0x20001bf8
 800d4c0:	e000ed04 	.word	0xe000ed04
 800d4c4:	200020e8 	.word	0x200020e8
 800d4c8:	200020cc 	.word	0x200020cc

0800d4cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	607b      	str	r3, [r7, #4]
 800d4d6:	e00c      	b.n	800d4f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	4413      	add	r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	4a12      	ldr	r2, [pc, #72]	; (800d52c <prvInitialiseTaskLists+0x60>)
 800d4e4:	4413      	add	r3, r2
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fe f8ec 	bl	800b6c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	607b      	str	r3, [r7, #4]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b37      	cmp	r3, #55	; 0x37
 800d4f6:	d9ef      	bls.n	800d4d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d4f8:	480d      	ldr	r0, [pc, #52]	; (800d530 <prvInitialiseTaskLists+0x64>)
 800d4fa:	f7fe f8e3 	bl	800b6c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d4fe:	480d      	ldr	r0, [pc, #52]	; (800d534 <prvInitialiseTaskLists+0x68>)
 800d500:	f7fe f8e0 	bl	800b6c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d504:	480c      	ldr	r0, [pc, #48]	; (800d538 <prvInitialiseTaskLists+0x6c>)
 800d506:	f7fe f8dd 	bl	800b6c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d50a:	480c      	ldr	r0, [pc, #48]	; (800d53c <prvInitialiseTaskLists+0x70>)
 800d50c:	f7fe f8da 	bl	800b6c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d510:	480b      	ldr	r0, [pc, #44]	; (800d540 <prvInitialiseTaskLists+0x74>)
 800d512:	f7fe f8d7 	bl	800b6c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d516:	4b0b      	ldr	r3, [pc, #44]	; (800d544 <prvInitialiseTaskLists+0x78>)
 800d518:	4a05      	ldr	r2, [pc, #20]	; (800d530 <prvInitialiseTaskLists+0x64>)
 800d51a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d51c:	4b0a      	ldr	r3, [pc, #40]	; (800d548 <prvInitialiseTaskLists+0x7c>)
 800d51e:	4a05      	ldr	r2, [pc, #20]	; (800d534 <prvInitialiseTaskLists+0x68>)
 800d520:	601a      	str	r2, [r3, #0]
}
 800d522:	bf00      	nop
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	20001bf8 	.word	0x20001bf8
 800d530:	20002058 	.word	0x20002058
 800d534:	2000206c 	.word	0x2000206c
 800d538:	20002088 	.word	0x20002088
 800d53c:	2000209c 	.word	0x2000209c
 800d540:	200020b4 	.word	0x200020b4
 800d544:	20002080 	.word	0x20002080
 800d548:	20002084 	.word	0x20002084

0800d54c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d552:	e019      	b.n	800d588 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d554:	f001 f8b2 	bl	800e6bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d558:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <prvCheckTasksWaitingTermination+0x4c>)
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	3304      	adds	r3, #4
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe f937 	bl	800b7d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d56a:	4b0c      	ldr	r3, [pc, #48]	; (800d59c <prvCheckTasksWaitingTermination+0x50>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	3b01      	subs	r3, #1
 800d570:	4a0a      	ldr	r2, [pc, #40]	; (800d59c <prvCheckTasksWaitingTermination+0x50>)
 800d572:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d574:	4b0a      	ldr	r3, [pc, #40]	; (800d5a0 <prvCheckTasksWaitingTermination+0x54>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	3b01      	subs	r3, #1
 800d57a:	4a09      	ldr	r2, [pc, #36]	; (800d5a0 <prvCheckTasksWaitingTermination+0x54>)
 800d57c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d57e:	f001 f8cb 	bl	800e718 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f80e 	bl	800d5a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d588:	4b05      	ldr	r3, [pc, #20]	; (800d5a0 <prvCheckTasksWaitingTermination+0x54>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d1e1      	bne.n	800d554 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d590:	bf00      	nop
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	2000209c 	.word	0x2000209c
 800d59c:	200020c8 	.word	0x200020c8
 800d5a0:	200020b0 	.word	0x200020b0

0800d5a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d108      	bne.n	800d5c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f001 fa5a 	bl	800ea74 <vPortFree>
				vPortFree( pxTCB );
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f001 fa57 	bl	800ea74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d5c6:	e017      	b.n	800d5f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d103      	bne.n	800d5da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f001 fa4e 	bl	800ea74 <vPortFree>
	}
 800d5d8:	e00e      	b.n	800d5f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d009      	beq.n	800d5f8 <prvDeleteTCB+0x54>
 800d5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e8:	f383 8811 	msr	BASEPRI, r3
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	60fb      	str	r3, [r7, #12]
 800d5f6:	e7fe      	b.n	800d5f6 <prvDeleteTCB+0x52>
	}
 800d5f8:	bf00      	nop
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d606:	4b0c      	ldr	r3, [pc, #48]	; (800d638 <prvResetNextTaskUnblockTime+0x38>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d104      	bne.n	800d61a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d610:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <prvResetNextTaskUnblockTime+0x3c>)
 800d612:	f04f 32ff 	mov.w	r2, #4294967295
 800d616:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d618:	e008      	b.n	800d62c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d61a:	4b07      	ldr	r3, [pc, #28]	; (800d638 <prvResetNextTaskUnblockTime+0x38>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	4a04      	ldr	r2, [pc, #16]	; (800d63c <prvResetNextTaskUnblockTime+0x3c>)
 800d62a:	6013      	str	r3, [r2, #0]
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	20002080 	.word	0x20002080
 800d63c:	200020e8 	.word	0x200020e8

0800d640 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d646:	4b05      	ldr	r3, [pc, #20]	; (800d65c <xTaskGetCurrentTaskHandle+0x1c>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d64c:	687b      	ldr	r3, [r7, #4]
	}
 800d64e:	4618      	mov	r0, r3
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	20001bf4 	.word	0x20001bf4

0800d660 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d666:	4b0b      	ldr	r3, [pc, #44]	; (800d694 <xTaskGetSchedulerState+0x34>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d102      	bne.n	800d674 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d66e:	2301      	movs	r3, #1
 800d670:	607b      	str	r3, [r7, #4]
 800d672:	e008      	b.n	800d686 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d674:	4b08      	ldr	r3, [pc, #32]	; (800d698 <xTaskGetSchedulerState+0x38>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d102      	bne.n	800d682 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d67c:	2302      	movs	r3, #2
 800d67e:	607b      	str	r3, [r7, #4]
 800d680:	e001      	b.n	800d686 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d682:	2300      	movs	r3, #0
 800d684:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d686:	687b      	ldr	r3, [r7, #4]
	}
 800d688:	4618      	mov	r0, r3
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	200020d4 	.word	0x200020d4
 800d698:	200020f0 	.word	0x200020f0

0800d69c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d051      	beq.n	800d756 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b6:	4b2a      	ldr	r3, [pc, #168]	; (800d760 <xTaskPriorityInherit+0xc4>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d241      	bcs.n	800d744 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	db06      	blt.n	800d6d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6c8:	4b25      	ldr	r3, [pc, #148]	; (800d760 <xTaskPriorityInherit+0xc4>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	6959      	ldr	r1, [r3, #20]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6de:	4613      	mov	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4a1f      	ldr	r2, [pc, #124]	; (800d764 <xTaskPriorityInherit+0xc8>)
 800d6e8:	4413      	add	r3, r2
 800d6ea:	4299      	cmp	r1, r3
 800d6ec:	d122      	bne.n	800d734 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fe f870 	bl	800b7d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6f8:	4b19      	ldr	r3, [pc, #100]	; (800d760 <xTaskPriorityInherit+0xc4>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d706:	4b18      	ldr	r3, [pc, #96]	; (800d768 <xTaskPriorityInherit+0xcc>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d903      	bls.n	800d716 <xTaskPriorityInherit+0x7a>
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d712:	4a15      	ldr	r2, [pc, #84]	; (800d768 <xTaskPriorityInherit+0xcc>)
 800d714:	6013      	str	r3, [r2, #0]
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71a:	4613      	mov	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4413      	add	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4a10      	ldr	r2, [pc, #64]	; (800d764 <xTaskPriorityInherit+0xc8>)
 800d724:	441a      	add	r2, r3
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	3304      	adds	r3, #4
 800d72a:	4619      	mov	r1, r3
 800d72c:	4610      	mov	r0, r2
 800d72e:	f7fd fff6 	bl	800b71e <vListInsertEnd>
 800d732:	e004      	b.n	800d73e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d734:	4b0a      	ldr	r3, [pc, #40]	; (800d760 <xTaskPriorityInherit+0xc4>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d73e:	2301      	movs	r3, #1
 800d740:	60fb      	str	r3, [r7, #12]
 800d742:	e008      	b.n	800d756 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d748:	4b05      	ldr	r3, [pc, #20]	; (800d760 <xTaskPriorityInherit+0xc4>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74e:	429a      	cmp	r2, r3
 800d750:	d201      	bcs.n	800d756 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d752:	2301      	movs	r3, #1
 800d754:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d756:	68fb      	ldr	r3, [r7, #12]
	}
 800d758:	4618      	mov	r0, r3
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	20001bf4 	.word	0x20001bf4
 800d764:	20001bf8 	.word	0x20001bf8
 800d768:	200020d0 	.word	0x200020d0

0800d76c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d778:	2300      	movs	r3, #0
 800d77a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d054      	beq.n	800d82c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d782:	4b2d      	ldr	r3, [pc, #180]	; (800d838 <xTaskPriorityDisinherit+0xcc>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	693a      	ldr	r2, [r7, #16]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d009      	beq.n	800d7a0 <xTaskPriorityDisinherit+0x34>
 800d78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	e7fe      	b.n	800d79e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d109      	bne.n	800d7bc <xTaskPriorityDisinherit+0x50>
 800d7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ac:	f383 8811 	msr	BASEPRI, r3
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	60bb      	str	r3, [r7, #8]
 800d7ba:	e7fe      	b.n	800d7ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7c0:	1e5a      	subs	r2, r3, #1
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d02c      	beq.n	800d82c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d128      	bne.n	800d82c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	3304      	adds	r3, #4
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fd fffa 	bl	800b7d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7fc:	4b0f      	ldr	r3, [pc, #60]	; (800d83c <xTaskPriorityDisinherit+0xd0>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	429a      	cmp	r2, r3
 800d802:	d903      	bls.n	800d80c <xTaskPriorityDisinherit+0xa0>
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d808:	4a0c      	ldr	r2, [pc, #48]	; (800d83c <xTaskPriorityDisinherit+0xd0>)
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d810:	4613      	mov	r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4413      	add	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	4a09      	ldr	r2, [pc, #36]	; (800d840 <xTaskPriorityDisinherit+0xd4>)
 800d81a:	441a      	add	r2, r3
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	3304      	adds	r3, #4
 800d820:	4619      	mov	r1, r3
 800d822:	4610      	mov	r0, r2
 800d824:	f7fd ff7b 	bl	800b71e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d828:	2301      	movs	r3, #1
 800d82a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d82c:	697b      	ldr	r3, [r7, #20]
	}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	20001bf4 	.word	0x20001bf4
 800d83c:	200020d0 	.word	0x200020d0
 800d840:	20001bf8 	.word	0x20001bf8

0800d844 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d852:	2301      	movs	r3, #1
 800d854:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d068      	beq.n	800d92e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d860:	2b00      	cmp	r3, #0
 800d862:	d109      	bne.n	800d878 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	60fb      	str	r3, [r7, #12]
 800d876:	e7fe      	b.n	800d876 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d902      	bls.n	800d888 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	61fb      	str	r3, [r7, #28]
 800d886:	e002      	b.n	800d88e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d88c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d892:	69fa      	ldr	r2, [r7, #28]
 800d894:	429a      	cmp	r2, r3
 800d896:	d04a      	beq.n	800d92e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d89c:	697a      	ldr	r2, [r7, #20]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d145      	bne.n	800d92e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d8a2:	4b25      	ldr	r3, [pc, #148]	; (800d938 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	69ba      	ldr	r2, [r7, #24]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d109      	bne.n	800d8c0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	60bb      	str	r3, [r7, #8]
 800d8be:	e7fe      	b.n	800d8be <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	69fa      	ldr	r2, [r7, #28]
 800d8ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	db04      	blt.n	800d8de <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	6959      	ldr	r1, [r3, #20]
 800d8e2:	693a      	ldr	r2, [r7, #16]
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4413      	add	r3, r2
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	4a13      	ldr	r2, [pc, #76]	; (800d93c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d8ee:	4413      	add	r3, r2
 800d8f0:	4299      	cmp	r1, r3
 800d8f2:	d11c      	bne.n	800d92e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8f4:	69bb      	ldr	r3, [r7, #24]
 800d8f6:	3304      	adds	r3, #4
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fd ff6d 	bl	800b7d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d902:	4b0f      	ldr	r3, [pc, #60]	; (800d940 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	429a      	cmp	r2, r3
 800d908:	d903      	bls.n	800d912 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90e:	4a0c      	ldr	r2, [pc, #48]	; (800d940 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d910:	6013      	str	r3, [r2, #0]
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d916:	4613      	mov	r3, r2
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	4413      	add	r3, r2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4a07      	ldr	r2, [pc, #28]	; (800d93c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d920:	441a      	add	r2, r3
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	3304      	adds	r3, #4
 800d926:	4619      	mov	r1, r3
 800d928:	4610      	mov	r0, r2
 800d92a:	f7fd fef8 	bl	800b71e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d92e:	bf00      	nop
 800d930:	3720      	adds	r7, #32
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	20001bf4 	.word	0x20001bf4
 800d93c:	20001bf8 	.word	0x20001bf8
 800d940:	200020d0 	.word	0x200020d0

0800d944 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d944:	b480      	push	{r7}
 800d946:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d948:	4b07      	ldr	r3, [pc, #28]	; (800d968 <pvTaskIncrementMutexHeldCount+0x24>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d004      	beq.n	800d95a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d950:	4b05      	ldr	r3, [pc, #20]	; (800d968 <pvTaskIncrementMutexHeldCount+0x24>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d956:	3201      	adds	r2, #1
 800d958:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d95a:	4b03      	ldr	r3, [pc, #12]	; (800d968 <pvTaskIncrementMutexHeldCount+0x24>)
 800d95c:	681b      	ldr	r3, [r3, #0]
	}
 800d95e:	4618      	mov	r0, r3
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr
 800d968:	20001bf4 	.word	0x20001bf4

0800d96c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b086      	sub	sp, #24
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
 800d978:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d97a:	f000 fe9f 	bl	800e6bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d97e:	4b26      	ldr	r3, [pc, #152]	; (800da18 <xTaskNotifyWait+0xac>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d986:	b2db      	uxtb	r3, r3
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d01a      	beq.n	800d9c2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d98c:	4b22      	ldr	r3, [pc, #136]	; (800da18 <xTaskNotifyWait+0xac>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	43d2      	mvns	r2, r2
 800d996:	400a      	ands	r2, r1
 800d998:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d99a:	4b1f      	ldr	r3, [pc, #124]	; (800da18 <xTaskNotifyWait+0xac>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00b      	beq.n	800d9c2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	6838      	ldr	r0, [r7, #0]
 800d9ae:	f000 f9c5 	bl	800dd3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d9b2:	4b1a      	ldr	r3, [pc, #104]	; (800da1c <xTaskNotifyWait+0xb0>)
 800d9b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9b8:	601a      	str	r2, [r3, #0]
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d9c2:	f000 fea9 	bl	800e718 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d9c6:	f000 fe79 	bl	800e6bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d9d0:	4b11      	ldr	r3, [pc, #68]	; (800da18 <xTaskNotifyWait+0xac>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d9da:	4b0f      	ldr	r3, [pc, #60]	; (800da18 <xTaskNotifyWait+0xac>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b02      	cmp	r3, #2
 800d9e6:	d002      	beq.n	800d9ee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	617b      	str	r3, [r7, #20]
 800d9ec:	e008      	b.n	800da00 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d9ee:	4b0a      	ldr	r3, [pc, #40]	; (800da18 <xTaskNotifyWait+0xac>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	43d2      	mvns	r2, r2
 800d9f8:	400a      	ands	r2, r1
 800d9fa:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da00:	4b05      	ldr	r3, [pc, #20]	; (800da18 <xTaskNotifyWait+0xac>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800da0a:	f000 fe85 	bl	800e718 <vPortExitCritical>

		return xReturn;
 800da0e:	697b      	ldr	r3, [r7, #20]
	}
 800da10:	4618      	mov	r0, r3
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	20001bf4 	.word	0x20001bf4
 800da1c:	e000ed04 	.word	0xe000ed04

0800da20 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800da20:	b580      	push	{r7, lr}
 800da22:	b08a      	sub	sp, #40	; 0x28
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	603b      	str	r3, [r7, #0]
 800da2c:	4613      	mov	r3, r2
 800da2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800da30:	2301      	movs	r3, #1
 800da32:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d109      	bne.n	800da4e <xTaskGenericNotify+0x2e>
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	61bb      	str	r3, [r7, #24]
 800da4c:	e7fe      	b.n	800da4c <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800da52:	f000 fe33 	bl	800e6bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d003      	beq.n	800da64 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800da6a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800da74:	79fb      	ldrb	r3, [r7, #7]
 800da76:	2b04      	cmp	r3, #4
 800da78:	d827      	bhi.n	800daca <xTaskGenericNotify+0xaa>
 800da7a:	a201      	add	r2, pc, #4	; (adr r2, 800da80 <xTaskGenericNotify+0x60>)
 800da7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da80:	0800dae9 	.word	0x0800dae9
 800da84:	0800da95 	.word	0x0800da95
 800da88:	0800daa3 	.word	0x0800daa3
 800da8c:	0800daaf 	.word	0x0800daaf
 800da90:	0800dab7 	.word	0x0800dab7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800da94:	6a3b      	ldr	r3, [r7, #32]
 800da96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	431a      	orrs	r2, r3
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800daa0:	e025      	b.n	800daee <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800daa2:	6a3b      	ldr	r3, [r7, #32]
 800daa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daa6:	1c5a      	adds	r2, r3, #1
 800daa8:	6a3b      	ldr	r3, [r7, #32]
 800daaa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800daac:	e01f      	b.n	800daee <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800daae:	6a3b      	ldr	r3, [r7, #32]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800dab4:	e01b      	b.n	800daee <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dab6:	7ffb      	ldrb	r3, [r7, #31]
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d003      	beq.n	800dac4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800dabc:	6a3b      	ldr	r3, [r7, #32]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dac2:	e014      	b.n	800daee <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800dac4:	2300      	movs	r3, #0
 800dac6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800dac8:	e011      	b.n	800daee <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800daca:	6a3b      	ldr	r3, [r7, #32]
 800dacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad2:	d00b      	beq.n	800daec <xTaskGenericNotify+0xcc>
 800dad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad8:	f383 8811 	msr	BASEPRI, r3
 800dadc:	f3bf 8f6f 	isb	sy
 800dae0:	f3bf 8f4f 	dsb	sy
 800dae4:	617b      	str	r3, [r7, #20]
 800dae6:	e7fe      	b.n	800dae6 <xTaskGenericNotify+0xc6>
					break;
 800dae8:	bf00      	nop
 800daea:	e000      	b.n	800daee <xTaskGenericNotify+0xce>

					break;
 800daec:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800daee:	7ffb      	ldrb	r3, [r7, #31]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d13b      	bne.n	800db6c <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daf4:	6a3b      	ldr	r3, [r7, #32]
 800daf6:	3304      	adds	r3, #4
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fd fe6d 	bl	800b7d8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800dafe:	6a3b      	ldr	r3, [r7, #32]
 800db00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db02:	4b1e      	ldr	r3, [pc, #120]	; (800db7c <xTaskGenericNotify+0x15c>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	429a      	cmp	r2, r3
 800db08:	d903      	bls.n	800db12 <xTaskGenericNotify+0xf2>
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0e:	4a1b      	ldr	r2, [pc, #108]	; (800db7c <xTaskGenericNotify+0x15c>)
 800db10:	6013      	str	r3, [r2, #0]
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db16:	4613      	mov	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4413      	add	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4a18      	ldr	r2, [pc, #96]	; (800db80 <xTaskGenericNotify+0x160>)
 800db20:	441a      	add	r2, r3
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	3304      	adds	r3, #4
 800db26:	4619      	mov	r1, r3
 800db28:	4610      	mov	r0, r2
 800db2a:	f7fd fdf8 	bl	800b71e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db32:	2b00      	cmp	r3, #0
 800db34:	d009      	beq.n	800db4a <xTaskGenericNotify+0x12a>
 800db36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	613b      	str	r3, [r7, #16]
 800db48:	e7fe      	b.n	800db48 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800db4a:	f7ff fd59 	bl	800d600 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db4e:	6a3b      	ldr	r3, [r7, #32]
 800db50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db52:	4b0c      	ldr	r3, [pc, #48]	; (800db84 <xTaskGenericNotify+0x164>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db58:	429a      	cmp	r2, r3
 800db5a:	d907      	bls.n	800db6c <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800db5c:	4b0a      	ldr	r3, [pc, #40]	; (800db88 <xTaskGenericNotify+0x168>)
 800db5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db62:	601a      	str	r2, [r3, #0]
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800db6c:	f000 fdd4 	bl	800e718 <vPortExitCritical>

		return xReturn;
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800db72:	4618      	mov	r0, r3
 800db74:	3728      	adds	r7, #40	; 0x28
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	200020d0 	.word	0x200020d0
 800db80:	20001bf8 	.word	0x20001bf8
 800db84:	20001bf4 	.word	0x20001bf4
 800db88:	e000ed04 	.word	0xe000ed04

0800db8c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b08e      	sub	sp, #56	; 0x38
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	603b      	str	r3, [r7, #0]
 800db98:	4613      	mov	r3, r2
 800db9a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800db9c:	2301      	movs	r3, #1
 800db9e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d109      	bne.n	800dbba <xTaskGenericNotifyFromISR+0x2e>
 800dba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbaa:	f383 8811 	msr	BASEPRI, r3
 800dbae:	f3bf 8f6f 	isb	sy
 800dbb2:	f3bf 8f4f 	dsb	sy
 800dbb6:	627b      	str	r3, [r7, #36]	; 0x24
 800dbb8:	e7fe      	b.n	800dbb8 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbba:	f000 fe5b 	bl	800e874 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800dbc2:	f3ef 8211 	mrs	r2, BASEPRI
 800dbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbca:	f383 8811 	msr	BASEPRI, r3
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	623a      	str	r2, [r7, #32]
 800dbd8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800dbda:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d003      	beq.n	800dbec <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dbf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf8:	2202      	movs	r2, #2
 800dbfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	2b04      	cmp	r3, #4
 800dc02:	d829      	bhi.n	800dc58 <xTaskGenericNotifyFromISR+0xcc>
 800dc04:	a201      	add	r2, pc, #4	; (adr r2, 800dc0c <xTaskGenericNotifyFromISR+0x80>)
 800dc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc0a:	bf00      	nop
 800dc0c:	0800dc77 	.word	0x0800dc77
 800dc10:	0800dc21 	.word	0x0800dc21
 800dc14:	0800dc2f 	.word	0x0800dc2f
 800dc18:	0800dc3b 	.word	0x0800dc3b
 800dc1c:	0800dc43 	.word	0x0800dc43
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800dc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	431a      	orrs	r2, r3
 800dc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800dc2c:	e026      	b.n	800dc7c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800dc38:	e020      	b.n	800dc7c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800dc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800dc40:	e01c      	b.n	800dc7c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dc42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d003      	beq.n	800dc52 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4c:	68ba      	ldr	r2, [r7, #8]
 800dc4e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dc50:	e014      	b.n	800dc7c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800dc52:	2300      	movs	r3, #0
 800dc54:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800dc56:	e011      	b.n	800dc7c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc60:	d00b      	beq.n	800dc7a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800dc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	61bb      	str	r3, [r7, #24]
 800dc74:	e7fe      	b.n	800dc74 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800dc76:	bf00      	nop
 800dc78:	e000      	b.n	800dc7c <xTaskGenericNotifyFromISR+0xf0>
					break;
 800dc7a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dc7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d145      	bne.n	800dd10 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d009      	beq.n	800dca0 <xTaskGenericNotifyFromISR+0x114>
 800dc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc90:	f383 8811 	msr	BASEPRI, r3
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	f3bf 8f4f 	dsb	sy
 800dc9c:	617b      	str	r3, [r7, #20]
 800dc9e:	e7fe      	b.n	800dc9e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dca0:	4b20      	ldr	r3, [pc, #128]	; (800dd24 <xTaskGenericNotifyFromISR+0x198>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d11d      	bne.n	800dce4 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	3304      	adds	r3, #4
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fd fd93 	bl	800b7d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb6:	4b1c      	ldr	r3, [pc, #112]	; (800dd28 <xTaskGenericNotifyFromISR+0x19c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d903      	bls.n	800dcc6 <xTaskGenericNotifyFromISR+0x13a>
 800dcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc2:	4a19      	ldr	r2, [pc, #100]	; (800dd28 <xTaskGenericNotifyFromISR+0x19c>)
 800dcc4:	6013      	str	r3, [r2, #0]
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcca:	4613      	mov	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4a16      	ldr	r2, [pc, #88]	; (800dd2c <xTaskGenericNotifyFromISR+0x1a0>)
 800dcd4:	441a      	add	r2, r3
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	3304      	adds	r3, #4
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4610      	mov	r0, r2
 800dcde:	f7fd fd1e 	bl	800b71e <vListInsertEnd>
 800dce2:	e005      	b.n	800dcf0 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800dce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce6:	3318      	adds	r3, #24
 800dce8:	4619      	mov	r1, r3
 800dcea:	4811      	ldr	r0, [pc, #68]	; (800dd30 <xTaskGenericNotifyFromISR+0x1a4>)
 800dcec:	f7fd fd17 	bl	800b71e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf4:	4b0f      	ldr	r3, [pc, #60]	; (800dd34 <xTaskGenericNotifyFromISR+0x1a8>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d908      	bls.n	800dd10 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800dcfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d002      	beq.n	800dd0a <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800dd04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd06:	2201      	movs	r2, #1
 800dd08:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800dd0a:	4b0b      	ldr	r3, [pc, #44]	; (800dd38 <xTaskGenericNotifyFromISR+0x1ac>)
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	601a      	str	r2, [r3, #0]
 800dd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd12:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800dd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3738      	adds	r7, #56	; 0x38
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	200020f0 	.word	0x200020f0
 800dd28:	200020d0 	.word	0x200020d0
 800dd2c:	20001bf8 	.word	0x20001bf8
 800dd30:	20002088 	.word	0x20002088
 800dd34:	20001bf4 	.word	0x20001bf4
 800dd38:	200020dc 	.word	0x200020dc

0800dd3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd46:	4b21      	ldr	r3, [pc, #132]	; (800ddcc <prvAddCurrentTaskToDelayedList+0x90>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd4c:	4b20      	ldr	r3, [pc, #128]	; (800ddd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	3304      	adds	r3, #4
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fd fd40 	bl	800b7d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5e:	d10a      	bne.n	800dd76 <prvAddCurrentTaskToDelayedList+0x3a>
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d007      	beq.n	800dd76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd66:	4b1a      	ldr	r3, [pc, #104]	; (800ddd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3304      	adds	r3, #4
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4819      	ldr	r0, [pc, #100]	; (800ddd4 <prvAddCurrentTaskToDelayedList+0x98>)
 800dd70:	f7fd fcd5 	bl	800b71e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd74:	e026      	b.n	800ddc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd7e:	4b14      	ldr	r3, [pc, #80]	; (800ddd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd86:	68ba      	ldr	r2, [r7, #8]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d209      	bcs.n	800dda2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd8e:	4b12      	ldr	r3, [pc, #72]	; (800ddd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	4b0f      	ldr	r3, [pc, #60]	; (800ddd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3304      	adds	r3, #4
 800dd98:	4619      	mov	r1, r3
 800dd9a:	4610      	mov	r0, r2
 800dd9c:	f7fd fce3 	bl	800b766 <vListInsert>
}
 800dda0:	e010      	b.n	800ddc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dda2:	4b0e      	ldr	r3, [pc, #56]	; (800dddc <prvAddCurrentTaskToDelayedList+0xa0>)
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	4b0a      	ldr	r3, [pc, #40]	; (800ddd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	3304      	adds	r3, #4
 800ddac:	4619      	mov	r1, r3
 800ddae:	4610      	mov	r0, r2
 800ddb0:	f7fd fcd9 	bl	800b766 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ddb4:	4b0a      	ldr	r3, [pc, #40]	; (800dde0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d202      	bcs.n	800ddc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ddbe:	4a08      	ldr	r2, [pc, #32]	; (800dde0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	6013      	str	r3, [r2, #0]
}
 800ddc4:	bf00      	nop
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	200020cc 	.word	0x200020cc
 800ddd0:	20001bf4 	.word	0x20001bf4
 800ddd4:	200020b4 	.word	0x200020b4
 800ddd8:	20002084 	.word	0x20002084
 800dddc:	20002080 	.word	0x20002080
 800dde0:	200020e8 	.word	0x200020e8

0800dde4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08a      	sub	sp, #40	; 0x28
 800dde8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ddea:	2300      	movs	r3, #0
 800ddec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ddee:	f000 faff 	bl	800e3f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ddf2:	4b1c      	ldr	r3, [pc, #112]	; (800de64 <xTimerCreateTimerTask+0x80>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d021      	beq.n	800de3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ddfe:	2300      	movs	r3, #0
 800de00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de02:	1d3a      	adds	r2, r7, #4
 800de04:	f107 0108 	add.w	r1, r7, #8
 800de08:	f107 030c 	add.w	r3, r7, #12
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7fd fc3f 	bl	800b690 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de12:	6879      	ldr	r1, [r7, #4]
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	68fa      	ldr	r2, [r7, #12]
 800de18:	9202      	str	r2, [sp, #8]
 800de1a:	9301      	str	r3, [sp, #4]
 800de1c:	2302      	movs	r3, #2
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	2300      	movs	r3, #0
 800de22:	460a      	mov	r2, r1
 800de24:	4910      	ldr	r1, [pc, #64]	; (800de68 <xTimerCreateTimerTask+0x84>)
 800de26:	4811      	ldr	r0, [pc, #68]	; (800de6c <xTimerCreateTimerTask+0x88>)
 800de28:	f7fe fda2 	bl	800c970 <xTaskCreateStatic>
 800de2c:	4602      	mov	r2, r0
 800de2e:	4b10      	ldr	r3, [pc, #64]	; (800de70 <xTimerCreateTimerTask+0x8c>)
 800de30:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de32:	4b0f      	ldr	r3, [pc, #60]	; (800de70 <xTimerCreateTimerTask+0x8c>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800de3a:	2301      	movs	r3, #1
 800de3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d109      	bne.n	800de58 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800de44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	613b      	str	r3, [r7, #16]
 800de56:	e7fe      	b.n	800de56 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800de58:	697b      	ldr	r3, [r7, #20]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3718      	adds	r7, #24
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	20002124 	.word	0x20002124
 800de68:	08010934 	.word	0x08010934
 800de6c:	0800dfa5 	.word	0x0800dfa5
 800de70:	20002128 	.word	0x20002128

0800de74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b08a      	sub	sp, #40	; 0x28
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
 800de80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800de82:	2300      	movs	r3, #0
 800de84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d109      	bne.n	800dea0 <xTimerGenericCommand+0x2c>
 800de8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	623b      	str	r3, [r7, #32]
 800de9e:	e7fe      	b.n	800de9e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dea0:	4b19      	ldr	r3, [pc, #100]	; (800df08 <xTimerGenericCommand+0x94>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d02a      	beq.n	800defe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2b05      	cmp	r3, #5
 800deb8:	dc18      	bgt.n	800deec <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800deba:	f7ff fbd1 	bl	800d660 <xTaskGetSchedulerState>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d109      	bne.n	800ded8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dec4:	4b10      	ldr	r3, [pc, #64]	; (800df08 <xTimerGenericCommand+0x94>)
 800dec6:	6818      	ldr	r0, [r3, #0]
 800dec8:	f107 0110 	add.w	r1, r7, #16
 800decc:	2300      	movs	r3, #0
 800dece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ded0:	f7fd ff04 	bl	800bcdc <xQueueGenericSend>
 800ded4:	6278      	str	r0, [r7, #36]	; 0x24
 800ded6:	e012      	b.n	800defe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ded8:	4b0b      	ldr	r3, [pc, #44]	; (800df08 <xTimerGenericCommand+0x94>)
 800deda:	6818      	ldr	r0, [r3, #0]
 800dedc:	f107 0110 	add.w	r1, r7, #16
 800dee0:	2300      	movs	r3, #0
 800dee2:	2200      	movs	r2, #0
 800dee4:	f7fd fefa 	bl	800bcdc <xQueueGenericSend>
 800dee8:	6278      	str	r0, [r7, #36]	; 0x24
 800deea:	e008      	b.n	800defe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800deec:	4b06      	ldr	r3, [pc, #24]	; (800df08 <xTimerGenericCommand+0x94>)
 800deee:	6818      	ldr	r0, [r3, #0]
 800def0:	f107 0110 	add.w	r1, r7, #16
 800def4:	2300      	movs	r3, #0
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	f7fd ffea 	bl	800bed0 <xQueueGenericSendFromISR>
 800defc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df00:	4618      	mov	r0, r3
 800df02:	3728      	adds	r7, #40	; 0x28
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	20002124 	.word	0x20002124

0800df0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b088      	sub	sp, #32
 800df10:	af02      	add	r7, sp, #8
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df16:	4b22      	ldr	r3, [pc, #136]	; (800dfa0 <prvProcessExpiredTimer+0x94>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	3304      	adds	r3, #4
 800df24:	4618      	mov	r0, r3
 800df26:	f7fd fc57 	bl	800b7d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df30:	f003 0304 	and.w	r3, r3, #4
 800df34:	2b00      	cmp	r3, #0
 800df36:	d021      	beq.n	800df7c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	699a      	ldr	r2, [r3, #24]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	18d1      	adds	r1, r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	683a      	ldr	r2, [r7, #0]
 800df44:	6978      	ldr	r0, [r7, #20]
 800df46:	f000 f8d1 	bl	800e0ec <prvInsertTimerInActiveList>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d01e      	beq.n	800df8e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df50:	2300      	movs	r3, #0
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	2300      	movs	r3, #0
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	2100      	movs	r1, #0
 800df5a:	6978      	ldr	r0, [r7, #20]
 800df5c:	f7ff ff8a 	bl	800de74 <xTimerGenericCommand>
 800df60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d112      	bne.n	800df8e <prvProcessExpiredTimer+0x82>
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	60fb      	str	r3, [r7, #12]
 800df7a:	e7fe      	b.n	800df7a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df82:	f023 0301 	bic.w	r3, r3, #1
 800df86:	b2da      	uxtb	r2, r3
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	6978      	ldr	r0, [r7, #20]
 800df94:	4798      	blx	r3
}
 800df96:	bf00      	nop
 800df98:	3718      	adds	r7, #24
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	2000211c 	.word	0x2000211c

0800dfa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dfac:	f107 0308 	add.w	r3, r7, #8
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 f857 	bl	800e064 <prvGetNextExpireTime>
 800dfb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	4619      	mov	r1, r3
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f000 f803 	bl	800dfc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dfc2:	f000 f8d5 	bl	800e170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dfc6:	e7f1      	b.n	800dfac <prvTimerTask+0x8>

0800dfc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dfd2:	f7fe ff03 	bl	800cddc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dfd6:	f107 0308 	add.w	r3, r7, #8
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 f866 	bl	800e0ac <prvSampleTimeNow>
 800dfe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d130      	bne.n	800e04a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10a      	bne.n	800e004 <prvProcessTimerOrBlockTask+0x3c>
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d806      	bhi.n	800e004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dff6:	f7fe ff37 	bl	800ce68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dffa:	68f9      	ldr	r1, [r7, #12]
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff ff85 	bl	800df0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e002:	e024      	b.n	800e04e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d008      	beq.n	800e01c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e00a:	4b13      	ldr	r3, [pc, #76]	; (800e058 <prvProcessTimerOrBlockTask+0x90>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d101      	bne.n	800e018 <prvProcessTimerOrBlockTask+0x50>
 800e014:	2301      	movs	r3, #1
 800e016:	e000      	b.n	800e01a <prvProcessTimerOrBlockTask+0x52>
 800e018:	2300      	movs	r3, #0
 800e01a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e01c:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <prvProcessTimerOrBlockTask+0x94>)
 800e01e:	6818      	ldr	r0, [r3, #0]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	683a      	ldr	r2, [r7, #0]
 800e028:	4619      	mov	r1, r3
 800e02a:	f7fe fc6d 	bl	800c908 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e02e:	f7fe ff1b 	bl	800ce68 <xTaskResumeAll>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10a      	bne.n	800e04e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e038:	4b09      	ldr	r3, [pc, #36]	; (800e060 <prvProcessTimerOrBlockTask+0x98>)
 800e03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e03e:	601a      	str	r2, [r3, #0]
 800e040:	f3bf 8f4f 	dsb	sy
 800e044:	f3bf 8f6f 	isb	sy
}
 800e048:	e001      	b.n	800e04e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e04a:	f7fe ff0d 	bl	800ce68 <xTaskResumeAll>
}
 800e04e:	bf00      	nop
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20002120 	.word	0x20002120
 800e05c:	20002124 	.word	0x20002124
 800e060:	e000ed04 	.word	0xe000ed04

0800e064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e06c:	4b0e      	ldr	r3, [pc, #56]	; (800e0a8 <prvGetNextExpireTime+0x44>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d101      	bne.n	800e07a <prvGetNextExpireTime+0x16>
 800e076:	2201      	movs	r2, #1
 800e078:	e000      	b.n	800e07c <prvGetNextExpireTime+0x18>
 800e07a:	2200      	movs	r2, #0
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d105      	bne.n	800e094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e088:	4b07      	ldr	r3, [pc, #28]	; (800e0a8 <prvGetNextExpireTime+0x44>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	60fb      	str	r3, [r7, #12]
 800e092:	e001      	b.n	800e098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e094:	2300      	movs	r3, #0
 800e096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e098:	68fb      	ldr	r3, [r7, #12]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	2000211c 	.word	0x2000211c

0800e0ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e0b4:	f7fe ff74 	bl	800cfa0 <xTaskGetTickCount>
 800e0b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e0ba:	4b0b      	ldr	r3, [pc, #44]	; (800e0e8 <prvSampleTimeNow+0x3c>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d205      	bcs.n	800e0d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e0c4:	f000 f930 	bl	800e328 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	601a      	str	r2, [r3, #0]
 800e0ce:	e002      	b.n	800e0d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e0d6:	4a04      	ldr	r2, [pc, #16]	; (800e0e8 <prvSampleTimeNow+0x3c>)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	2000212c 	.word	0x2000212c

0800e0ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d812      	bhi.n	800e138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	1ad2      	subs	r2, r2, r3
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d302      	bcc.n	800e126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e120:	2301      	movs	r3, #1
 800e122:	617b      	str	r3, [r7, #20]
 800e124:	e01b      	b.n	800e15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e126:	4b10      	ldr	r3, [pc, #64]	; (800e168 <prvInsertTimerInActiveList+0x7c>)
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	3304      	adds	r3, #4
 800e12e:	4619      	mov	r1, r3
 800e130:	4610      	mov	r0, r2
 800e132:	f7fd fb18 	bl	800b766 <vListInsert>
 800e136:	e012      	b.n	800e15e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d206      	bcs.n	800e14e <prvInsertTimerInActiveList+0x62>
 800e140:	68ba      	ldr	r2, [r7, #8]
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	429a      	cmp	r2, r3
 800e146:	d302      	bcc.n	800e14e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e148:	2301      	movs	r3, #1
 800e14a:	617b      	str	r3, [r7, #20]
 800e14c:	e007      	b.n	800e15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e14e:	4b07      	ldr	r3, [pc, #28]	; (800e16c <prvInsertTimerInActiveList+0x80>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	3304      	adds	r3, #4
 800e156:	4619      	mov	r1, r3
 800e158:	4610      	mov	r0, r2
 800e15a:	f7fd fb04 	bl	800b766 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e15e:	697b      	ldr	r3, [r7, #20]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	20002120 	.word	0x20002120
 800e16c:	2000211c 	.word	0x2000211c

0800e170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b08e      	sub	sp, #56	; 0x38
 800e174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e176:	e0c6      	b.n	800e306 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	da17      	bge.n	800e1ae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e17e:	1d3b      	adds	r3, r7, #4
 800e180:	3304      	adds	r3, #4
 800e182:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	2b00      	cmp	r3, #0
 800e188:	d109      	bne.n	800e19e <prvProcessReceivedCommands+0x2e>
 800e18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18e:	f383 8811 	msr	BASEPRI, r3
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	f3bf 8f4f 	dsb	sy
 800e19a:	61fb      	str	r3, [r7, #28]
 800e19c:	e7fe      	b.n	800e19c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1a4:	6850      	ldr	r0, [r2, #4]
 800e1a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1a8:	6892      	ldr	r2, [r2, #8]
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f2c0 80a7 	blt.w	800e304 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1bc:	695b      	ldr	r3, [r3, #20]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d004      	beq.n	800e1cc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fd fb06 	bl	800b7d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1cc:	463b      	mov	r3, r7
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7ff ff6c 	bl	800e0ac <prvSampleTimeNow>
 800e1d4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b09      	cmp	r3, #9
 800e1da:	f200 8094 	bhi.w	800e306 <prvProcessReceivedCommands+0x196>
 800e1de:	a201      	add	r2, pc, #4	; (adr r2, 800e1e4 <prvProcessReceivedCommands+0x74>)
 800e1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e4:	0800e20d 	.word	0x0800e20d
 800e1e8:	0800e20d 	.word	0x0800e20d
 800e1ec:	0800e20d 	.word	0x0800e20d
 800e1f0:	0800e27f 	.word	0x0800e27f
 800e1f4:	0800e293 	.word	0x0800e293
 800e1f8:	0800e2db 	.word	0x0800e2db
 800e1fc:	0800e20d 	.word	0x0800e20d
 800e200:	0800e20d 	.word	0x0800e20d
 800e204:	0800e27f 	.word	0x0800e27f
 800e208:	0800e293 	.word	0x0800e293
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e212:	f043 0301 	orr.w	r3, r3, #1
 800e216:	b2da      	uxtb	r2, r3
 800e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e21e:	68ba      	ldr	r2, [r7, #8]
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	699b      	ldr	r3, [r3, #24]
 800e224:	18d1      	adds	r1, r2, r3
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e22c:	f7ff ff5e 	bl	800e0ec <prvInsertTimerInActiveList>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d067      	beq.n	800e306 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e23c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e244:	f003 0304 	and.w	r3, r3, #4
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d05c      	beq.n	800e306 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	441a      	add	r2, r3
 800e254:	2300      	movs	r3, #0
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	2300      	movs	r3, #0
 800e25a:	2100      	movs	r1, #0
 800e25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e25e:	f7ff fe09 	bl	800de74 <xTimerGenericCommand>
 800e262:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e264:	6a3b      	ldr	r3, [r7, #32]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d14d      	bne.n	800e306 <prvProcessReceivedCommands+0x196>
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	61bb      	str	r3, [r7, #24]
 800e27c:	e7fe      	b.n	800e27c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e284:	f023 0301 	bic.w	r3, r3, #1
 800e288:	b2da      	uxtb	r2, r3
 800e28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e290:	e039      	b.n	800e306 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e298:	f043 0301 	orr.w	r3, r3, #1
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ac:	699b      	ldr	r3, [r3, #24]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d109      	bne.n	800e2c6 <prvProcessReceivedCommands+0x156>
 800e2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	617b      	str	r3, [r7, #20]
 800e2c4:	e7fe      	b.n	800e2c4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c8:	699a      	ldr	r2, [r3, #24]
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2cc:	18d1      	adds	r1, r2, r3
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2d4:	f7ff ff0a 	bl	800e0ec <prvInsertTimerInActiveList>
					break;
 800e2d8:	e015      	b.n	800e306 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2e0:	f003 0302 	and.w	r3, r3, #2
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d103      	bne.n	800e2f0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800e2e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2ea:	f000 fbc3 	bl	800ea74 <vPortFree>
 800e2ee:	e00a      	b.n	800e306 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2f6:	f023 0301 	bic.w	r3, r3, #1
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e302:	e000      	b.n	800e306 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e304:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e306:	4b07      	ldr	r3, [pc, #28]	; (800e324 <prvProcessReceivedCommands+0x1b4>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	1d39      	adds	r1, r7, #4
 800e30c:	2200      	movs	r2, #0
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fd fefc 	bl	800c10c <xQueueReceive>
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	f47f af2e 	bne.w	800e178 <prvProcessReceivedCommands+0x8>
	}
}
 800e31c:	bf00      	nop
 800e31e:	3730      	adds	r7, #48	; 0x30
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	20002124 	.word	0x20002124

0800e328 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e32e:	e047      	b.n	800e3c0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e330:	4b2d      	ldr	r3, [pc, #180]	; (800e3e8 <prvSwitchTimerLists+0xc0>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e33a:	4b2b      	ldr	r3, [pc, #172]	; (800e3e8 <prvSwitchTimerLists+0xc0>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3304      	adds	r3, #4
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fd fa45 	bl	800b7d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6a1b      	ldr	r3, [r3, #32]
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e35c:	f003 0304 	and.w	r3, r3, #4
 800e360:	2b00      	cmp	r3, #0
 800e362:	d02d      	beq.n	800e3c0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	699b      	ldr	r3, [r3, #24]
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	4413      	add	r3, r2
 800e36c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	429a      	cmp	r2, r3
 800e374:	d90e      	bls.n	800e394 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	68ba      	ldr	r2, [r7, #8]
 800e37a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e382:	4b19      	ldr	r3, [pc, #100]	; (800e3e8 <prvSwitchTimerLists+0xc0>)
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	3304      	adds	r3, #4
 800e38a:	4619      	mov	r1, r3
 800e38c:	4610      	mov	r0, r2
 800e38e:	f7fd f9ea 	bl	800b766 <vListInsert>
 800e392:	e015      	b.n	800e3c0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e394:	2300      	movs	r3, #0
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	2300      	movs	r3, #0
 800e39a:	693a      	ldr	r2, [r7, #16]
 800e39c:	2100      	movs	r1, #0
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f7ff fd68 	bl	800de74 <xTimerGenericCommand>
 800e3a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d109      	bne.n	800e3c0 <prvSwitchTimerLists+0x98>
 800e3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	603b      	str	r3, [r7, #0]
 800e3be:	e7fe      	b.n	800e3be <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3c0:	4b09      	ldr	r3, [pc, #36]	; (800e3e8 <prvSwitchTimerLists+0xc0>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1b2      	bne.n	800e330 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e3ca:	4b07      	ldr	r3, [pc, #28]	; (800e3e8 <prvSwitchTimerLists+0xc0>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e3d0:	4b06      	ldr	r3, [pc, #24]	; (800e3ec <prvSwitchTimerLists+0xc4>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4a04      	ldr	r2, [pc, #16]	; (800e3e8 <prvSwitchTimerLists+0xc0>)
 800e3d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e3d8:	4a04      	ldr	r2, [pc, #16]	; (800e3ec <prvSwitchTimerLists+0xc4>)
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	6013      	str	r3, [r2, #0]
}
 800e3de:	bf00      	nop
 800e3e0:	3718      	adds	r7, #24
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	2000211c 	.word	0x2000211c
 800e3ec:	20002120 	.word	0x20002120

0800e3f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e3f6:	f000 f961 	bl	800e6bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e3fa:	4b15      	ldr	r3, [pc, #84]	; (800e450 <prvCheckForValidListAndQueue+0x60>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d120      	bne.n	800e444 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e402:	4814      	ldr	r0, [pc, #80]	; (800e454 <prvCheckForValidListAndQueue+0x64>)
 800e404:	f7fd f95e 	bl	800b6c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e408:	4813      	ldr	r0, [pc, #76]	; (800e458 <prvCheckForValidListAndQueue+0x68>)
 800e40a:	f7fd f95b 	bl	800b6c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e40e:	4b13      	ldr	r3, [pc, #76]	; (800e45c <prvCheckForValidListAndQueue+0x6c>)
 800e410:	4a10      	ldr	r2, [pc, #64]	; (800e454 <prvCheckForValidListAndQueue+0x64>)
 800e412:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e414:	4b12      	ldr	r3, [pc, #72]	; (800e460 <prvCheckForValidListAndQueue+0x70>)
 800e416:	4a10      	ldr	r2, [pc, #64]	; (800e458 <prvCheckForValidListAndQueue+0x68>)
 800e418:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e41a:	2300      	movs	r3, #0
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	4b11      	ldr	r3, [pc, #68]	; (800e464 <prvCheckForValidListAndQueue+0x74>)
 800e420:	4a11      	ldr	r2, [pc, #68]	; (800e468 <prvCheckForValidListAndQueue+0x78>)
 800e422:	2110      	movs	r1, #16
 800e424:	200a      	movs	r0, #10
 800e426:	f7fd fa69 	bl	800b8fc <xQueueGenericCreateStatic>
 800e42a:	4602      	mov	r2, r0
 800e42c:	4b08      	ldr	r3, [pc, #32]	; (800e450 <prvCheckForValidListAndQueue+0x60>)
 800e42e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e430:	4b07      	ldr	r3, [pc, #28]	; (800e450 <prvCheckForValidListAndQueue+0x60>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d005      	beq.n	800e444 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e438:	4b05      	ldr	r3, [pc, #20]	; (800e450 <prvCheckForValidListAndQueue+0x60>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	490b      	ldr	r1, [pc, #44]	; (800e46c <prvCheckForValidListAndQueue+0x7c>)
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe fa10 	bl	800c864 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e444:	f000 f968 	bl	800e718 <vPortExitCritical>
}
 800e448:	bf00      	nop
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	20002124 	.word	0x20002124
 800e454:	200020f4 	.word	0x200020f4
 800e458:	20002108 	.word	0x20002108
 800e45c:	2000211c 	.word	0x2000211c
 800e460:	20002120 	.word	0x20002120
 800e464:	200021d0 	.word	0x200021d0
 800e468:	20002130 	.word	0x20002130
 800e46c:	0801093c 	.word	0x0801093c

0800e470 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e470:	b480      	push	{r7}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	3b04      	subs	r3, #4
 800e480:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3b04      	subs	r3, #4
 800e48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	f023 0201 	bic.w	r2, r3, #1
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	3b04      	subs	r3, #4
 800e49e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4a0:	4a0c      	ldr	r2, [pc, #48]	; (800e4d4 <pxPortInitialiseStack+0x64>)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	3b14      	subs	r3, #20
 800e4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	3b04      	subs	r3, #4
 800e4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f06f 0202 	mvn.w	r2, #2
 800e4be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	3b20      	subs	r3, #32
 800e4c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr
 800e4d4:	0800e4d9 	.word	0x0800e4d9

0800e4d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4e2:	4b11      	ldr	r3, [pc, #68]	; (800e528 <prvTaskExitError+0x50>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ea:	d009      	beq.n	800e500 <prvTaskExitError+0x28>
 800e4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f0:	f383 8811 	msr	BASEPRI, r3
 800e4f4:	f3bf 8f6f 	isb	sy
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	60fb      	str	r3, [r7, #12]
 800e4fe:	e7fe      	b.n	800e4fe <prvTaskExitError+0x26>
 800e500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e504:	f383 8811 	msr	BASEPRI, r3
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e512:	bf00      	nop
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d0fc      	beq.n	800e514 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e51a:	bf00      	nop
 800e51c:	3714      	adds	r7, #20
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop
 800e528:	20000144 	.word	0x20000144
 800e52c:	00000000 	.word	0x00000000

0800e530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e530:	4b07      	ldr	r3, [pc, #28]	; (800e550 <pxCurrentTCBConst2>)
 800e532:	6819      	ldr	r1, [r3, #0]
 800e534:	6808      	ldr	r0, [r1, #0]
 800e536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53a:	f380 8809 	msr	PSP, r0
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f04f 0000 	mov.w	r0, #0
 800e546:	f380 8811 	msr	BASEPRI, r0
 800e54a:	4770      	bx	lr
 800e54c:	f3af 8000 	nop.w

0800e550 <pxCurrentTCBConst2>:
 800e550:	20001bf4 	.word	0x20001bf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e554:	bf00      	nop
 800e556:	bf00      	nop

0800e558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e558:	4808      	ldr	r0, [pc, #32]	; (800e57c <prvPortStartFirstTask+0x24>)
 800e55a:	6800      	ldr	r0, [r0, #0]
 800e55c:	6800      	ldr	r0, [r0, #0]
 800e55e:	f380 8808 	msr	MSP, r0
 800e562:	f04f 0000 	mov.w	r0, #0
 800e566:	f380 8814 	msr	CONTROL, r0
 800e56a:	b662      	cpsie	i
 800e56c:	b661      	cpsie	f
 800e56e:	f3bf 8f4f 	dsb	sy
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	df00      	svc	0
 800e578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e57a:	bf00      	nop
 800e57c:	e000ed08 	.word	0xe000ed08

0800e580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e586:	4b44      	ldr	r3, [pc, #272]	; (800e698 <xPortStartScheduler+0x118>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a44      	ldr	r2, [pc, #272]	; (800e69c <xPortStartScheduler+0x11c>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d109      	bne.n	800e5a4 <xPortStartScheduler+0x24>
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	613b      	str	r3, [r7, #16]
 800e5a2:	e7fe      	b.n	800e5a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e5a4:	4b3c      	ldr	r3, [pc, #240]	; (800e698 <xPortStartScheduler+0x118>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a3d      	ldr	r2, [pc, #244]	; (800e6a0 <xPortStartScheduler+0x120>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d109      	bne.n	800e5c2 <xPortStartScheduler+0x42>
 800e5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	60fb      	str	r3, [r7, #12]
 800e5c0:	e7fe      	b.n	800e5c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5c2:	4b38      	ldr	r3, [pc, #224]	; (800e6a4 <xPortStartScheduler+0x124>)
 800e5c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	22ff      	movs	r2, #255	; 0xff
 800e5d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5dc:	78fb      	ldrb	r3, [r7, #3]
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	4b30      	ldr	r3, [pc, #192]	; (800e6a8 <xPortStartScheduler+0x128>)
 800e5e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5ea:	4b30      	ldr	r3, [pc, #192]	; (800e6ac <xPortStartScheduler+0x12c>)
 800e5ec:	2207      	movs	r2, #7
 800e5ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5f0:	e009      	b.n	800e606 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e5f2:	4b2e      	ldr	r3, [pc, #184]	; (800e6ac <xPortStartScheduler+0x12c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	4a2c      	ldr	r2, [pc, #176]	; (800e6ac <xPortStartScheduler+0x12c>)
 800e5fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e5fc:	78fb      	ldrb	r3, [r7, #3]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	005b      	lsls	r3, r3, #1
 800e602:	b2db      	uxtb	r3, r3
 800e604:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e606:	78fb      	ldrb	r3, [r7, #3]
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e60e:	2b80      	cmp	r3, #128	; 0x80
 800e610:	d0ef      	beq.n	800e5f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e612:	4b26      	ldr	r3, [pc, #152]	; (800e6ac <xPortStartScheduler+0x12c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f1c3 0307 	rsb	r3, r3, #7
 800e61a:	2b04      	cmp	r3, #4
 800e61c:	d009      	beq.n	800e632 <xPortStartScheduler+0xb2>
 800e61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	60bb      	str	r3, [r7, #8]
 800e630:	e7fe      	b.n	800e630 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e632:	4b1e      	ldr	r3, [pc, #120]	; (800e6ac <xPortStartScheduler+0x12c>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	021b      	lsls	r3, r3, #8
 800e638:	4a1c      	ldr	r2, [pc, #112]	; (800e6ac <xPortStartScheduler+0x12c>)
 800e63a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e63c:	4b1b      	ldr	r3, [pc, #108]	; (800e6ac <xPortStartScheduler+0x12c>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e644:	4a19      	ldr	r2, [pc, #100]	; (800e6ac <xPortStartScheduler+0x12c>)
 800e646:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	b2da      	uxtb	r2, r3
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e650:	4b17      	ldr	r3, [pc, #92]	; (800e6b0 <xPortStartScheduler+0x130>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a16      	ldr	r2, [pc, #88]	; (800e6b0 <xPortStartScheduler+0x130>)
 800e656:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e65a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e65c:	4b14      	ldr	r3, [pc, #80]	; (800e6b0 <xPortStartScheduler+0x130>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a13      	ldr	r2, [pc, #76]	; (800e6b0 <xPortStartScheduler+0x130>)
 800e662:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e666:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e668:	f000 f8d6 	bl	800e818 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e66c:	4b11      	ldr	r3, [pc, #68]	; (800e6b4 <xPortStartScheduler+0x134>)
 800e66e:	2200      	movs	r2, #0
 800e670:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e672:	f000 f8f5 	bl	800e860 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e676:	4b10      	ldr	r3, [pc, #64]	; (800e6b8 <xPortStartScheduler+0x138>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4a0f      	ldr	r2, [pc, #60]	; (800e6b8 <xPortStartScheduler+0x138>)
 800e67c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e680:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e682:	f7ff ff69 	bl	800e558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e686:	f7fe fd53 	bl	800d130 <vTaskSwitchContext>
	prvTaskExitError();
 800e68a:	f7ff ff25 	bl	800e4d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3718      	adds	r7, #24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	e000ed00 	.word	0xe000ed00
 800e69c:	410fc271 	.word	0x410fc271
 800e6a0:	410fc270 	.word	0x410fc270
 800e6a4:	e000e400 	.word	0xe000e400
 800e6a8:	20002220 	.word	0x20002220
 800e6ac:	20002224 	.word	0x20002224
 800e6b0:	e000ed20 	.word	0xe000ed20
 800e6b4:	20000144 	.word	0x20000144
 800e6b8:	e000ef34 	.word	0xe000ef34

0800e6bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6d4:	4b0e      	ldr	r3, [pc, #56]	; (800e710 <vPortEnterCritical+0x54>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	4a0d      	ldr	r2, [pc, #52]	; (800e710 <vPortEnterCritical+0x54>)
 800e6dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6de:	4b0c      	ldr	r3, [pc, #48]	; (800e710 <vPortEnterCritical+0x54>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d10e      	bne.n	800e704 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6e6:	4b0b      	ldr	r3, [pc, #44]	; (800e714 <vPortEnterCritical+0x58>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d009      	beq.n	800e704 <vPortEnterCritical+0x48>
 800e6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	603b      	str	r3, [r7, #0]
 800e702:	e7fe      	b.n	800e702 <vPortEnterCritical+0x46>
	}
}
 800e704:	bf00      	nop
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	20000144 	.word	0x20000144
 800e714:	e000ed04 	.word	0xe000ed04

0800e718 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e71e:	4b11      	ldr	r3, [pc, #68]	; (800e764 <vPortExitCritical+0x4c>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d109      	bne.n	800e73a <vPortExitCritical+0x22>
 800e726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72a:	f383 8811 	msr	BASEPRI, r3
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f3bf 8f4f 	dsb	sy
 800e736:	607b      	str	r3, [r7, #4]
 800e738:	e7fe      	b.n	800e738 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e73a:	4b0a      	ldr	r3, [pc, #40]	; (800e764 <vPortExitCritical+0x4c>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	3b01      	subs	r3, #1
 800e740:	4a08      	ldr	r2, [pc, #32]	; (800e764 <vPortExitCritical+0x4c>)
 800e742:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e744:	4b07      	ldr	r3, [pc, #28]	; (800e764 <vPortExitCritical+0x4c>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d104      	bne.n	800e756 <vPortExitCritical+0x3e>
 800e74c:	2300      	movs	r3, #0
 800e74e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e756:	bf00      	nop
 800e758:	370c      	adds	r7, #12
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	20000144 	.word	0x20000144
	...

0800e770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e770:	f3ef 8009 	mrs	r0, PSP
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	4b15      	ldr	r3, [pc, #84]	; (800e7d0 <pxCurrentTCBConst>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	f01e 0f10 	tst.w	lr, #16
 800e780:	bf08      	it	eq
 800e782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78a:	6010      	str	r0, [r2, #0]
 800e78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e794:	f380 8811 	msr	BASEPRI, r0
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	f7fe fcc6 	bl	800d130 <vTaskSwitchContext>
 800e7a4:	f04f 0000 	mov.w	r0, #0
 800e7a8:	f380 8811 	msr	BASEPRI, r0
 800e7ac:	bc09      	pop	{r0, r3}
 800e7ae:	6819      	ldr	r1, [r3, #0]
 800e7b0:	6808      	ldr	r0, [r1, #0]
 800e7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b6:	f01e 0f10 	tst.w	lr, #16
 800e7ba:	bf08      	it	eq
 800e7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7c0:	f380 8809 	msr	PSP, r0
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	f3af 8000 	nop.w

0800e7d0 <pxCurrentTCBConst>:
 800e7d0:	20001bf4 	.word	0x20001bf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop

0800e7d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e7f0:	f7fe fbe6 	bl	800cfc0 <xTaskIncrementTick>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d003      	beq.n	800e802 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7fa:	4b06      	ldr	r3, [pc, #24]	; (800e814 <SysTick_Handler+0x3c>)
 800e7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e800:	601a      	str	r2, [r3, #0]
 800e802:	2300      	movs	r3, #0
 800e804:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e80c:	bf00      	nop
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	e000ed04 	.word	0xe000ed04

0800e818 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e818:	b480      	push	{r7}
 800e81a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e81c:	4b0b      	ldr	r3, [pc, #44]	; (800e84c <vPortSetupTimerInterrupt+0x34>)
 800e81e:	2200      	movs	r2, #0
 800e820:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e822:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <vPortSetupTimerInterrupt+0x38>)
 800e824:	2200      	movs	r2, #0
 800e826:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e828:	4b0a      	ldr	r3, [pc, #40]	; (800e854 <vPortSetupTimerInterrupt+0x3c>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a0a      	ldr	r2, [pc, #40]	; (800e858 <vPortSetupTimerInterrupt+0x40>)
 800e82e:	fba2 2303 	umull	r2, r3, r2, r3
 800e832:	099b      	lsrs	r3, r3, #6
 800e834:	4a09      	ldr	r2, [pc, #36]	; (800e85c <vPortSetupTimerInterrupt+0x44>)
 800e836:	3b01      	subs	r3, #1
 800e838:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e83a:	4b04      	ldr	r3, [pc, #16]	; (800e84c <vPortSetupTimerInterrupt+0x34>)
 800e83c:	2207      	movs	r2, #7
 800e83e:	601a      	str	r2, [r3, #0]
}
 800e840:	bf00      	nop
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	e000e010 	.word	0xe000e010
 800e850:	e000e018 	.word	0xe000e018
 800e854:	20000028 	.word	0x20000028
 800e858:	10624dd3 	.word	0x10624dd3
 800e85c:	e000e014 	.word	0xe000e014

0800e860 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e860:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e870 <vPortEnableVFP+0x10>
 800e864:	6801      	ldr	r1, [r0, #0]
 800e866:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e86a:	6001      	str	r1, [r0, #0]
 800e86c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e86e:	bf00      	nop
 800e870:	e000ed88 	.word	0xe000ed88

0800e874 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e87a:	f3ef 8305 	mrs	r3, IPSR
 800e87e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2b0f      	cmp	r3, #15
 800e884:	d913      	bls.n	800e8ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e886:	4a16      	ldr	r2, [pc, #88]	; (800e8e0 <vPortValidateInterruptPriority+0x6c>)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	4413      	add	r3, r2
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e890:	4b14      	ldr	r3, [pc, #80]	; (800e8e4 <vPortValidateInterruptPriority+0x70>)
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	7afa      	ldrb	r2, [r7, #11]
 800e896:	429a      	cmp	r2, r3
 800e898:	d209      	bcs.n	800e8ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89e:	f383 8811 	msr	BASEPRI, r3
 800e8a2:	f3bf 8f6f 	isb	sy
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	607b      	str	r3, [r7, #4]
 800e8ac:	e7fe      	b.n	800e8ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8ae:	4b0e      	ldr	r3, [pc, #56]	; (800e8e8 <vPortValidateInterruptPriority+0x74>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8b6:	4b0d      	ldr	r3, [pc, #52]	; (800e8ec <vPortValidateInterruptPriority+0x78>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d909      	bls.n	800e8d2 <vPortValidateInterruptPriority+0x5e>
 800e8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c2:	f383 8811 	msr	BASEPRI, r3
 800e8c6:	f3bf 8f6f 	isb	sy
 800e8ca:	f3bf 8f4f 	dsb	sy
 800e8ce:	603b      	str	r3, [r7, #0]
 800e8d0:	e7fe      	b.n	800e8d0 <vPortValidateInterruptPriority+0x5c>
	}
 800e8d2:	bf00      	nop
 800e8d4:	3714      	adds	r7, #20
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	e000e3f0 	.word	0xe000e3f0
 800e8e4:	20002220 	.word	0x20002220
 800e8e8:	e000ed0c 	.word	0xe000ed0c
 800e8ec:	20002224 	.word	0x20002224

0800e8f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b08a      	sub	sp, #40	; 0x28
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e8fc:	f7fe fa6e 	bl	800cddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e900:	4b57      	ldr	r3, [pc, #348]	; (800ea60 <pvPortMalloc+0x170>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d101      	bne.n	800e90c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e908:	f000 f90c 	bl	800eb24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e90c:	4b55      	ldr	r3, [pc, #340]	; (800ea64 <pvPortMalloc+0x174>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4013      	ands	r3, r2
 800e914:	2b00      	cmp	r3, #0
 800e916:	f040 808c 	bne.w	800ea32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d01c      	beq.n	800e95a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e920:	2208      	movs	r2, #8
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	4413      	add	r3, r2
 800e926:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f003 0307 	and.w	r3, r3, #7
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d013      	beq.n	800e95a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f023 0307 	bic.w	r3, r3, #7
 800e938:	3308      	adds	r3, #8
 800e93a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f003 0307 	and.w	r3, r3, #7
 800e942:	2b00      	cmp	r3, #0
 800e944:	d009      	beq.n	800e95a <pvPortMalloc+0x6a>
 800e946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94a:	f383 8811 	msr	BASEPRI, r3
 800e94e:	f3bf 8f6f 	isb	sy
 800e952:	f3bf 8f4f 	dsb	sy
 800e956:	617b      	str	r3, [r7, #20]
 800e958:	e7fe      	b.n	800e958 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d068      	beq.n	800ea32 <pvPortMalloc+0x142>
 800e960:	4b41      	ldr	r3, [pc, #260]	; (800ea68 <pvPortMalloc+0x178>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	429a      	cmp	r2, r3
 800e968:	d863      	bhi.n	800ea32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e96a:	4b40      	ldr	r3, [pc, #256]	; (800ea6c <pvPortMalloc+0x17c>)
 800e96c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e96e:	4b3f      	ldr	r3, [pc, #252]	; (800ea6c <pvPortMalloc+0x17c>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e974:	e004      	b.n	800e980 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	429a      	cmp	r2, r3
 800e988:	d903      	bls.n	800e992 <pvPortMalloc+0xa2>
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1f1      	bne.n	800e976 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e992:	4b33      	ldr	r3, [pc, #204]	; (800ea60 <pvPortMalloc+0x170>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e998:	429a      	cmp	r2, r3
 800e99a:	d04a      	beq.n	800ea32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e99c:	6a3b      	ldr	r3, [r7, #32]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2208      	movs	r2, #8
 800e9a2:	4413      	add	r3, r2
 800e9a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	6a3b      	ldr	r3, [r7, #32]
 800e9ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b0:	685a      	ldr	r2, [r3, #4]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	1ad2      	subs	r2, r2, r3
 800e9b6:	2308      	movs	r3, #8
 800e9b8:	005b      	lsls	r3, r3, #1
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d91e      	bls.n	800e9fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	f003 0307 	and.w	r3, r3, #7
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d009      	beq.n	800e9e4 <pvPortMalloc+0xf4>
 800e9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d4:	f383 8811 	msr	BASEPRI, r3
 800e9d8:	f3bf 8f6f 	isb	sy
 800e9dc:	f3bf 8f4f 	dsb	sy
 800e9e0:	613b      	str	r3, [r7, #16]
 800e9e2:	e7fe      	b.n	800e9e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	685a      	ldr	r2, [r3, #4]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	1ad2      	subs	r2, r2, r3
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9f6:	69b8      	ldr	r0, [r7, #24]
 800e9f8:	f000 f8f6 	bl	800ebe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9fc:	4b1a      	ldr	r3, [pc, #104]	; (800ea68 <pvPortMalloc+0x178>)
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	1ad3      	subs	r3, r2, r3
 800ea06:	4a18      	ldr	r2, [pc, #96]	; (800ea68 <pvPortMalloc+0x178>)
 800ea08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea0a:	4b17      	ldr	r3, [pc, #92]	; (800ea68 <pvPortMalloc+0x178>)
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	4b18      	ldr	r3, [pc, #96]	; (800ea70 <pvPortMalloc+0x180>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d203      	bcs.n	800ea1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea16:	4b14      	ldr	r3, [pc, #80]	; (800ea68 <pvPortMalloc+0x178>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a15      	ldr	r2, [pc, #84]	; (800ea70 <pvPortMalloc+0x180>)
 800ea1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea20:	685a      	ldr	r2, [r3, #4]
 800ea22:	4b10      	ldr	r3, [pc, #64]	; (800ea64 <pvPortMalloc+0x174>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	431a      	orrs	r2, r3
 800ea28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2e:	2200      	movs	r2, #0
 800ea30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea32:	f7fe fa19 	bl	800ce68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	f003 0307 	and.w	r3, r3, #7
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d009      	beq.n	800ea54 <pvPortMalloc+0x164>
 800ea40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea44:	f383 8811 	msr	BASEPRI, r3
 800ea48:	f3bf 8f6f 	isb	sy
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	60fb      	str	r3, [r7, #12]
 800ea52:	e7fe      	b.n	800ea52 <pvPortMalloc+0x162>
	return pvReturn;
 800ea54:	69fb      	ldr	r3, [r7, #28]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3728      	adds	r7, #40	; 0x28
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20004940 	.word	0x20004940
 800ea64:	2000494c 	.word	0x2000494c
 800ea68:	20004944 	.word	0x20004944
 800ea6c:	20004938 	.word	0x20004938
 800ea70:	20004948 	.word	0x20004948

0800ea74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b086      	sub	sp, #24
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d046      	beq.n	800eb14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea86:	2308      	movs	r3, #8
 800ea88:	425b      	negs	r3, r3
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	685a      	ldr	r2, [r3, #4]
 800ea98:	4b20      	ldr	r3, [pc, #128]	; (800eb1c <vPortFree+0xa8>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d109      	bne.n	800eab6 <vPortFree+0x42>
 800eaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa6:	f383 8811 	msr	BASEPRI, r3
 800eaaa:	f3bf 8f6f 	isb	sy
 800eaae:	f3bf 8f4f 	dsb	sy
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	e7fe      	b.n	800eab4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d009      	beq.n	800ead2 <vPortFree+0x5e>
 800eabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac2:	f383 8811 	msr	BASEPRI, r3
 800eac6:	f3bf 8f6f 	isb	sy
 800eaca:	f3bf 8f4f 	dsb	sy
 800eace:	60bb      	str	r3, [r7, #8]
 800ead0:	e7fe      	b.n	800ead0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	685a      	ldr	r2, [r3, #4]
 800ead6:	4b11      	ldr	r3, [pc, #68]	; (800eb1c <vPortFree+0xa8>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4013      	ands	r3, r2
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d019      	beq.n	800eb14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d115      	bne.n	800eb14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	685a      	ldr	r2, [r3, #4]
 800eaec:	4b0b      	ldr	r3, [pc, #44]	; (800eb1c <vPortFree+0xa8>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	43db      	mvns	r3, r3
 800eaf2:	401a      	ands	r2, r3
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eaf8:	f7fe f970 	bl	800cddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	685a      	ldr	r2, [r3, #4]
 800eb00:	4b07      	ldr	r3, [pc, #28]	; (800eb20 <vPortFree+0xac>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4413      	add	r3, r2
 800eb06:	4a06      	ldr	r2, [pc, #24]	; (800eb20 <vPortFree+0xac>)
 800eb08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb0a:	6938      	ldr	r0, [r7, #16]
 800eb0c:	f000 f86c 	bl	800ebe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb10:	f7fe f9aa 	bl	800ce68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb14:	bf00      	nop
 800eb16:	3718      	adds	r7, #24
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	2000494c 	.word	0x2000494c
 800eb20:	20004944 	.word	0x20004944

0800eb24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb24:	b480      	push	{r7}
 800eb26:	b085      	sub	sp, #20
 800eb28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb2a:	f242 7310 	movw	r3, #10000	; 0x2710
 800eb2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb30:	4b27      	ldr	r3, [pc, #156]	; (800ebd0 <prvHeapInit+0xac>)
 800eb32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f003 0307 	and.w	r3, r3, #7
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d00c      	beq.n	800eb58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	3307      	adds	r3, #7
 800eb42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f023 0307 	bic.w	r3, r3, #7
 800eb4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	4a1f      	ldr	r2, [pc, #124]	; (800ebd0 <prvHeapInit+0xac>)
 800eb54:	4413      	add	r3, r2
 800eb56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb5c:	4a1d      	ldr	r2, [pc, #116]	; (800ebd4 <prvHeapInit+0xb0>)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb62:	4b1c      	ldr	r3, [pc, #112]	; (800ebd4 <prvHeapInit+0xb0>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb70:	2208      	movs	r2, #8
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	1a9b      	subs	r3, r3, r2
 800eb76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f023 0307 	bic.w	r3, r3, #7
 800eb7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	4a15      	ldr	r2, [pc, #84]	; (800ebd8 <prvHeapInit+0xb4>)
 800eb84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb86:	4b14      	ldr	r3, [pc, #80]	; (800ebd8 <prvHeapInit+0xb4>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb8e:	4b12      	ldr	r3, [pc, #72]	; (800ebd8 <prvHeapInit+0xb4>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2200      	movs	r2, #0
 800eb94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	68fa      	ldr	r2, [r7, #12]
 800eb9e:	1ad2      	subs	r2, r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eba4:	4b0c      	ldr	r3, [pc, #48]	; (800ebd8 <prvHeapInit+0xb4>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	4a0a      	ldr	r2, [pc, #40]	; (800ebdc <prvHeapInit+0xb8>)
 800ebb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	4a09      	ldr	r2, [pc, #36]	; (800ebe0 <prvHeapInit+0xbc>)
 800ebba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebbc:	4b09      	ldr	r3, [pc, #36]	; (800ebe4 <prvHeapInit+0xc0>)
 800ebbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ebc2:	601a      	str	r2, [r3, #0]
}
 800ebc4:	bf00      	nop
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	20002228 	.word	0x20002228
 800ebd4:	20004938 	.word	0x20004938
 800ebd8:	20004940 	.word	0x20004940
 800ebdc:	20004948 	.word	0x20004948
 800ebe0:	20004944 	.word	0x20004944
 800ebe4:	2000494c 	.word	0x2000494c

0800ebe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ebf0:	4b28      	ldr	r3, [pc, #160]	; (800ec94 <prvInsertBlockIntoFreeList+0xac>)
 800ebf2:	60fb      	str	r3, [r7, #12]
 800ebf4:	e002      	b.n	800ebfc <prvInsertBlockIntoFreeList+0x14>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	60fb      	str	r3, [r7, #12]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d8f7      	bhi.n	800ebf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	4413      	add	r3, r2
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d108      	bne.n	800ec2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	685a      	ldr	r2, [r3, #4]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	441a      	add	r2, r3
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	441a      	add	r2, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d118      	bne.n	800ec70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	4b15      	ldr	r3, [pc, #84]	; (800ec98 <prvInsertBlockIntoFreeList+0xb0>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d00d      	beq.n	800ec66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	685a      	ldr	r2, [r3, #4]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	441a      	add	r2, r3
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	601a      	str	r2, [r3, #0]
 800ec64:	e008      	b.n	800ec78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec66:	4b0c      	ldr	r3, [pc, #48]	; (800ec98 <prvInsertBlockIntoFreeList+0xb0>)
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	601a      	str	r2, [r3, #0]
 800ec6e:	e003      	b.n	800ec78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d002      	beq.n	800ec86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec86:	bf00      	nop
 800ec88:	3714      	adds	r7, #20
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	20004938 	.word	0x20004938
 800ec98:	20004940 	.word	0x20004940

0800ec9c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 800eca2:	f000 f985 	bl	800efb0 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 800eca6:	480e      	ldr	r0, [pc, #56]	; (800ece0 <APP_THREAD_Init+0x44>)
 800eca8:	f000 fc00 	bl	800f4ac <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800ecac:	2101      	movs	r1, #1
 800ecae:	2002      	movs	r0, #2
 800ecb0:	f001 fd70 	bl	8010794 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 800ecb4:	f000 fcf2 	bl	800f69c <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 800ecb8:	f000 fcde 	bl	800f678 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800ecbc:	f7fa f96a 	bl	8008f94 <SHCI_C2_THREAD_Init>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 800ecc4:	4a07      	ldr	r2, [pc, #28]	; (800ece4 <APP_THREAD_Init+0x48>)
 800ecc6:	2100      	movs	r1, #0
 800ecc8:	4807      	ldr	r0, [pc, #28]	; (800ece8 <APP_THREAD_Init+0x4c>)
 800ecca:	f7fc f859 	bl	800ad80 <osThreadNew>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	4b06      	ldr	r3, [pc, #24]	; (800ecec <APP_THREAD_Init+0x50>)
 800ecd2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 800ecd4:	f000 f86c 	bl	800edb0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 800ecd8:	bf00      	nop
 800ecda:	3708      	adds	r7, #8
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	20030834 	.word	0x20030834
 800ece4:	08010d28 	.word	0x08010d28
 800ece8:	0800f06d 	.word	0x0800f06d
 800ecec:	20004a64 	.word	0x20004a64

0800ecf0 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2b07      	cmp	r3, #7
 800ecfe:	d83b      	bhi.n	800ed78 <APP_THREAD_Error+0x88>
 800ed00:	a201      	add	r2, pc, #4	; (adr r2, 800ed08 <APP_THREAD_Error+0x18>)
 800ed02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed06:	bf00      	nop
 800ed08:	0800ed29 	.word	0x0800ed29
 800ed0c:	0800ed33 	.word	0x0800ed33
 800ed10:	0800ed3d 	.word	0x0800ed3d
 800ed14:	0800ed47 	.word	0x0800ed47
 800ed18:	0800ed51 	.word	0x0800ed51
 800ed1c:	0800ed5b 	.word	0x0800ed5b
 800ed20:	0800ed65 	.word	0x0800ed65
 800ed24:	0800ed6f 	.word	0x0800ed6f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	4818      	ldr	r0, [pc, #96]	; (800ed8c <APP_THREAD_Error+0x9c>)
 800ed2c:	f000 f934 	bl	800ef98 <APP_THREAD_TraceError>
    break;
 800ed30:	e027      	b.n	800ed82 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	4816      	ldr	r0, [pc, #88]	; (800ed90 <APP_THREAD_Error+0xa0>)
 800ed36:	f000 f92f 	bl	800ef98 <APP_THREAD_TraceError>
    break;
 800ed3a:	e022      	b.n	800ed82 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 800ed3c:	6839      	ldr	r1, [r7, #0]
 800ed3e:	4815      	ldr	r0, [pc, #84]	; (800ed94 <APP_THREAD_Error+0xa4>)
 800ed40:	f000 f92a 	bl	800ef98 <APP_THREAD_TraceError>
    break;
 800ed44:	e01d      	b.n	800ed82 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 800ed46:	6839      	ldr	r1, [r7, #0]
 800ed48:	4813      	ldr	r0, [pc, #76]	; (800ed98 <APP_THREAD_Error+0xa8>)
 800ed4a:	f000 f925 	bl	800ef98 <APP_THREAD_TraceError>
    break;
 800ed4e:	e018      	b.n	800ed82 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	4812      	ldr	r0, [pc, #72]	; (800ed9c <APP_THREAD_Error+0xac>)
 800ed54:	f000 f920 	bl	800ef98 <APP_THREAD_TraceError>
    break;
 800ed58:	e013      	b.n	800ed82 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 800ed5a:	6839      	ldr	r1, [r7, #0]
 800ed5c:	4810      	ldr	r0, [pc, #64]	; (800eda0 <APP_THREAD_Error+0xb0>)
 800ed5e:	f000 f91b 	bl	800ef98 <APP_THREAD_TraceError>
    break;
 800ed62:	e00e      	b.n	800ed82 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 800ed64:	6839      	ldr	r1, [r7, #0]
 800ed66:	480f      	ldr	r0, [pc, #60]	; (800eda4 <APP_THREAD_Error+0xb4>)
 800ed68:	f000 f916 	bl	800ef98 <APP_THREAD_TraceError>
    break;
 800ed6c:	e009      	b.n	800ed82 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 800ed6e:	6839      	ldr	r1, [r7, #0]
 800ed70:	480d      	ldr	r0, [pc, #52]	; (800eda8 <APP_THREAD_Error+0xb8>)
 800ed72:	f000 f911 	bl	800ef98 <APP_THREAD_TraceError>
    break;
 800ed76:	e004      	b.n	800ed82 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 800ed78:	2100      	movs	r1, #0
 800ed7a:	480c      	ldr	r0, [pc, #48]	; (800edac <APP_THREAD_Error+0xbc>)
 800ed7c:	f000 f90c 	bl	800ef98 <APP_THREAD_TraceError>
    break;
 800ed80:	bf00      	nop
  }
}
 800ed82:	bf00      	nop
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	08010998 	.word	0x08010998
 800ed90:	080109bc 	.word	0x080109bc
 800ed94:	080109e0 	.word	0x080109e0
 800ed98:	08010a00 	.word	0x08010a00
 800ed9c:	08010a20 	.word	0x08010a20
 800eda0:	08010a40 	.word	0x08010a40
 800eda4:	08010a5c 	.word	0x08010a5c
 800eda8:	08010a88 	.word	0x08010a88
 800edac:	08010aac 	.word	0x08010aac

0800edb0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 800edb6:	2000      	movs	r0, #0
 800edb8:	f7fb f922 	bl	800a000 <otInstanceErasePersistentInfo>
 800edbc:	4603      	mov	r3, r0
 800edbe:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800edc0:	79fb      	ldrb	r3, [r7, #7]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d004      	beq.n	800edd0 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 800edc6:	79fb      	ldrb	r3, [r7, #7]
 800edc8:	4619      	mov	r1, r3
 800edca:	2006      	movs	r0, #6
 800edcc:	f7ff ff90 	bl	800ecf0 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 800edd0:	2000      	movs	r0, #0
 800edd2:	f7fb f8b9 	bl	8009f48 <otInstanceFinalize>
  otInstanceInitSingle();
 800edd6:	f7fb f890 	bl	8009efa <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800edda:	2200      	movs	r2, #0
 800eddc:	4955      	ldr	r1, [pc, #340]	; (800ef34 <APP_THREAD_DeviceConfig+0x184>)
 800edde:	2000      	movs	r0, #0
 800ede0:	f7fb f8d8 	bl	8009f94 <otSetStateChangedCallback>
 800ede4:	4603      	mov	r3, r0
 800ede6:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ede8:	79fb      	ldrb	r3, [r7, #7]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d004      	beq.n	800edf8 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	4619      	mov	r1, r3
 800edf2:	2001      	movs	r0, #1
 800edf4:	f7ff ff7c 	bl	800ecf0 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800edf8:	2117      	movs	r1, #23
 800edfa:	2000      	movs	r0, #0
 800edfc:	f7fb fa08 	bl	800a210 <otLinkSetChannel>
 800ee00:	4603      	mov	r3, r0
 800ee02:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d004      	beq.n	800ee14 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 800ee0a:	79fb      	ldrb	r3, [r7, #7]
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	2002      	movs	r0, #2
 800ee10:	f7ff ff6e 	bl	800ecf0 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 800ee14:	f241 2134 	movw	r1, #4660	; 0x1234
 800ee18:	2000      	movs	r0, #0
 800ee1a:	f7fb fa29 	bl	800a270 <otLinkSetPanId>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ee22:	79fb      	ldrb	r3, [r7, #7]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d004      	beq.n	800ee32 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 800ee28:	79fb      	ldrb	r3, [r7, #7]
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	2003      	movs	r0, #3
 800ee2e:	f7ff ff5f 	bl	800ecf0 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 800ee32:	2101      	movs	r1, #1
 800ee34:	2000      	movs	r0, #0
 800ee36:	f7fb f90c 	bl	800a052 <otIp6SetEnabled>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d004      	beq.n	800ee4e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 800ee44:	79fb      	ldrb	r3, [r7, #7]
 800ee46:	4619      	mov	r1, r3
 800ee48:	2004      	movs	r0, #4
 800ee4a:	f7ff ff51 	bl	800ecf0 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 800ee4e:	2101      	movs	r1, #1
 800ee50:	2000      	movs	r0, #0
 800ee52:	f7fb fd42 	bl	800a8da <otThreadSetEnabled>
 800ee56:	4603      	mov	r3, r0
 800ee58:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800ee5a:	79fb      	ldrb	r3, [r7, #7]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d004      	beq.n	800ee6a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 800ee60:	79fb      	ldrb	r3, [r7, #7]
 800ee62:	4619      	mov	r1, r3
 800ee64:	2005      	movs	r0, #5
 800ee66:	f7ff ff43 	bl	800ecf0 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	f7fb fd34 	bl	800a8da <otThreadSetEnabled>
 800ee72:	4603      	mov	r3, r0
 800ee74:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800ee76:	79fb      	ldrb	r3, [r7, #7]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d004      	beq.n	800ee86 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 800ee7c:	79fb      	ldrb	r3, [r7, #7]
 800ee7e:	4619      	mov	r1, r3
 800ee80:	2005      	movs	r0, #5
 800ee82:	f7ff ff35 	bl	800ecf0 <APP_THREAD_Error>
  	}


  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 800ee86:	2106      	movs	r1, #6
 800ee88:	2000      	movs	r0, #0
 800ee8a:	f7fb fcf3 	bl	800a874 <otPlatRadioSetTransmitPower>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800ee92:	79fb      	ldrb	r3, [r7, #7]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d004      	beq.n	800eea2 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 800ee98:	79fb      	ldrb	r3, [r7, #7]
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	2002      	movs	r0, #2
 800ee9e:	f7ff ff27 	bl	800ecf0 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 800eea2:	2103      	movs	r1, #3
 800eea4:	2000      	movs	r0, #0
 800eea6:	f7fb fd48 	bl	800a93a <otThreadSetChildTimeout>
//  	error = otThreadSetMasterKey(NULL, &masterKey);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 800eeaa:	4923      	ldr	r1, [pc, #140]	; (800ef38 <APP_THREAD_DeviceConfig+0x188>)
 800eeac:	2000      	movs	r0, #0
 800eeae:	f7fb fdc0 	bl	800aa32 <otThreadSetNetworkName>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800eeb6:	79fb      	ldrb	r3, [r7, #7]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d004      	beq.n	800eec6 <APP_THREAD_DeviceConfig+0x116>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 800eebc:	79fb      	ldrb	r3, [r7, #7]
 800eebe:	4619      	mov	r1, r3
 800eec0:	2002      	movs	r0, #2
 800eec2:	f7ff ff15 	bl	800ecf0 <APP_THREAD_Error>
//  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otIp6SetEnabled(NULL, true);
 800eec6:	2101      	movs	r1, #1
 800eec8:	2000      	movs	r0, #0
 800eeca:	f7fb f8c2 	bl	800a052 <otIp6SetEnabled>
 800eece:	4603      	mov	r3, r0
 800eed0:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800eed2:	79fb      	ldrb	r3, [r7, #7]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d004      	beq.n	800eee2 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 800eed8:	79fb      	ldrb	r3, [r7, #7]
 800eeda:	4619      	mov	r1, r3
 800eedc:	2004      	movs	r0, #4
 800eede:	f7ff ff07 	bl	800ecf0 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 800eee2:	2101      	movs	r1, #1
 800eee4:	2000      	movs	r0, #0
 800eee6:	f7fb fcf8 	bl	800a8da <otThreadSetEnabled>
 800eeea:	4603      	mov	r3, r0
 800eeec:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 800eeee:	79fb      	ldrb	r3, [r7, #7]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d004      	beq.n	800eefe <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 800eef4:	79fb      	ldrb	r3, [r7, #7]
 800eef6:	4619      	mov	r1, r3
 800eef8:	2005      	movs	r0, #5
 800eefa:	f7ff fef9 	bl	800ecf0 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 800eefe:	f241 6133 	movw	r1, #5683	; 0x1633
 800ef02:	2000      	movs	r0, #0
 800ef04:	f7fa ff67 	bl	8009dd6 <otCoapStart>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 800ef0c:	490b      	ldr	r1, [pc, #44]	; (800ef3c <APP_THREAD_DeviceConfig+0x18c>)
 800ef0e:	2000      	movs	r0, #0
 800ef10:	f7fa ff91 	bl	8009e36 <otCoapAddResource>
 800ef14:	4603      	mov	r3, r0
 800ef16:	71fb      	strb	r3, [r7, #7]
  	error = otCoapAddResource(NULL, &OT_Node_Spot_Ressource);
 800ef18:	4909      	ldr	r1, [pc, #36]	; (800ef40 <APP_THREAD_DeviceConfig+0x190>)
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	f7fa ff8b 	bl	8009e36 <otCoapAddResource>
 800ef20:	4603      	mov	r3, r0
 800ef22:	71fb      	strb	r3, [r7, #7]
  #ifndef DONGLE_CODE
//      error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
  #endif
  	// set default multicast address for border router
  //    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
  	otIp6AddressFromString("ff03::1", &multicastAddr);
 800ef24:	4907      	ldr	r1, [pc, #28]	; (800ef44 <APP_THREAD_DeviceConfig+0x194>)
 800ef26:	4808      	ldr	r0, [pc, #32]	; (800ef48 <APP_THREAD_DeviceConfig+0x198>)
 800ef28:	f7fb f940 	bl	800a1ac <otIp6AddressFromString>
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	0800ef4d 	.word	0x0800ef4d
 800ef38:	08010d70 	.word	0x08010d70
 800ef3c:	20000148 	.word	0x20000148
 800ef40:	20000158 	.word	0x20000158
 800ef44:	20004eb0 	.word	0x20004eb0
 800ef48:	08010abc 	.word	0x08010abc

0800ef4c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f003 0304 	and.w	r3, r3, #4
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d013      	beq.n	800ef88 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 800ef60:	2000      	movs	r0, #0
 800ef62:	f7fb fd95 	bl	800aa90 <otThreadGetDeviceRole>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b04      	cmp	r3, #4
 800ef6a:	d80f      	bhi.n	800ef8c <APP_THREAD_StateNotif+0x40>
 800ef6c:	a201      	add	r2, pc, #4	; (adr r2, 800ef74 <APP_THREAD_StateNotif+0x28>)
 800ef6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef72:	bf00      	nop
 800ef74:	0800ef8d 	.word	0x0800ef8d
 800ef78:	0800ef8d 	.word	0x0800ef8d
 800ef7c:	0800ef8d 	.word	0x0800ef8d
 800ef80:	0800ef8d 	.word	0x0800ef8d
 800ef84:	0800ef8d 	.word	0x0800ef8d
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 800ef88:	bf00      	nop
 800ef8a:	e000      	b.n	800ef8e <APP_THREAD_StateNotif+0x42>
      break;
 800ef8c:	bf00      	nop
}
 800ef8e:	bf00      	nop
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop

0800ef98 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 800efa2:	bf00      	nop
 800efa4:	370c      	adds	r7, #12
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr
	...

0800efb0 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b088      	sub	sp, #32
 800efb4:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 800efb6:	1d3b      	adds	r3, r7, #4
 800efb8:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800efba:	6978      	ldr	r0, [r7, #20]
 800efbc:	f7fa f816 	bl	8008fec <SHCI_GetWirelessFwInfo>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d004      	beq.n	800efd0 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800efc6:	2101      	movs	r1, #1
 800efc8:	2007      	movs	r0, #7
 800efca:	f7ff fe91 	bl	800ecf0 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 800efce:	e03d      	b.n	800f04c <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 800efd0:	4a20      	ldr	r2, [pc, #128]	; (800f054 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 800efd2:	2101      	movs	r1, #1
 800efd4:	2000      	movs	r0, #0
 800efd6:	f7f2 fea5 	bl	8001d24 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800efda:	4a1f      	ldr	r2, [pc, #124]	; (800f058 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 800efdc:	2101      	movs	r1, #1
 800efde:	2000      	movs	r0, #0
 800efe0:	f7f2 fea0 	bl	8001d24 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	4619      	mov	r1, r3
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	785b      	ldrb	r3, [r3, #1]
 800efee:	461a      	mov	r2, r3
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	789b      	ldrb	r3, [r3, #2]
 800eff4:	9301      	str	r3, [sp, #4]
 800eff6:	9200      	str	r2, [sp, #0]
 800eff8:	460b      	mov	r3, r1
 800effa:	4a18      	ldr	r2, [pc, #96]	; (800f05c <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 800effc:	2101      	movs	r1, #1
 800effe:	2000      	movs	r0, #0
 800f000:	f7f2 fe90 	bl	8001d24 <logApplication>
    switch(p_wireless_info->StackType)
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	7a5b      	ldrb	r3, [r3, #9]
 800f008:	2b11      	cmp	r3, #17
 800f00a:	d009      	beq.n	800f020 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 800f00c:	2b50      	cmp	r3, #80	; 0x50
 800f00e:	d00d      	beq.n	800f02c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 800f010:	2b10      	cmp	r3, #16
 800f012:	d111      	bne.n	800f038 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 800f014:	4a12      	ldr	r2, [pc, #72]	; (800f060 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 800f016:	2101      	movs	r1, #1
 800f018:	2000      	movs	r0, #0
 800f01a:	f7f2 fe83 	bl	8001d24 <logApplication>
      break;
 800f01e:	e010      	b.n	800f042 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 800f020:	4a10      	ldr	r2, [pc, #64]	; (800f064 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 800f022:	2101      	movs	r1, #1
 800f024:	2000      	movs	r0, #0
 800f026:	f7f2 fe7d 	bl	8001d24 <logApplication>
      break;
 800f02a:	e00a      	b.n	800f042 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800f02c:	4a0e      	ldr	r2, [pc, #56]	; (800f068 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 800f02e:	2101      	movs	r1, #1
 800f030:	2000      	movs	r0, #0
 800f032:	f7f2 fe77 	bl	8001d24 <logApplication>
      break;
 800f036:	e004      	b.n	800f042 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800f038:	2101      	movs	r1, #1
 800f03a:	2007      	movs	r0, #7
 800f03c:	f7ff fe58 	bl	800ecf0 <APP_THREAD_Error>
      break;
 800f040:	bf00      	nop
    APP_DBG("**********************************************************");
 800f042:	4a04      	ldr	r2, [pc, #16]	; (800f054 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 800f044:	2101      	movs	r1, #1
 800f046:	2000      	movs	r0, #0
 800f048:	f7f2 fe6c 	bl	8001d24 <logApplication>
}
 800f04c:	bf00      	nop
 800f04e:	3718      	adds	r7, #24
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	08010ac4 	.word	0x08010ac4
 800f058:	08010b00 	.word	0x08010b00
 800f05c:	08010b1c 	.word	0x08010b1c
 800f060:	08010b34 	.word	0x08010b34
 800f064:	08010b4c 	.word	0x08010b4c
 800f068:	08010b64 	.word	0x08010b64

0800f06c <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800f074:	f04f 32ff 	mov.w	r2, #4294967295
 800f078:	2101      	movs	r1, #1
 800f07a:	2001      	movs	r0, #1
 800f07c:	f7fb ff88 	bl	800af90 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 800f080:	f000 fb3e 	bl	800f700 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800f084:	e7f6      	b.n	800f074 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

0800f086 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b082      	sub	sp, #8
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800f08e:	f04f 32ff 	mov.w	r2, #4294967295
 800f092:	2101      	movs	r1, #1
 800f094:	2001      	movs	r0, #1
 800f096:	f7fb ff7b 	bl	800af90 <osThreadFlagsWait>
    Send_CLI_To_M0();
 800f09a:	f000 fab3 	bl	800f604 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800f09e:	e7f6      	b.n	800f08e <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0800f0a0 <APP_THREAD_CoapNodeSpotRequestHandler>:
//}

static void APP_THREAD_CoapNodeSpotRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b08a      	sub	sp, #40	; 0x28
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	607a      	str	r2, [r7, #4]
 800f0ac:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		struct MeasMsg receivedMeasMsg;
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedMeasMsg, sizeof(receivedMeasMsg))
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7fb f939 	bl	800a326 <otMessageGetOffset>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	f107 0214 	add.w	r2, r7, #20
 800f0bc:	2314      	movs	r3, #20
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7fb f996 	bl	800a3f0 <otMessageRead>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b14      	cmp	r3, #20
 800f0c8:	d119      	bne.n	800f0fe <APP_THREAD_CoapNodeSpotRequestHandler+0x5e>
				== sizeof(receivedMeasMsg)) {


			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 800f0ca:	68b8      	ldr	r0, [r7, #8]
 800f0cc:	f7fa fd64 	bl	8009b98 <otCoapHeaderGetCode>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d109      	bne.n	800f0ea <APP_THREAD_CoapNodeSpotRequestHandler+0x4a>
			{
				measMsgReceivedFromNode(&receivedMeasMsg);
 800f0d6:	f107 0314 	add.w	r3, r7, #20
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7f2 fc02 	bl	80018e4 <measMsgReceivedFromNode>
				toggleLed(0,0,1);
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	2100      	movs	r1, #0
 800f0e4:	2000      	movs	r0, #0
 800f0e6:	f7f2 f8ff 	bl	80012e8 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800f0ea:	68b8      	ldr	r0, [r7, #8]
 800f0ec:	f7fa fd26 	bl	8009b3c <otCoapHeaderGetType>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d103      	bne.n	800f0fe <APP_THREAD_CoapNodeSpotRequestHandler+0x5e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 800f0f6:	6839      	ldr	r1, [r7, #0]
 800f0f8:	68b8      	ldr	r0, [r7, #8]
 800f0fa:	f000 f85b 	bl	800f1b4 <APP_THREAD_CoapSendDataResponse>
			}

		}
}
 800f0fe:	bf00      	nop
 800f100:	3728      	adds	r7, #40	; 0x28
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
	...

0800f108 <APP_THREAD_CoapNodeCalRequestHandler>:

struct CalMsg receivedCalMsg;
static void APP_THREAD_CoapNodeCalRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 800f108:	b580      	push	{r7, lr}
 800f10a:	b086      	sub	sp, #24
 800f10c:	af02      	add	r7, sp, #8
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
 800f114:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedCalMsg, sizeof(receivedCalMsg))
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7fb f905 	bl	800a326 <otMessageGetOffset>
 800f11c:	4603      	mov	r3, r0
 800f11e:	4619      	mov	r1, r3
 800f120:	230c      	movs	r3, #12
 800f122:	4a23      	ldr	r2, [pc, #140]	; (800f1b0 <APP_THREAD_CoapNodeCalRequestHandler+0xa8>)
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7fb f963 	bl	800a3f0 <otMessageRead>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b0c      	cmp	r3, #12
 800f12e:	d13b      	bne.n	800f1a8 <APP_THREAD_CoapNodeCalRequestHandler+0xa0>
				== sizeof(receivedCalMsg)) {

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 800f130:	68b8      	ldr	r0, [r7, #8]
 800f132:	f7fa fd31 	bl	8009b98 <otCoapHeaderGetCode>
 800f136:	4603      	mov	r3, r0
 800f138:	2b03      	cmp	r3, #3
 800f13a:	d10c      	bne.n	800f156 <APP_THREAD_CoapNodeCalRequestHandler+0x4e>
			{
				toggleLed(1,1,1);
 800f13c:	2201      	movs	r2, #1
 800f13e:	2101      	movs	r1, #1
 800f140:	2001      	movs	r0, #1
 800f142:	f7f2 f8d1 	bl	80012e8 <toggleLed>
				if(receivedCalMsg.cal_fcn == CALIBRATION_START_COMMAND){
 800f146:	4b1a      	ldr	r3, [pc, #104]	; (800f1b0 <APP_THREAD_CoapNodeCalRequestHandler+0xa8>)
 800f148:	789b      	ldrb	r3, [r3, #2]
 800f14a:	2b01      	cmp	r3, #1
					// TODO: start calibration

				}else if(receivedCalMsg.cal_fcn == CALIBRATION_STOP_COMMAND){
					// TODO: stop calibration
				}
				toggleLed(0,0,1);
 800f14c:	2201      	movs	r2, #1
 800f14e:	2100      	movs	r1, #0
 800f150:	2000      	movs	r0, #0
 800f152:	f7f2 f8c9 	bl	80012e8 <toggleLed>
			}

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 800f156:	68b8      	ldr	r0, [r7, #8]
 800f158:	f7fa fd1e 	bl	8009b98 <otCoapHeaderGetCode>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d118      	bne.n	800f194 <APP_THREAD_CoapNodeCalRequestHandler+0x8c>
			{
				toggleLed(1,1,1);
 800f162:	2201      	movs	r2, #1
 800f164:	2101      	movs	r1, #1
 800f166:	2001      	movs	r0, #1
 800f168:	f7f2 f8be 	bl	80012e8 <toggleLed>
				if(receivedCalMsg.cal_fcn == CALIBRATION_GET_MEAS){
 800f16c:	4b10      	ldr	r3, [pc, #64]	; (800f1b0 <APP_THREAD_CoapNodeCalRequestHandler+0xa8>)
 800f16e:	789b      	ldrb	r3, [r3, #2]
 800f170:	2b02      	cmp	r3, #2
 800f172:	d10a      	bne.n	800f18a <APP_THREAD_CoapNodeCalRequestHandler+0x82>
					// send measurement to Spotlight
					// 		TODO this can be done in an ACK but doing it now in a separate PUT request to the nodeSpot resource
					sendPowerMeasurement(pMessageInfo->mPeerAddr, receivedCalMsg.angle_1, receivedCalMsg.angle_2);
 800f174:	4b0e      	ldr	r3, [pc, #56]	; (800f1b0 <APP_THREAD_CoapNodeCalRequestHandler+0xa8>)
 800f176:	685a      	ldr	r2, [r3, #4]
 800f178:	4b0d      	ldr	r3, [pc, #52]	; (800f1b0 <APP_THREAD_CoapNodeCalRequestHandler+0xa8>)
 800f17a:	6899      	ldr	r1, [r3, #8]
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	9101      	str	r1, [sp, #4]
 800f180:	9200      	str	r2, [sp, #0]
 800f182:	3310      	adds	r3, #16
 800f184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f186:	f7f2 fbd7 	bl	8001938 <sendPowerMeasurement>
				}
				toggleLed(1,0,0);
 800f18a:	2200      	movs	r2, #0
 800f18c:	2100      	movs	r1, #0
 800f18e:	2001      	movs	r0, #1
 800f190:	f7f2 f8aa 	bl	80012e8 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800f194:	68b8      	ldr	r0, [r7, #8]
 800f196:	f7fa fcd1 	bl	8009b3c <otCoapHeaderGetType>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d103      	bne.n	800f1a8 <APP_THREAD_CoapNodeCalRequestHandler+0xa0>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 800f1a0:	6839      	ldr	r1, [r7, #0]
 800f1a2:	68b8      	ldr	r0, [r7, #8]
 800f1a4:	f000 f806 	bl	800f1b4 <APP_THREAD_CoapSendDataResponse>
//
//		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
//			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
//		}

}
 800f1a8:	bf00      	nop
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	20004ecc 	.word	0x20004ecc

0800f1b4 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 800f1b4:	b590      	push	{r4, r7, lr}
 800f1b6:	b085      	sub	sp, #20
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 800f1c2:	4a25      	ldr	r2, [pc, #148]	; (800f258 <APP_THREAD_CoapSendDataResponse+0xa4>)
 800f1c4:	2101      	movs	r1, #1
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	f7f2 fdac 	bl	8001d24 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 800f1cc:	2244      	movs	r2, #68	; 0x44
 800f1ce:	2120      	movs	r1, #32
 800f1d0:	4822      	ldr	r0, [pc, #136]	; (800f25c <APP_THREAD_CoapSendDataResponse+0xa8>)
 800f1d2:	f7fa fb57 	bl	8009884 <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7fa fd0c 	bl	8009bf4 <otCoapHeaderGetMessageId>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	4619      	mov	r1, r3
 800f1e0:	481e      	ldr	r0, [pc, #120]	; (800f25c <APP_THREAD_CoapSendDataResponse+0xa8>)
 800f1e2:	f7fa fc7b 	bl	8009adc <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7fa fd60 	bl	8009cac <otCoapHeaderGetToken>
 800f1ec:	4604      	mov	r4, r0
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f7fa fd2e 	bl	8009c50 <otCoapHeaderGetTokenLength>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4818      	ldr	r0, [pc, #96]	; (800f25c <APP_THREAD_CoapSendDataResponse+0xa8>)
 800f1fc:	f7fa fb77 	bl	80098ee <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800f200:	4916      	ldr	r1, [pc, #88]	; (800f25c <APP_THREAD_CoapSendDataResponse+0xa8>)
 800f202:	2000      	movs	r0, #0
 800f204:	f7fa fd7f 	bl	8009d06 <otCoapNewMessage>
 800f208:	4602      	mov	r2, r0
 800f20a:	4b15      	ldr	r3, [pc, #84]	; (800f260 <APP_THREAD_CoapSendDataResponse+0xac>)
 800f20c:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 800f20e:	4b14      	ldr	r3, [pc, #80]	; (800f260 <APP_THREAD_CoapSendDataResponse+0xac>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d106      	bne.n	800f224 <APP_THREAD_CoapSendDataResponse+0x70>
    {
      APP_DBG("WARNING : pOT_Message = NULL ! -> exit now");
 800f216:	4a13      	ldr	r2, [pc, #76]	; (800f264 <APP_THREAD_CoapSendDataResponse+0xb0>)
 800f218:	2101      	movs	r1, #1
 800f21a:	2000      	movs	r0, #0
 800f21c:	f7f2 fd82 	bl	8001d24 <logApplication>
      break;
 800f220:	bf00      	nop
    {
      otMessageFree(pOT_Message);
//      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 800f222:	e014      	b.n	800f24e <APP_THREAD_CoapSendDataResponse+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 800f224:	4b0e      	ldr	r3, [pc, #56]	; (800f260 <APP_THREAD_CoapSendDataResponse+0xac>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	683a      	ldr	r2, [r7, #0]
 800f22a:	4619      	mov	r1, r3
 800f22c:	2000      	movs	r0, #0
 800f22e:	f7fa fe31 	bl	8009e94 <otCoapSendResponse>
 800f232:	4603      	mov	r3, r0
 800f234:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800f236:	7bfb      	ldrb	r3, [r7, #15]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d008      	beq.n	800f24e <APP_THREAD_CoapSendDataResponse+0x9a>
 800f23c:	4b08      	ldr	r3, [pc, #32]	; (800f260 <APP_THREAD_CoapSendDataResponse+0xac>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d004      	beq.n	800f24e <APP_THREAD_CoapSendDataResponse+0x9a>
      otMessageFree(pOT_Message);
 800f244:	4b06      	ldr	r3, [pc, #24]	; (800f260 <APP_THREAD_CoapSendDataResponse+0xac>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fb f841 	bl	800a2d0 <otMessageFree>
}
 800f24e:	bf00      	nop
 800f250:	3714      	adds	r7, #20
 800f252:	46bd      	mov	sp, r7
 800f254:	bd90      	pop	{r4, r7, pc}
 800f256:	bf00      	nop
 800f258:	08010b90 	.word	0x08010b90
 800f25c:	20004abc 	.word	0x20004abc
 800f260:	20004a6c 	.word	0x20004a6c
 800f264:	08010bc8 	.word	0x08010bc8

0800f268 <APP_THREAD_SendCoapMsg>:
//		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
//	}
//}

void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, const char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 800f268:	b590      	push	{r4, r7, lr}
 800f26a:	b087      	sub	sp, #28
 800f26c:	af02      	add	r7, sp, #8
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	607a      	str	r2, [r7, #4]
 800f272:	603b      	str	r3, [r7, #0]
 800f274:	460b      	mov	r3, r1
 800f276:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 800f278:	2000      	movs	r0, #0
 800f27a:	f7fb fc32 	bl	800aae2 <otThreadGetRloc16>
 800f27e:	4603      	mov	r3, r0
 800f280:	461a      	mov	r2, r3
 800f282:	4b7e      	ldr	r3, [pc, #504]	; (800f47c <APP_THREAD_SendCoapMsg+0x214>)
 800f284:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 800f286:	2000      	movs	r0, #0
 800f288:	f7fa ff40 	bl	800a10c <otIp6GetUnicastAddresses>
 800f28c:	4602      	mov	r2, r0
 800f28e:	4b7c      	ldr	r3, [pc, #496]	; (800f480 <APP_THREAD_SendCoapMsg+0x218>)
 800f290:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 800f292:	2000      	movs	r0, #0
 800f294:	f7fa ff0d 	bl	800a0b2 <otIp6IsEnabled>
 800f298:	4603      	mov	r3, r0
 800f29a:	461a      	mov	r2, r3
 800f29c:	4b79      	ldr	r3, [pc, #484]	; (800f484 <APP_THREAD_SendCoapMsg+0x21c>)
 800f29e:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	f7fa ff5b 	bl	800a15c <otIp6GetMulticastAddresses>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	4b77      	ldr	r3, [pc, #476]	; (800f488 <APP_THREAD_SendCoapMsg+0x220>)
 800f2aa:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	f7fb fb70 	bl	800a992 <otThreadGetMeshLocalEid>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	4b75      	ldr	r3, [pc, #468]	; (800f48c <APP_THREAD_SendCoapMsg+0x224>)
 800f2b6:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 800f2b8:	2000      	movs	r0, #0
 800f2ba:	f7fb fb92 	bl	800a9e2 <otThreadGetLinkLocalIp6Address>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	4b73      	ldr	r3, [pc, #460]	; (800f490 <APP_THREAD_SendCoapMsg+0x228>)
 800f2c2:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800f2c4:	222c      	movs	r2, #44	; 0x2c
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	4872      	ldr	r0, [pc, #456]	; (800f494 <APP_THREAD_SendCoapMsg+0x22c>)
 800f2ca:	f001 fac0 	bl	801084e <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 800f2ce:	897b      	ldrh	r3, [r7, #10]
 800f2d0:	2b64      	cmp	r3, #100	; 0x64
 800f2d2:	d914      	bls.n	800f2fe <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 800f2d4:	4b6f      	ldr	r3, [pc, #444]	; (800f494 <APP_THREAD_SendCoapMsg+0x22c>)
 800f2d6:	4a70      	ldr	r2, [pc, #448]	; (800f498 <APP_THREAD_SendCoapMsg+0x230>)
 800f2d8:	f103 0410 	add.w	r4, r3, #16
 800f2dc:	4613      	mov	r3, r2
 800f2de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f2e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	f7fb fb54 	bl	800a992 <otThreadGetMeshLocalEid>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	4b69      	ldr	r3, [pc, #420]	; (800f494 <APP_THREAD_SendCoapMsg+0x22c>)
 800f2ee:	461c      	mov	r4, r3
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	6818      	ldr	r0, [r3, #0]
 800f2f4:	6859      	ldr	r1, [r3, #4]
 800f2f6:	689a      	ldr	r2, [r3, #8]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2fc:	e015      	b.n	800f32a <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 800f2fe:	4b65      	ldr	r3, [pc, #404]	; (800f494 <APP_THREAD_SendCoapMsg+0x22c>)
 800f300:	4a66      	ldr	r2, [pc, #408]	; (800f49c <APP_THREAD_SendCoapMsg+0x234>)
 800f302:	f103 0410 	add.w	r4, r3, #16
 800f306:	4613      	mov	r3, r2
 800f308:	6818      	ldr	r0, [r3, #0]
 800f30a:	6859      	ldr	r1, [r3, #4]
 800f30c:	689a      	ldr	r2, [r3, #8]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800f312:	2000      	movs	r0, #0
 800f314:	f7fb fb3d 	bl	800a992 <otThreadGetMeshLocalEid>
 800f318:	4602      	mov	r2, r0
 800f31a:	4b5e      	ldr	r3, [pc, #376]	; (800f494 <APP_THREAD_SendCoapMsg+0x22c>)
 800f31c:	461c      	mov	r4, r3
 800f31e:	4613      	mov	r3, r2
 800f320:	6818      	ldr	r0, [r3, #0]
 800f322:	6859      	ldr	r1, [r3, #4]
 800f324:	689a      	ldr	r2, [r3, #8]
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 800f32a:	4b5a      	ldr	r3, [pc, #360]	; (800f494 <APP_THREAD_SendCoapMsg+0x22c>)
 800f32c:	2201      	movs	r2, #1
 800f32e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800f332:	4b58      	ldr	r3, [pc, #352]	; (800f494 <APP_THREAD_SendCoapMsg+0x22c>)
 800f334:	f241 6233 	movw	r2, #5683	; 0x1633
 800f338:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 800f33a:	4b56      	ldr	r3, [pc, #344]	; (800f494 <APP_THREAD_SendCoapMsg+0x22c>)
 800f33c:	2240      	movs	r2, #64	; 0x40
 800f33e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 800f342:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d009      	beq.n	800f35e <APP_THREAD_SendCoapMsg+0xf6>
 800f34a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f34e:	2b03      	cmp	r3, #3
 800f350:	d105      	bne.n	800f35e <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 800f352:	2203      	movs	r2, #3
 800f354:	2100      	movs	r1, #0
 800f356:	4852      	ldr	r0, [pc, #328]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f358:	f7fa fa94 	bl	8009884 <otCoapHeaderInit>
 800f35c:	e04a      	b.n	800f3f4 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 800f35e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d009      	beq.n	800f37a <APP_THREAD_SendCoapMsg+0x112>
 800f366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d105      	bne.n	800f37a <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 800f36e:	2201      	movs	r2, #1
 800f370:	2100      	movs	r1, #0
 800f372:	484b      	ldr	r0, [pc, #300]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f374:	f7fa fa86 	bl	8009884 <otCoapHeaderInit>
 800f378:	e03c      	b.n	800f3f4 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 800f37a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d009      	beq.n	800f396 <APP_THREAD_SendCoapMsg+0x12e>
 800f382:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f386:	2b02      	cmp	r3, #2
 800f388:	d105      	bne.n	800f396 <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 800f38a:	2202      	movs	r2, #2
 800f38c:	2100      	movs	r1, #0
 800f38e:	4844      	ldr	r0, [pc, #272]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f390:	f7fa fa78 	bl	8009884 <otCoapHeaderInit>
 800f394:	e02e      	b.n	800f3f4 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 800f396:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d109      	bne.n	800f3b2 <APP_THREAD_SendCoapMsg+0x14a>
 800f39e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	d105      	bne.n	800f3b2 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800f3a6:	2203      	movs	r2, #3
 800f3a8:	2110      	movs	r1, #16
 800f3aa:	483d      	ldr	r0, [pc, #244]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f3ac:	f7fa fa6a 	bl	8009884 <otCoapHeaderInit>
 800f3b0:	e020      	b.n	800f3f4 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 800f3b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d109      	bne.n	800f3ce <APP_THREAD_SendCoapMsg+0x166>
 800f3ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	d105      	bne.n	800f3ce <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	2110      	movs	r1, #16
 800f3c6:	4836      	ldr	r0, [pc, #216]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f3c8:	f7fa fa5c 	bl	8009884 <otCoapHeaderInit>
 800f3cc:	e012      	b.n	800f3f4 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 800f3ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d109      	bne.n	800f3ea <APP_THREAD_SendCoapMsg+0x182>
 800f3d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3da:	2b02      	cmp	r3, #2
 800f3dc:	d105      	bne.n	800f3ea <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 800f3de:	2202      	movs	r2, #2
 800f3e0:	2110      	movs	r1, #16
 800f3e2:	482f      	ldr	r0, [pc, #188]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f3e4:	f7fa fa4e 	bl	8009884 <otCoapHeaderInit>
 800f3e8:	e004      	b.n	800f3f4 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 800f3ea:	2102      	movs	r1, #2
 800f3ec:	482c      	ldr	r0, [pc, #176]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f3ee:	f7fa fab2 	bl	8009956 <otCoapHeaderGenerateToken>
 800f3f2:	e040      	b.n	800f476 <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 800f3f4:	6839      	ldr	r1, [r7, #0]
 800f3f6:	482a      	ldr	r0, [pc, #168]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f3f8:	f7fa fb10 	bl	8009a1c <otCoapHeaderAppendUriPathOptions>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	461a      	mov	r2, r3
 800f400:	4b28      	ldr	r3, [pc, #160]	; (800f4a4 <APP_THREAD_SendCoapMsg+0x23c>)
 800f402:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 800f404:	212a      	movs	r1, #42	; 0x2a
 800f406:	4826      	ldr	r0, [pc, #152]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f408:	f7fa fad5 	bl	80099b6 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 800f40c:	897b      	ldrh	r3, [r7, #10]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d002      	beq.n	800f418 <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 800f412:	4823      	ldr	r0, [pc, #140]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f414:	f7fa fb34 	bl	8009a80 <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800f418:	4921      	ldr	r1, [pc, #132]	; (800f4a0 <APP_THREAD_SendCoapMsg+0x238>)
 800f41a:	2000      	movs	r0, #0
 800f41c:	f7fa fc73 	bl	8009d06 <otCoapNewMessage>
 800f420:	4602      	mov	r2, r0
 800f422:	4b21      	ldr	r3, [pc, #132]	; (800f4a8 <APP_THREAD_SendCoapMsg+0x240>)
 800f424:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 800f426:	897b      	ldrh	r3, [r7, #10]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00a      	beq.n	800f442 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 800f42c:	4b1e      	ldr	r3, [pc, #120]	; (800f4a8 <APP_THREAD_SendCoapMsg+0x240>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	897a      	ldrh	r2, [r7, #10]
 800f432:	68f9      	ldr	r1, [r7, #12]
 800f434:	4618      	mov	r0, r3
 800f436:	f7fa ffa4 	bl	800a382 <otMessageAppend>
 800f43a:	4603      	mov	r3, r0
 800f43c:	461a      	mov	r2, r3
 800f43e:	4b19      	ldr	r3, [pc, #100]	; (800f4a4 <APP_THREAD_SendCoapMsg+0x23c>)
 800f440:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 800f442:	4b19      	ldr	r3, [pc, #100]	; (800f4a8 <APP_THREAD_SendCoapMsg+0x240>)
 800f444:	6819      	ldr	r1, [r3, #0]
 800f446:	2300      	movs	r3, #0
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	2300      	movs	r3, #0
 800f44c:	4a11      	ldr	r2, [pc, #68]	; (800f494 <APP_THREAD_SendCoapMsg+0x22c>)
 800f44e:	2000      	movs	r0, #0
 800f450:	f7fa fc87 	bl	8009d62 <otCoapSendRequest>
 800f454:	4603      	mov	r3, r0
 800f456:	461a      	mov	r2, r3
 800f458:	4b12      	ldr	r3, [pc, #72]	; (800f4a4 <APP_THREAD_SendCoapMsg+0x23c>)
 800f45a:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 800f45c:	4b11      	ldr	r3, [pc, #68]	; (800f4a4 <APP_THREAD_SendCoapMsg+0x23c>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d008      	beq.n	800f476 <APP_THREAD_SendCoapMsg+0x20e>
 800f464:	4b10      	ldr	r3, [pc, #64]	; (800f4a8 <APP_THREAD_SendCoapMsg+0x240>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d004      	beq.n	800f476 <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 800f46c:	4b0e      	ldr	r3, [pc, #56]	; (800f4a8 <APP_THREAD_SendCoapMsg+0x240>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4618      	mov	r0, r3
 800f472:	f7fa ff2d 	bl	800a2d0 <otMessageFree>
		}

	} while (false);
}
 800f476:	3714      	adds	r7, #20
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd90      	pop	{r4, r7, pc}
 800f47c:	20004edc 	.word	0x20004edc
 800f480:	20004ee0 	.word	0x20004ee0
 800f484:	20004ec0 	.word	0x20004ec0
 800f488:	20004ea8 	.word	0x20004ea8
 800f48c:	20004ed8 	.word	0x20004ed8
 800f490:	20004eac 	.word	0x20004eac
 800f494:	20004a90 	.word	0x20004a90
 800f498:	20004a78 	.word	0x20004a78
 800f49c:	20004eb0 	.word	0x20004eb0
 800f4a0:	20004abc 	.word	0x20004abc
 800f4a4:	20004a70 	.word	0x20004a70
 800f4a8:	20004a6c 	.word	0x20004a6c

0800f4ac <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 800f4b4:	4a04      	ldr	r2, [pc, #16]	; (800f4c8 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6013      	str	r3, [r2, #0]
}
 800f4ba:	bf00      	nop
 800f4bc:	370c      	adds	r7, #12
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	20004a54 	.word	0x20004a54

0800f4cc <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800f4d0:	4b03      	ldr	r3, [pc, #12]	; (800f4e0 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	330c      	adds	r3, #12
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr
 800f4e0:	20004a54 	.word	0x20004a54

0800f4e4 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800f4e8:	4b03      	ldr	r3, [pc, #12]	; (800f4f8 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	330b      	adds	r3, #11
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr
 800f4f8:	20004a54 	.word	0x20004a54

0800f4fc <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800f500:	4b03      	ldr	r3, [pc, #12]	; (800f510 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	330b      	adds	r3, #11
}
 800f506:	4618      	mov	r0, r3
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	20004a58 	.word	0x20004a58

0800f514 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800f51a:	4b0f      	ldr	r3, [pc, #60]	; (800f558 <Ot_Cmd_Transfer+0x44>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2200      	movs	r2, #0
 800f520:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f524:	725a      	strb	r2, [r3, #9]
 800f526:	2200      	movs	r2, #0
 800f528:	f042 0202 	orr.w	r2, r2, #2
 800f52c:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800f52e:	4b0a      	ldr	r3, [pc, #40]	; (800f558 <Ot_Cmd_Transfer+0x44>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	330c      	adds	r3, #12
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	3302      	adds	r3, #2
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800f53c:	4b06      	ldr	r3, [pc, #24]	; (800f558 <Ot_Cmd_Transfer+0x44>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	b2d2      	uxtb	r2, r2
 800f544:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 800f546:	f7fa f847 	bl	80095d8 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800f54a:	f000 f829 	bl	800f5a0 <Wait_Getting_Ack_From_M0>
}
 800f54e:	bf00      	nop
 800f550:	3708      	adds	r7, #8
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	20004a54 	.word	0x20004a54

0800f55c <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800f564:	f000 f82e 	bl	800f5c4 <Receive_Ack_From_M0>
}
 800f568:	bf00      	nop
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 800f578:	4a04      	ldr	r2, [pc, #16]	; (800f58c <TL_THREAD_NotReceived+0x1c>)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800f57e:	f000 f82d 	bl	800f5dc <Receive_Notification_From_M0>
}
 800f582:	bf00      	nop
 800f584:	3708      	adds	r7, #8
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	20004a58 	.word	0x20004a58

0800f590 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 800f590:	b480      	push	{r7}
 800f592:	af00      	add	r7, sp, #0

}
 800f594:	bf00      	nop
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr
	...

0800f5a0 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 800f5a4:	bf00      	nop
 800f5a6:	4b06      	ldr	r3, [pc, #24]	; (800f5c0 <Wait_Getting_Ack_From_M0+0x20>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d0fb      	beq.n	800f5a6 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 800f5ae:	4b04      	ldr	r3, [pc, #16]	; (800f5c0 <Wait_Getting_Ack_From_M0+0x20>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	601a      	str	r2, [r3, #0]
}
 800f5b4:	bf00      	nop
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop
 800f5c0:	20004a60 	.word	0x20004a60

0800f5c4 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 800f5c8:	4b03      	ldr	r3, [pc, #12]	; (800f5d8 <Receive_Ack_From_M0+0x14>)
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	601a      	str	r2, [r3, #0]
}
 800f5ce:	bf00      	nop
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr
 800f5d8:	20004a60 	.word	0x20004a60

0800f5dc <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 800f5e0:	4b06      	ldr	r3, [pc, #24]	; (800f5fc <Receive_Notification_From_M0+0x20>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	4a05      	ldr	r2, [pc, #20]	; (800f5fc <Receive_Notification_From_M0+0x20>)
 800f5e8:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800f5ea:	4b05      	ldr	r3, [pc, #20]	; (800f600 <Receive_Notification_From_M0+0x24>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2101      	movs	r1, #1
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fb fc6b 	bl	800aecc <osThreadFlagsSet>
}
 800f5f6:	bf00      	nop
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	20004a5c 	.word	0x20004a5c
 800f600:	20004a64 	.word	0x20004a64

0800f604 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 800f608:	22ff      	movs	r2, #255	; 0xff
 800f60a:	2100      	movs	r1, #0
 800f60c:	4812      	ldr	r0, [pc, #72]	; (800f658 <Send_CLI_To_M0+0x54>)
 800f60e:	f001 f91e 	bl	801084e <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 800f612:	4b12      	ldr	r3, [pc, #72]	; (800f65c <Send_CLI_To_M0+0x58>)
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	b29b      	uxth	r3, r3
 800f618:	461a      	mov	r2, r3
 800f61a:	4911      	ldr	r1, [pc, #68]	; (800f660 <Send_CLI_To_M0+0x5c>)
 800f61c:	480e      	ldr	r0, [pc, #56]	; (800f658 <Send_CLI_To_M0+0x54>)
 800f61e:	f001 f90b 	bl	8010838 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800f622:	4b0e      	ldr	r3, [pc, #56]	; (800f65c <Send_CLI_To_M0+0x58>)
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	b29b      	uxth	r3, r3
 800f628:	b2da      	uxtb	r2, r3
 800f62a:	4b0e      	ldr	r3, [pc, #56]	; (800f664 <Send_CLI_To_M0+0x60>)
 800f62c:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 800f62e:	4b0d      	ldr	r3, [pc, #52]	; (800f664 <Send_CLI_To_M0+0x60>)
 800f630:	2200      	movs	r2, #0
 800f632:	725a      	strb	r2, [r3, #9]
 800f634:	2200      	movs	r2, #0
 800f636:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 800f638:	4b0b      	ldr	r3, [pc, #44]	; (800f668 <Send_CLI_To_M0+0x64>)
 800f63a:	2200      	movs	r2, #0
 800f63c:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 800f63e:	4b07      	ldr	r3, [pc, #28]	; (800f65c <Send_CLI_To_M0+0x58>)
 800f640:	2200      	movs	r2, #0
 800f642:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800f644:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f648:	2100      	movs	r1, #0
 800f64a:	4805      	ldr	r0, [pc, #20]	; (800f660 <Send_CLI_To_M0+0x5c>)
 800f64c:	f001 f8ff 	bl	801084e <memset>

  TL_CLI_SendCmd();
 800f650:	f7f9 ffd0 	bl	80095f4 <TL_CLI_SendCmd>
}
 800f654:	bf00      	nop
 800f656:	bd80      	pop	{r7, pc}
 800f658:	20030a58 	.word	0x20030a58
 800f65c:	20004a50 	.word	0x20004a50
 800f660:	20004950 	.word	0x20004950
 800f664:	20030a4c 	.word	0x20030a4c
 800f668:	20004a52 	.word	0x20004a52

0800f66c <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800f670:	f7f9 ffdc 	bl	800962c <TL_THREAD_CliSendAck>
}
 800f674:	bf00      	nop
 800f676:	bd80      	pop	{r7, pc}

0800f678 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 800f67c:	4a04      	ldr	r2, [pc, #16]	; (800f690 <APP_THREAD_Init_UART_CLI+0x18>)
 800f67e:	2100      	movs	r1, #0
 800f680:	4804      	ldr	r0, [pc, #16]	; (800f694 <APP_THREAD_Init_UART_CLI+0x1c>)
 800f682:	f7fb fb7d 	bl	800ad80 <osThreadNew>
 800f686:	4602      	mov	r2, r0
 800f688:	4b03      	ldr	r3, [pc, #12]	; (800f698 <APP_THREAD_Init_UART_CLI+0x20>)
 800f68a:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 800f68c:	bf00      	nop
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	08010d4c 	.word	0x08010d4c
 800f694:	0800f087 	.word	0x0800f087
 800f698:	20004a68 	.word	0x20004a68

0800f69c <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 800f6a0:	4b06      	ldr	r3, [pc, #24]	; (800f6bc <APP_THREAD_TL_THREAD_INIT+0x20>)
 800f6a2:	4a07      	ldr	r2, [pc, #28]	; (800f6c0 <APP_THREAD_TL_THREAD_INIT+0x24>)
 800f6a4:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800f6a6:	4b05      	ldr	r3, [pc, #20]	; (800f6bc <APP_THREAD_TL_THREAD_INIT+0x20>)
 800f6a8:	4a06      	ldr	r2, [pc, #24]	; (800f6c4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800f6aa:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800f6ac:	4b03      	ldr	r3, [pc, #12]	; (800f6bc <APP_THREAD_TL_THREAD_INIT+0x20>)
 800f6ae:	4a06      	ldr	r2, [pc, #24]	; (800f6c8 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 800f6b0:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 800f6b2:	4802      	ldr	r0, [pc, #8]	; (800f6bc <APP_THREAD_TL_THREAD_INIT+0x20>)
 800f6b4:	f7f9 ff74 	bl	80095a0 <TL_THREAD_Init>
}
 800f6b8:	bf00      	nop
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	200300d4 	.word	0x200300d4
 800f6c0:	20030834 	.word	0x20030834
 800f6c4:	20030940 	.word	0x20030940
 800f6c8:	20030a4c 	.word	0x20030a4c

0800f6cc <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	7adb      	ldrb	r3, [r3, #11]
 800f6dc:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	330c      	adds	r3, #12
 800f6e2:	4906      	ldr	r1, [pc, #24]	; (800f6fc <TL_THREAD_CliNotReceived+0x30>)
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7f0 fd4b 	bl	8000180 <strcmp>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d101      	bne.n	800f6f4 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 800f6f0:	f7ff ffbc 	bl	800f66c <Send_CLI_Ack_For_OT>
  }
}
 800f6f4:	bf00      	nop
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	08010bf4 	.word	0x08010bf4

0800f700 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 800f704:	4b09      	ldr	r3, [pc, #36]	; (800f72c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00d      	beq.n	800f728 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 800f70c:	4b07      	ldr	r3, [pc, #28]	; (800f72c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	2b01      	cmp	r3, #1
 800f712:	d904      	bls.n	800f71e <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 800f714:	2100      	movs	r1, #0
 800f716:	2000      	movs	r0, #0
 800f718:	f7ff faea 	bl	800ecf0 <APP_THREAD_Error>
 800f71c:	e001      	b.n	800f722 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 800f71e:	f7fa fea3 	bl	800a468 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 800f722:	4b02      	ldr	r3, [pc, #8]	; (800f72c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800f724:	2200      	movs	r2, #0
 800f726:	601a      	str	r2, [r3, #0]
  }
}
 800f728:	bf00      	nop
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	20004a5c 	.word	0x20004a5c

0800f730 <LL_PWR_EnableBootC2>:
{
 800f730:	b480      	push	{r7}
 800f732:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f734:	4b05      	ldr	r3, [pc, #20]	; (800f74c <LL_PWR_EnableBootC2+0x1c>)
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	4a04      	ldr	r2, [pc, #16]	; (800f74c <LL_PWR_EnableBootC2+0x1c>)
 800f73a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f73e:	60d3      	str	r3, [r2, #12]
}
 800f740:	bf00      	nop
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	58000400 	.word	0x58000400

0800f750 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f758:	4b06      	ldr	r3, [pc, #24]	; (800f774 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f75a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800f75e:	4905      	ldr	r1, [pc, #20]	; (800f774 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4313      	orrs	r3, r2
 800f764:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800f768:	bf00      	nop
 800f76a:	370c      	adds	r7, #12
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr
 800f774:	58000800 	.word	0x58000800

0800f778 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f780:	4b05      	ldr	r3, [pc, #20]	; (800f798 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f782:	6a1a      	ldr	r2, [r3, #32]
 800f784:	4904      	ldr	r1, [pc, #16]	; (800f798 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4313      	orrs	r3, r2
 800f78a:	620b      	str	r3, [r1, #32]
}
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr
 800f798:	58000800 	.word	0x58000800

0800f79c <LL_AHB3_GRP1_EnableClock>:
{
 800f79c:	b480      	push	{r7}
 800f79e:	b085      	sub	sp, #20
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f7a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f7b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4013      	ands	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
}
 800f7c2:	bf00      	nop
 800f7c4:	3714      	adds	r7, #20
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b085      	sub	sp, #20
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f7d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7da:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f7de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f7ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7ee:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
}
 800f7fa:	bf00      	nop
 800f7fc:	3714      	adds	r7, #20
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <LL_C1_IPCC_EnableIT_TXF>:
{
 800f806:	b480      	push	{r7}
 800f808:	b083      	sub	sp, #12
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	601a      	str	r2, [r3, #0]
}
 800f81a:	bf00      	nop
 800f81c:	370c      	adds	r7, #12
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <LL_C1_IPCC_EnableIT_RXO>:
{
 800f826:	b480      	push	{r7}
 800f828:	b083      	sub	sp, #12
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	f043 0201 	orr.w	r2, r3, #1
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	601a      	str	r2, [r3, #0]
}
 800f83a:	bf00      	nop
 800f83c:	370c      	adds	r7, #12
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr

0800f846 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800f846:	b480      	push	{r7}
 800f848:	b083      	sub	sp, #12
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
 800f84e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	685a      	ldr	r2, [r3, #4]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	041b      	lsls	r3, r3, #16
 800f858:	43db      	mvns	r3, r3
 800f85a:	401a      	ands	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	605a      	str	r2, [r3, #4]
}
 800f860:	bf00      	nop
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	685a      	ldr	r2, [r3, #4]
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	041b      	lsls	r3, r3, #16
 800f87e:	431a      	orrs	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	605a      	str	r2, [r3, #4]
}
 800f884:	bf00      	nop
 800f886:	370c      	adds	r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	685a      	ldr	r2, [r3, #4]
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	43db      	mvns	r3, r3
 800f8a2:	401a      	ands	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	605a      	str	r2, [r3, #4]
}
 800f8a8:	bf00      	nop
 800f8aa:	370c      	adds	r7, #12
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr

0800f8b4 <LL_C1_IPCC_DisableReceiveChannel>:
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	431a      	orrs	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	605a      	str	r2, [r3, #4]
}
 800f8ca:	bf00      	nop
 800f8cc:	370c      	adds	r7, #12
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr

0800f8d6 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800f8d6:	b480      	push	{r7}
 800f8d8:	b083      	sub	sp, #12
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
 800f8de:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	683a      	ldr	r2, [r7, #0]
 800f8e4:	609a      	str	r2, [r3, #8]
}
 800f8e6:	bf00      	nop
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr

0800f8f2 <LL_C1_IPCC_SetFlag_CHx>:
{
 800f8f2:	b480      	push	{r7}
 800f8f4:	b083      	sub	sp, #12
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
 800f8fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	041a      	lsls	r2, r3, #16
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	609a      	str	r2, [r3, #8]
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	68da      	ldr	r2, [r3, #12]
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	4013      	ands	r3, r2
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	d101      	bne.n	800f92c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f928:	2301      	movs	r3, #1
 800f92a:	e000      	b.n	800f92e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f92c:	2300      	movs	r3, #0
}
 800f92e:	4618      	mov	r0, r3
 800f930:	370c      	adds	r7, #12
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr

0800f93a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f93a:	b480      	push	{r7}
 800f93c:	b083      	sub	sp, #12
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	69da      	ldr	r2, [r3, #28]
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	4013      	ands	r3, r2
 800f94c:	683a      	ldr	r2, [r7, #0]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d101      	bne.n	800f956 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f952:	2301      	movs	r3, #1
 800f954:	e000      	b.n	800f958 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f964:	b580      	push	{r7, lr}
 800f966:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f968:	2102      	movs	r1, #2
 800f96a:	482a      	ldr	r0, [pc, #168]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f96c:	f7ff ffe5 	bl	800f93a <LL_C2_IPCC_IsActiveFlag_CHx>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d009      	beq.n	800f98a <HW_IPCC_Rx_Handler+0x26>
 800f976:	4b27      	ldr	r3, [pc, #156]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	43db      	mvns	r3, r3
 800f97c:	f003 0302 	and.w	r3, r3, #2
 800f980:	2b00      	cmp	r3, #0
 800f982:	d002      	beq.n	800f98a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800f984:	f000 f90a 	bl	800fb9c <HW_IPCC_SYS_EvtHandler>
 800f988:	e041      	b.n	800fa0e <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800f98a:	2104      	movs	r1, #4
 800f98c:	4821      	ldr	r0, [pc, #132]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f98e:	f7ff ffd4 	bl	800f93a <LL_C2_IPCC_IsActiveFlag_CHx>
 800f992:	4603      	mov	r3, r0
 800f994:	2b00      	cmp	r3, #0
 800f996:	d009      	beq.n	800f9ac <HW_IPCC_Rx_Handler+0x48>
 800f998:	4b1e      	ldr	r3, [pc, #120]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	43db      	mvns	r3, r3
 800f99e:	f003 0304 	and.w	r3, r3, #4
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d002      	beq.n	800f9ac <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800f9a6:	f000 f953 	bl	800fc50 <HW_IPCC_THREAD_NotEvtHandler>
 800f9aa:	e030      	b.n	800fa0e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800f9ac:	2110      	movs	r1, #16
 800f9ae:	4819      	ldr	r0, [pc, #100]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f9b0:	f7ff ffc3 	bl	800f93a <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d009      	beq.n	800f9ce <HW_IPCC_Rx_Handler+0x6a>
 800f9ba:	4b16      	ldr	r3, [pc, #88]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	43db      	mvns	r3, r3
 800f9c0:	f003 0310 	and.w	r3, r3, #16
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d002      	beq.n	800f9ce <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800f9c8:	f000 f94e 	bl	800fc68 <HW_IPCC_THREAD_CliNotEvtHandler>
 800f9cc:	e01f      	b.n	800fa0e <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	4810      	ldr	r0, [pc, #64]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f9d2:	f7ff ffb2 	bl	800f93a <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d008      	beq.n	800f9ee <HW_IPCC_Rx_Handler+0x8a>
 800f9dc:	4b0d      	ldr	r3, [pc, #52]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	f003 0301 	and.w	r3, r3, #1
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d102      	bne.n	800f9ee <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800f9e8:	f000 f89c 	bl	800fb24 <HW_IPCC_BLE_EvtHandler>
 800f9ec:	e00f      	b.n	800fa0e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800f9ee:	2108      	movs	r1, #8
 800f9f0:	4808      	ldr	r0, [pc, #32]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f9f2:	f7ff ffa2 	bl	800f93a <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d009      	beq.n	800fa10 <HW_IPCC_Rx_Handler+0xac>
 800f9fc:	4b05      	ldr	r3, [pc, #20]	; (800fa14 <HW_IPCC_Rx_Handler+0xb0>)
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	43db      	mvns	r3, r3
 800fa02:	f003 0308 	and.w	r3, r3, #8
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d002      	beq.n	800fa10 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800fa0a:	f000 f979 	bl	800fd00 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800fa0e:	bf00      	nop
 800fa10:	bf00      	nop
}
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	58000c00 	.word	0x58000c00

0800fa18 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800fa1c:	2102      	movs	r1, #2
 800fa1e:	482b      	ldr	r0, [pc, #172]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800fa20:	f7ff ff76 	bl	800f910 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d109      	bne.n	800fa3e <HW_IPCC_Tx_Handler+0x26>
 800fa2a:	4b28      	ldr	r3, [pc, #160]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	43db      	mvns	r3, r3
 800fa30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d002      	beq.n	800fa3e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fa38:	f000 f8a4 	bl	800fb84 <HW_IPCC_SYS_CmdEvtHandler>
 800fa3c:	e042      	b.n	800fac4 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800fa3e:	2104      	movs	r1, #4
 800fa40:	4822      	ldr	r0, [pc, #136]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800fa42:	f7ff ff65 	bl	800f910 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d109      	bne.n	800fa60 <HW_IPCC_Tx_Handler+0x48>
 800fa4c:	4b1f      	ldr	r3, [pc, #124]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	43db      	mvns	r3, r3
 800fa52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d002      	beq.n	800fa60 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 800fa5a:	f000 f8ed 	bl	800fc38 <HW_IPCC_OT_CmdEvtHandler>
 800fa5e:	e031      	b.n	800fac4 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800fa60:	2102      	movs	r1, #2
 800fa62:	481a      	ldr	r0, [pc, #104]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800fa64:	f7ff ff54 	bl	800f910 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d109      	bne.n	800fa82 <HW_IPCC_Tx_Handler+0x6a>
 800fa6e:	4b17      	ldr	r3, [pc, #92]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	43db      	mvns	r3, r3
 800fa74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d002      	beq.n	800fa82 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fa7c:	f000 f882 	bl	800fb84 <HW_IPCC_SYS_CmdEvtHandler>
 800fa80:	e020      	b.n	800fac4 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800fa82:	2108      	movs	r1, #8
 800fa84:	4811      	ldr	r0, [pc, #68]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800fa86:	f7ff ff43 	bl	800f910 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d109      	bne.n	800faa4 <HW_IPCC_Tx_Handler+0x8c>
 800fa90:	4b0e      	ldr	r3, [pc, #56]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	43db      	mvns	r3, r3
 800fa96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d002      	beq.n	800faa4 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 800fa9e:	f000 f911 	bl	800fcc4 <HW_IPCC_MM_FreeBufHandler>
 800faa2:	e00f      	b.n	800fac4 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800faa4:	2120      	movs	r1, #32
 800faa6:	4809      	ldr	r0, [pc, #36]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800faa8:	f7ff ff32 	bl	800f910 <LL_C1_IPCC_IsActiveFlag_CHx>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d109      	bne.n	800fac6 <HW_IPCC_Tx_Handler+0xae>
 800fab2:	4b06      	ldr	r3, [pc, #24]	; (800facc <HW_IPCC_Tx_Handler+0xb4>)
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	43db      	mvns	r3, r3
 800fab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d002      	beq.n	800fac6 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800fac0:	f000 f83c 	bl	800fb3c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800fac4:	bf00      	nop
 800fac6:	bf00      	nop
}
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	58000c00 	.word	0x58000c00

0800fad0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800fad4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800fad8:	f7ff fe79 	bl	800f7ce <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800fadc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fae0:	f7ff fe36 	bl	800f750 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800fae4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fae8:	f7ff fe46 	bl	800f778 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800faec:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800faee:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800faf0:	f7ff fe1e 	bl	800f730 <LL_PWR_EnableBootC2>

  return;
 800faf4:	bf00      	nop
}
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800fafc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800fb00:	f7ff fe4c 	bl	800f79c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800fb04:	4806      	ldr	r0, [pc, #24]	; (800fb20 <HW_IPCC_Init+0x28>)
 800fb06:	f7ff fe8e 	bl	800f826 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800fb0a:	4805      	ldr	r0, [pc, #20]	; (800fb20 <HW_IPCC_Init+0x28>)
 800fb0c:	f7ff fe7b 	bl	800f806 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800fb10:	202c      	movs	r0, #44	; 0x2c
 800fb12:	f7f2 fb58 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800fb16:	202d      	movs	r0, #45	; 0x2d
 800fb18:	f7f2 fb55 	bl	80021c6 <HAL_NVIC_EnableIRQ>

  return;
 800fb1c:	bf00      	nop
}
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	58000c00 	.word	0x58000c00

0800fb24 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800fb28:	f7f9 fc82 	bl	8009430 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800fb2c:	2101      	movs	r1, #1
 800fb2e:	4802      	ldr	r0, [pc, #8]	; (800fb38 <HW_IPCC_BLE_EvtHandler+0x14>)
 800fb30:	f7ff fed1 	bl	800f8d6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fb34:	bf00      	nop
}
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	58000c00 	.word	0x58000c00

0800fb3c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800fb40:	2120      	movs	r1, #32
 800fb42:	4803      	ldr	r0, [pc, #12]	; (800fb50 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800fb44:	f7ff fe92 	bl	800f86c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800fb48:	f7f9 fca2 	bl	8009490 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800fb4c:	bf00      	nop
}
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	58000c00 	.word	0x58000c00

0800fb54 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fb58:	2102      	movs	r1, #2
 800fb5a:	4802      	ldr	r0, [pc, #8]	; (800fb64 <HW_IPCC_SYS_Init+0x10>)
 800fb5c:	f7ff fe98 	bl	800f890 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fb60:	bf00      	nop
}
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	58000c00 	.word	0x58000c00

0800fb68 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb6c:	2102      	movs	r1, #2
 800fb6e:	4804      	ldr	r0, [pc, #16]	; (800fb80 <HW_IPCC_SYS_SendCmd+0x18>)
 800fb70:	f7ff febf 	bl	800f8f2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb74:	2102      	movs	r1, #2
 800fb76:	4802      	ldr	r0, [pc, #8]	; (800fb80 <HW_IPCC_SYS_SendCmd+0x18>)
 800fb78:	f7ff fe65 	bl	800f846 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800fb7c:	bf00      	nop
}
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	58000c00 	.word	0x58000c00

0800fb84 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb88:	2102      	movs	r1, #2
 800fb8a:	4803      	ldr	r0, [pc, #12]	; (800fb98 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800fb8c:	f7ff fe6e 	bl	800f86c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800fb90:	f7f9 fcce 	bl	8009530 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800fb94:	bf00      	nop
}
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	58000c00 	.word	0x58000c00

0800fb9c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800fba0:	f7f9 fcdc 	bl	800955c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fba4:	2102      	movs	r1, #2
 800fba6:	4802      	ldr	r0, [pc, #8]	; (800fbb0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800fba8:	f7ff fe95 	bl	800f8d6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fbac:	bf00      	nop
}
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	58000c00 	.word	0x58000c00

0800fbb4 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800fbb8:	2104      	movs	r1, #4
 800fbba:	4804      	ldr	r0, [pc, #16]	; (800fbcc <HW_IPCC_THREAD_Init+0x18>)
 800fbbc:	f7ff fe68 	bl	800f890 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800fbc0:	2110      	movs	r1, #16
 800fbc2:	4802      	ldr	r0, [pc, #8]	; (800fbcc <HW_IPCC_THREAD_Init+0x18>)
 800fbc4:	f7ff fe64 	bl	800f890 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fbc8:	bf00      	nop
}
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	58000c00 	.word	0x58000c00

0800fbd0 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800fbd4:	2104      	movs	r1, #4
 800fbd6:	4804      	ldr	r0, [pc, #16]	; (800fbe8 <HW_IPCC_OT_SendCmd+0x18>)
 800fbd8:	f7ff fe8b 	bl	800f8f2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800fbdc:	2104      	movs	r1, #4
 800fbde:	4802      	ldr	r0, [pc, #8]	; (800fbe8 <HW_IPCC_OT_SendCmd+0x18>)
 800fbe0:	f7ff fe31 	bl	800f846 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800fbe4:	bf00      	nop
}
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	58000c00 	.word	0x58000c00

0800fbec <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 800fbf0:	2110      	movs	r1, #16
 800fbf2:	4802      	ldr	r0, [pc, #8]	; (800fbfc <HW_IPCC_CLI_SendCmd+0x10>)
 800fbf4:	f7ff fe7d 	bl	800f8f2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fbf8:	bf00      	nop
}
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	58000c00 	.word	0x58000c00

0800fc00 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800fc04:	2104      	movs	r1, #4
 800fc06:	4804      	ldr	r0, [pc, #16]	; (800fc18 <HW_IPCC_THREAD_SendAck+0x18>)
 800fc08:	f7ff fe65 	bl	800f8d6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800fc0c:	2104      	movs	r1, #4
 800fc0e:	4802      	ldr	r0, [pc, #8]	; (800fc18 <HW_IPCC_THREAD_SendAck+0x18>)
 800fc10:	f7ff fe3e 	bl	800f890 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fc14:	bf00      	nop
}
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	58000c00 	.word	0x58000c00

0800fc1c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800fc20:	2110      	movs	r1, #16
 800fc22:	4804      	ldr	r0, [pc, #16]	; (800fc34 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800fc24:	f7ff fe57 	bl	800f8d6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800fc28:	2110      	movs	r1, #16
 800fc2a:	4802      	ldr	r0, [pc, #8]	; (800fc34 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800fc2c:	f7ff fe30 	bl	800f890 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fc30:	bf00      	nop
}
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	58000c00 	.word	0x58000c00

0800fc38 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800fc3c:	2104      	movs	r1, #4
 800fc3e:	4803      	ldr	r0, [pc, #12]	; (800fc4c <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800fc40:	f7ff fe14 	bl	800f86c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 800fc44:	f7f9 fd00 	bl	8009648 <HW_IPCC_OT_CmdEvtNot>

  return;
 800fc48:	bf00      	nop
}
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	58000c00 	.word	0x58000c00

0800fc50 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800fc54:	2104      	movs	r1, #4
 800fc56:	4803      	ldr	r0, [pc, #12]	; (800fc64 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800fc58:	f7ff fe2c 	bl	800f8b4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 800fc5c:	f7f9 fd00 	bl	8009660 <HW_IPCC_THREAD_EvtNot>

  return;
 800fc60:	bf00      	nop
}
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	58000c00 	.word	0x58000c00

0800fc68 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800fc6c:	2110      	movs	r1, #16
 800fc6e:	4803      	ldr	r0, [pc, #12]	; (800fc7c <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800fc70:	f7ff fe20 	bl	800f8b4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 800fc74:	f7f9 fd00 	bl	8009678 <HW_IPCC_THREAD_CliEvtNot>

  return;
 800fc78:	bf00      	nop
}
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	58000c00 	.word	0x58000c00

0800fc80 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800fc88:	2108      	movs	r1, #8
 800fc8a:	480c      	ldr	r0, [pc, #48]	; (800fcbc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fc8c:	f7ff fe40 	bl	800f910 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fc90:	4603      	mov	r3, r0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d007      	beq.n	800fca6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800fc96:	4a0a      	ldr	r2, [pc, #40]	; (800fcc0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fc9c:	2108      	movs	r1, #8
 800fc9e:	4807      	ldr	r0, [pc, #28]	; (800fcbc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fca0:	f7ff fdd1 	bl	800f846 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800fca4:	e006      	b.n	800fcb4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fcaa:	2108      	movs	r1, #8
 800fcac:	4803      	ldr	r0, [pc, #12]	; (800fcbc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fcae:	f7ff fe20 	bl	800f8f2 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800fcb2:	bf00      	nop
}
 800fcb4:	3708      	adds	r7, #8
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	58000c00 	.word	0x58000c00
 800fcc0:	20004b4c 	.word	0x20004b4c

0800fcc4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fcc8:	2108      	movs	r1, #8
 800fcca:	4806      	ldr	r0, [pc, #24]	; (800fce4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fccc:	f7ff fdce 	bl	800f86c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800fcd0:	4b05      	ldr	r3, [pc, #20]	; (800fce8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fcd6:	2108      	movs	r1, #8
 800fcd8:	4802      	ldr	r0, [pc, #8]	; (800fce4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fcda:	f7ff fe0a 	bl	800f8f2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fcde:	bf00      	nop
}
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	58000c00 	.word	0x58000c00
 800fce8:	20004b4c 	.word	0x20004b4c

0800fcec <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fcf0:	2108      	movs	r1, #8
 800fcf2:	4802      	ldr	r0, [pc, #8]	; (800fcfc <HW_IPCC_TRACES_Init+0x10>)
 800fcf4:	f7ff fdcc 	bl	800f890 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fcf8:	bf00      	nop
}
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	58000c00 	.word	0x58000c00

0800fd00 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800fd04:	f7f9 fd4a 	bl	800979c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fd08:	2108      	movs	r1, #8
 800fd0a:	4802      	ldr	r0, [pc, #8]	; (800fd14 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800fd0c:	f7ff fde3 	bl	800f8d6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fd10:	bf00      	nop
}
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	58000c00 	.word	0x58000c00

0800fd18 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	4912      	ldr	r1, [pc, #72]	; (800fd68 <MX_USB_Device_Init+0x50>)
 800fd20:	4812      	ldr	r0, [pc, #72]	; (800fd6c <MX_USB_Device_Init+0x54>)
 800fd22:	f7f8 f825 	bl	8007d70 <USBD_Init>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d001      	beq.n	800fd30 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fd2c:	f7f1 fc18 	bl	8001560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fd30:	490f      	ldr	r1, [pc, #60]	; (800fd70 <MX_USB_Device_Init+0x58>)
 800fd32:	480e      	ldr	r0, [pc, #56]	; (800fd6c <MX_USB_Device_Init+0x54>)
 800fd34:	f7f8 f84c 	bl	8007dd0 <USBD_RegisterClass>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d001      	beq.n	800fd42 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fd3e:	f7f1 fc0f 	bl	8001560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fd42:	490c      	ldr	r1, [pc, #48]	; (800fd74 <MX_USB_Device_Init+0x5c>)
 800fd44:	4809      	ldr	r0, [pc, #36]	; (800fd6c <MX_USB_Device_Init+0x54>)
 800fd46:	f7f7 ff6d 	bl	8007c24 <USBD_CDC_RegisterInterface>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d001      	beq.n	800fd54 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fd50:	f7f1 fc06 	bl	8001560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fd54:	4805      	ldr	r0, [pc, #20]	; (800fd6c <MX_USB_Device_Init+0x54>)
 800fd56:	f7f8 f862 	bl	8007e1e <USBD_Start>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d001      	beq.n	800fd64 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fd60:	f7f1 fbfe 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fd64:	bf00      	nop
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	2000017c 	.word	0x2000017c
 800fd6c:	20004ee4 	.word	0x20004ee4
 800fd70:	20000040 	.word	0x20000040
 800fd74:	20000168 	.word	0x20000168

0800fd78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	4905      	ldr	r1, [pc, #20]	; (800fd94 <CDC_Init_FS+0x1c>)
 800fd80:	4805      	ldr	r0, [pc, #20]	; (800fd98 <CDC_Init_FS+0x20>)
 800fd82:	f7f7 ff64 	bl	8007c4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fd86:	4905      	ldr	r1, [pc, #20]	; (800fd9c <CDC_Init_FS+0x24>)
 800fd88:	4803      	ldr	r0, [pc, #12]	; (800fd98 <CDC_Init_FS+0x20>)
 800fd8a:	f7f7 ff7e 	bl	8007c8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fd8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	200059b4 	.word	0x200059b4
 800fd98:	20004ee4 	.word	0x20004ee4
 800fd9c:	200051b4 	.word	0x200051b4

0800fda0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fda0:	b480      	push	{r7}
 800fda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fda4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b083      	sub	sp, #12
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	6039      	str	r1, [r7, #0]
 800fdba:	71fb      	strb	r3, [r7, #7]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fdc0:	79fb      	ldrb	r3, [r7, #7]
 800fdc2:	2b23      	cmp	r3, #35	; 0x23
 800fdc4:	d84a      	bhi.n	800fe5c <CDC_Control_FS+0xac>
 800fdc6:	a201      	add	r2, pc, #4	; (adr r2, 800fdcc <CDC_Control_FS+0x1c>)
 800fdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdcc:	0800fe5d 	.word	0x0800fe5d
 800fdd0:	0800fe5d 	.word	0x0800fe5d
 800fdd4:	0800fe5d 	.word	0x0800fe5d
 800fdd8:	0800fe5d 	.word	0x0800fe5d
 800fddc:	0800fe5d 	.word	0x0800fe5d
 800fde0:	0800fe5d 	.word	0x0800fe5d
 800fde4:	0800fe5d 	.word	0x0800fe5d
 800fde8:	0800fe5d 	.word	0x0800fe5d
 800fdec:	0800fe5d 	.word	0x0800fe5d
 800fdf0:	0800fe5d 	.word	0x0800fe5d
 800fdf4:	0800fe5d 	.word	0x0800fe5d
 800fdf8:	0800fe5d 	.word	0x0800fe5d
 800fdfc:	0800fe5d 	.word	0x0800fe5d
 800fe00:	0800fe5d 	.word	0x0800fe5d
 800fe04:	0800fe5d 	.word	0x0800fe5d
 800fe08:	0800fe5d 	.word	0x0800fe5d
 800fe0c:	0800fe5d 	.word	0x0800fe5d
 800fe10:	0800fe5d 	.word	0x0800fe5d
 800fe14:	0800fe5d 	.word	0x0800fe5d
 800fe18:	0800fe5d 	.word	0x0800fe5d
 800fe1c:	0800fe5d 	.word	0x0800fe5d
 800fe20:	0800fe5d 	.word	0x0800fe5d
 800fe24:	0800fe5d 	.word	0x0800fe5d
 800fe28:	0800fe5d 	.word	0x0800fe5d
 800fe2c:	0800fe5d 	.word	0x0800fe5d
 800fe30:	0800fe5d 	.word	0x0800fe5d
 800fe34:	0800fe5d 	.word	0x0800fe5d
 800fe38:	0800fe5d 	.word	0x0800fe5d
 800fe3c:	0800fe5d 	.word	0x0800fe5d
 800fe40:	0800fe5d 	.word	0x0800fe5d
 800fe44:	0800fe5d 	.word	0x0800fe5d
 800fe48:	0800fe5d 	.word	0x0800fe5d
 800fe4c:	0800fe5d 	.word	0x0800fe5d
 800fe50:	0800fe5d 	.word	0x0800fe5d
 800fe54:	0800fe5d 	.word	0x0800fe5d
 800fe58:	0800fe5d 	.word	0x0800fe5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fe5c:	bf00      	nop
  }

  return (USBD_OK);
 800fe5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	370c      	adds	r7, #12
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr

0800fe6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe76:	6879      	ldr	r1, [r7, #4]
 800fe78:	4805      	ldr	r0, [pc, #20]	; (800fe90 <CDC_Receive_FS+0x24>)
 800fe7a:	f7f7 ff06 	bl	8007c8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fe7e:	4804      	ldr	r0, [pc, #16]	; (800fe90 <CDC_Receive_FS+0x24>)
 800fe80:	f7f7 ff4c 	bl	8007d1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fe84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	20004ee4 	.word	0x20004ee4

0800fe94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fea0:	2300      	movs	r3, #0
 800fea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fea4:	4b0d      	ldr	r3, [pc, #52]	; (800fedc <CDC_Transmit_FS+0x48>)
 800fea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800feaa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d001      	beq.n	800feba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800feb6:	2301      	movs	r3, #1
 800feb8:	e00b      	b.n	800fed2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800feba:	887b      	ldrh	r3, [r7, #2]
 800febc:	461a      	mov	r2, r3
 800febe:	6879      	ldr	r1, [r7, #4]
 800fec0:	4806      	ldr	r0, [pc, #24]	; (800fedc <CDC_Transmit_FS+0x48>)
 800fec2:	f7f7 fec4 	bl	8007c4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fec6:	4805      	ldr	r0, [pc, #20]	; (800fedc <CDC_Transmit_FS+0x48>)
 800fec8:	f7f7 fef8 	bl	8007cbc <USBD_CDC_TransmitPacket>
 800fecc:	4603      	mov	r3, r0
 800fece:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3710      	adds	r7, #16
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	20004ee4 	.word	0x20004ee4

0800fee0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b087      	sub	sp, #28
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	4613      	mov	r3, r2
 800feec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800feee:	2300      	movs	r3, #0
 800fef0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	371c      	adds	r7, #28
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr
	...

0800ff04 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	6039      	str	r1, [r7, #0]
 800ff0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	2212      	movs	r2, #18
 800ff14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ff16:	4b03      	ldr	r3, [pc, #12]	; (800ff24 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	370c      	adds	r7, #12
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	2000019c 	.word	0x2000019c

0800ff28 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	4603      	mov	r3, r0
 800ff30:	6039      	str	r1, [r7, #0]
 800ff32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2204      	movs	r2, #4
 800ff38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff3a:	4b03      	ldr	r3, [pc, #12]	; (800ff48 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	200001b0 	.word	0x200001b0

0800ff4c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	4603      	mov	r3, r0
 800ff54:	6039      	str	r1, [r7, #0]
 800ff56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff58:	79fb      	ldrb	r3, [r7, #7]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d105      	bne.n	800ff6a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	4907      	ldr	r1, [pc, #28]	; (800ff80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ff62:	4808      	ldr	r0, [pc, #32]	; (800ff84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ff64:	f7f8 ff36 	bl	8008dd4 <USBD_GetString>
 800ff68:	e004      	b.n	800ff74 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	4904      	ldr	r1, [pc, #16]	; (800ff80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ff6e:	4805      	ldr	r0, [pc, #20]	; (800ff84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ff70:	f7f8 ff30 	bl	8008dd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff74:	4b02      	ldr	r3, [pc, #8]	; (800ff80 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	200061b4 	.word	0x200061b4
 800ff84:	08010bf8 	.word	0x08010bf8

0800ff88 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	6039      	str	r1, [r7, #0]
 800ff92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	4904      	ldr	r1, [pc, #16]	; (800ffa8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ff98:	4804      	ldr	r0, [pc, #16]	; (800ffac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ff9a:	f7f8 ff1b 	bl	8008dd4 <USBD_GetString>
  return USBD_StrDesc;
 800ff9e:	4b02      	ldr	r3, [pc, #8]	; (800ffa8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	200061b4 	.word	0x200061b4
 800ffac:	08010c10 	.word	0x08010c10

0800ffb0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	6039      	str	r1, [r7, #0]
 800ffba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	221a      	movs	r2, #26
 800ffc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ffc2:	f000 f843 	bl	801004c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ffc6:	4b02      	ldr	r3, [pc, #8]	; (800ffd0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	200001b4 	.word	0x200001b4

0800ffd4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	4603      	mov	r3, r0
 800ffdc:	6039      	str	r1, [r7, #0]
 800ffde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ffe0:	79fb      	ldrb	r3, [r7, #7]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d105      	bne.n	800fff2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ffe6:	683a      	ldr	r2, [r7, #0]
 800ffe8:	4907      	ldr	r1, [pc, #28]	; (8010008 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ffea:	4808      	ldr	r0, [pc, #32]	; (801000c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ffec:	f7f8 fef2 	bl	8008dd4 <USBD_GetString>
 800fff0:	e004      	b.n	800fffc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fff2:	683a      	ldr	r2, [r7, #0]
 800fff4:	4904      	ldr	r1, [pc, #16]	; (8010008 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800fff6:	4805      	ldr	r0, [pc, #20]	; (801000c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800fff8:	f7f8 feec 	bl	8008dd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fffc:	4b02      	ldr	r3, [pc, #8]	; (8010008 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	200061b4 	.word	0x200061b4
 801000c:	08010c24 	.word	0x08010c24

08010010 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	4603      	mov	r3, r0
 8010018:	6039      	str	r1, [r7, #0]
 801001a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801001c:	79fb      	ldrb	r3, [r7, #7]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d105      	bne.n	801002e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010022:	683a      	ldr	r2, [r7, #0]
 8010024:	4907      	ldr	r1, [pc, #28]	; (8010044 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010026:	4808      	ldr	r0, [pc, #32]	; (8010048 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010028:	f7f8 fed4 	bl	8008dd4 <USBD_GetString>
 801002c:	e004      	b.n	8010038 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	4904      	ldr	r1, [pc, #16]	; (8010044 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010032:	4805      	ldr	r0, [pc, #20]	; (8010048 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010034:	f7f8 fece 	bl	8008dd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010038:	4b02      	ldr	r3, [pc, #8]	; (8010044 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801003a:	4618      	mov	r0, r3
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	200061b4 	.word	0x200061b4
 8010048:	08010c30 	.word	0x08010c30

0801004c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010052:	4b0f      	ldr	r3, [pc, #60]	; (8010090 <Get_SerialNum+0x44>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010058:	4b0e      	ldr	r3, [pc, #56]	; (8010094 <Get_SerialNum+0x48>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801005e:	4b0e      	ldr	r3, [pc, #56]	; (8010098 <Get_SerialNum+0x4c>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4413      	add	r3, r2
 801006a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d009      	beq.n	8010086 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010072:	2208      	movs	r2, #8
 8010074:	4909      	ldr	r1, [pc, #36]	; (801009c <Get_SerialNum+0x50>)
 8010076:	68f8      	ldr	r0, [r7, #12]
 8010078:	f000 f814 	bl	80100a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801007c:	2204      	movs	r2, #4
 801007e:	4908      	ldr	r1, [pc, #32]	; (80100a0 <Get_SerialNum+0x54>)
 8010080:	68b8      	ldr	r0, [r7, #8]
 8010082:	f000 f80f 	bl	80100a4 <IntToUnicode>
  }
}
 8010086:	bf00      	nop
 8010088:	3710      	adds	r7, #16
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	1fff7590 	.word	0x1fff7590
 8010094:	1fff7594 	.word	0x1fff7594
 8010098:	1fff7598 	.word	0x1fff7598
 801009c:	200001b6 	.word	0x200001b6
 80100a0:	200001c6 	.word	0x200001c6

080100a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b087      	sub	sp, #28
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	4613      	mov	r3, r2
 80100b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80100b2:	2300      	movs	r3, #0
 80100b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80100b6:	2300      	movs	r3, #0
 80100b8:	75fb      	strb	r3, [r7, #23]
 80100ba:	e027      	b.n	801010c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	0f1b      	lsrs	r3, r3, #28
 80100c0:	2b09      	cmp	r3, #9
 80100c2:	d80b      	bhi.n	80100dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	0f1b      	lsrs	r3, r3, #28
 80100c8:	b2da      	uxtb	r2, r3
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
 80100cc:	005b      	lsls	r3, r3, #1
 80100ce:	4619      	mov	r1, r3
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	440b      	add	r3, r1
 80100d4:	3230      	adds	r2, #48	; 0x30
 80100d6:	b2d2      	uxtb	r2, r2
 80100d8:	701a      	strb	r2, [r3, #0]
 80100da:	e00a      	b.n	80100f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	0f1b      	lsrs	r3, r3, #28
 80100e0:	b2da      	uxtb	r2, r3
 80100e2:	7dfb      	ldrb	r3, [r7, #23]
 80100e4:	005b      	lsls	r3, r3, #1
 80100e6:	4619      	mov	r1, r3
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	440b      	add	r3, r1
 80100ec:	3237      	adds	r2, #55	; 0x37
 80100ee:	b2d2      	uxtb	r2, r2
 80100f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	011b      	lsls	r3, r3, #4
 80100f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80100f8:	7dfb      	ldrb	r3, [r7, #23]
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	3301      	adds	r3, #1
 80100fe:	68ba      	ldr	r2, [r7, #8]
 8010100:	4413      	add	r3, r2
 8010102:	2200      	movs	r2, #0
 8010104:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010106:	7dfb      	ldrb	r3, [r7, #23]
 8010108:	3301      	adds	r3, #1
 801010a:	75fb      	strb	r3, [r7, #23]
 801010c:	7dfa      	ldrb	r2, [r7, #23]
 801010e:	79fb      	ldrb	r3, [r7, #7]
 8010110:	429a      	cmp	r2, r3
 8010112:	d3d3      	bcc.n	80100bc <IntToUnicode+0x18>
  }
}
 8010114:	bf00      	nop
 8010116:	371c      	adds	r7, #28
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <LL_AHB2_GRP1_EnableClock>:
{
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801012c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801012e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4313      	orrs	r3, r2
 8010136:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801013c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4013      	ands	r3, r2
 8010142:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010144:	68fb      	ldr	r3, [r7, #12]
}
 8010146:	bf00      	nop
 8010148:	3714      	adds	r7, #20
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr

08010152 <LL_APB1_GRP1_EnableClock>:
{
 8010152:	b480      	push	{r7}
 8010154:	b085      	sub	sp, #20
 8010156:	af00      	add	r7, sp, #0
 8010158:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801015a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801015e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4313      	orrs	r3, r2
 8010168:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801016a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801016e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	4013      	ands	r3, r2
 8010174:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010176:	68fb      	ldr	r3, [r7, #12]
}
 8010178:	bf00      	nop
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b088      	sub	sp, #32
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801018c:	f107 030c 	add.w	r3, r7, #12
 8010190:	2200      	movs	r2, #0
 8010192:	601a      	str	r2, [r3, #0]
 8010194:	605a      	str	r2, [r3, #4]
 8010196:	609a      	str	r2, [r3, #8]
 8010198:	60da      	str	r2, [r3, #12]
 801019a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4a13      	ldr	r2, [pc, #76]	; (80101f0 <HAL_PCD_MspInit+0x6c>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d120      	bne.n	80101e8 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80101a6:	2001      	movs	r0, #1
 80101a8:	f7ff ffba 	bl	8010120 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80101ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80101b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101b2:	2302      	movs	r3, #2
 80101b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101ba:	2300      	movs	r3, #0
 80101bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80101be:	230a      	movs	r3, #10
 80101c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101c2:	f107 030c 	add.w	r3, r7, #12
 80101c6:	4619      	mov	r1, r3
 80101c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80101cc:	f7f2 f838 	bl	8002240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80101d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80101d4:	f7ff ffbd 	bl	8010152 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80101d8:	2200      	movs	r2, #0
 80101da:	2105      	movs	r1, #5
 80101dc:	2014      	movs	r0, #20
 80101de:	f7f1 ffd8 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80101e2:	2014      	movs	r0, #20
 80101e4:	f7f1 ffef 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80101e8:	bf00      	nop
 80101ea:	3720      	adds	r7, #32
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	40006800 	.word	0x40006800

080101f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8010208:	4619      	mov	r1, r3
 801020a:	4610      	mov	r0, r2
 801020c:	f7f7 fe52 	bl	8007eb4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010210:	bf00      	nop
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	460b      	mov	r3, r1
 8010222:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801022a:	78fb      	ldrb	r3, [r7, #3]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	015b      	lsls	r3, r3, #5
 8010230:	4413      	add	r3, r2
 8010232:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	78fb      	ldrb	r3, [r7, #3]
 801023a:	4619      	mov	r1, r3
 801023c:	f7f7 fe8d 	bl	8007f5a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010240:	bf00      	nop
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	460b      	mov	r3, r1
 8010252:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801025a:	78fb      	ldrb	r3, [r7, #3]
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	015b      	lsls	r3, r3, #5
 8010260:	4413      	add	r3, r2
 8010262:	333c      	adds	r3, #60	; 0x3c
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	78fb      	ldrb	r3, [r7, #3]
 8010268:	4619      	mov	r1, r3
 801026a:	f7f7 fed9 	bl	8008020 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801026e:	bf00      	nop
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}

08010276 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b082      	sub	sp, #8
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010284:	4618      	mov	r0, r3
 8010286:	f7f7 ffed 	bl	8008264 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801028a:	bf00      	nop
 801028c:	3708      	adds	r7, #8
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}

08010292 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010292:	b580      	push	{r7, lr}
 8010294:	b084      	sub	sp, #16
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801029a:	2301      	movs	r3, #1
 801029c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	689b      	ldr	r3, [r3, #8]
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	d001      	beq.n	80102aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80102a6:	f7f1 f95b 	bl	8001560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80102b0:	7bfa      	ldrb	r2, [r7, #15]
 80102b2:	4611      	mov	r1, r2
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7f7 ff97 	bl	80081e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7f7 ff43 	bl	800814c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80102c6:	bf00      	nop
 80102c8:	3710      	adds	r7, #16
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
	...

080102d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80102de:	4618      	mov	r0, r3
 80102e0:	f7f7 ff92 	bl	8008208 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	699b      	ldr	r3, [r3, #24]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d005      	beq.n	80102f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102ec:	4b04      	ldr	r3, [pc, #16]	; (8010300 <HAL_PCD_SuspendCallback+0x30>)
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	4a03      	ldr	r2, [pc, #12]	; (8010300 <HAL_PCD_SuspendCallback+0x30>)
 80102f2:	f043 0306 	orr.w	r3, r3, #6
 80102f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80102f8:	bf00      	nop
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	e000ed00 	.word	0xe000ed00

08010304 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	699b      	ldr	r3, [r3, #24]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d007      	beq.n	8010324 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010314:	4b08      	ldr	r3, [pc, #32]	; (8010338 <HAL_PCD_ResumeCallback+0x34>)
 8010316:	691b      	ldr	r3, [r3, #16]
 8010318:	4a07      	ldr	r2, [pc, #28]	; (8010338 <HAL_PCD_ResumeCallback+0x34>)
 801031a:	f023 0306 	bic.w	r3, r3, #6
 801031e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010320:	f000 f9f4 	bl	801070c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801032a:	4618      	mov	r0, r3
 801032c:	f7f7 ff82 	bl	8008234 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010330:	bf00      	nop
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}
 8010338:	e000ed00 	.word	0xe000ed00

0801033c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010344:	4a2c      	ldr	r2, [pc, #176]	; (80103f8 <USBD_LL_Init+0xbc>)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a2a      	ldr	r2, [pc, #168]	; (80103f8 <USBD_LL_Init+0xbc>)
 8010350:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010354:	f7f3 fd82 	bl	8003e5c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8010358:	4b27      	ldr	r3, [pc, #156]	; (80103f8 <USBD_LL_Init+0xbc>)
 801035a:	4a28      	ldr	r2, [pc, #160]	; (80103fc <USBD_LL_Init+0xc0>)
 801035c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801035e:	4b26      	ldr	r3, [pc, #152]	; (80103f8 <USBD_LL_Init+0xbc>)
 8010360:	2208      	movs	r2, #8
 8010362:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010364:	4b24      	ldr	r3, [pc, #144]	; (80103f8 <USBD_LL_Init+0xbc>)
 8010366:	2202      	movs	r2, #2
 8010368:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801036a:	4b23      	ldr	r3, [pc, #140]	; (80103f8 <USBD_LL_Init+0xbc>)
 801036c:	2202      	movs	r2, #2
 801036e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010370:	4b21      	ldr	r3, [pc, #132]	; (80103f8 <USBD_LL_Init+0xbc>)
 8010372:	2200      	movs	r2, #0
 8010374:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010376:	4b20      	ldr	r3, [pc, #128]	; (80103f8 <USBD_LL_Init+0xbc>)
 8010378:	2200      	movs	r2, #0
 801037a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801037c:	4b1e      	ldr	r3, [pc, #120]	; (80103f8 <USBD_LL_Init+0xbc>)
 801037e:	2200      	movs	r2, #0
 8010380:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010382:	4b1d      	ldr	r3, [pc, #116]	; (80103f8 <USBD_LL_Init+0xbc>)
 8010384:	2200      	movs	r2, #0
 8010386:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010388:	481b      	ldr	r0, [pc, #108]	; (80103f8 <USBD_LL_Init+0xbc>)
 801038a:	f7f2 fe10 	bl	8002fae <HAL_PCD_Init>
 801038e:	4603      	mov	r3, r0
 8010390:	2b00      	cmp	r3, #0
 8010392:	d001      	beq.n	8010398 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010394:	f7f1 f8e4 	bl	8001560 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801039e:	2318      	movs	r3, #24
 80103a0:	2200      	movs	r2, #0
 80103a2:	2100      	movs	r1, #0
 80103a4:	f7f3 fcd5 	bl	8003d52 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80103ae:	2358      	movs	r3, #88	; 0x58
 80103b0:	2200      	movs	r2, #0
 80103b2:	2180      	movs	r1, #128	; 0x80
 80103b4:	f7f3 fccd 	bl	8003d52 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80103be:	23c0      	movs	r3, #192	; 0xc0
 80103c0:	2200      	movs	r2, #0
 80103c2:	2181      	movs	r1, #129	; 0x81
 80103c4:	f7f3 fcc5 	bl	8003d52 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80103ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 80103d2:	2200      	movs	r2, #0
 80103d4:	2101      	movs	r1, #1
 80103d6:	f7f3 fcbc 	bl	8003d52 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80103e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103e4:	2200      	movs	r2, #0
 80103e6:	2182      	movs	r1, #130	; 0x82
 80103e8:	f7f3 fcb3 	bl	8003d52 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80103ec:	2300      	movs	r3, #0
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3708      	adds	r7, #8
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	200063b4 	.word	0x200063b4
 80103fc:	40006800 	.word	0x40006800

08010400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010408:	2300      	movs	r3, #0
 801040a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801040c:	2300      	movs	r3, #0
 801040e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010416:	4618      	mov	r0, r3
 8010418:	f7f2 fe84 	bl	8003124 <HAL_PCD_Start>
 801041c:	4603      	mov	r3, r0
 801041e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010420:	7bfb      	ldrb	r3, [r7, #15]
 8010422:	4618      	mov	r0, r3
 8010424:	f000 f978 	bl	8010718 <USBD_Get_USB_Status>
 8010428:	4603      	mov	r3, r0
 801042a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801042c:	7bbb      	ldrb	r3, [r7, #14]
}
 801042e:	4618      	mov	r0, r3
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}

08010436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010436:	b580      	push	{r7, lr}
 8010438:	b084      	sub	sp, #16
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
 801043e:	4608      	mov	r0, r1
 8010440:	4611      	mov	r1, r2
 8010442:	461a      	mov	r2, r3
 8010444:	4603      	mov	r3, r0
 8010446:	70fb      	strb	r3, [r7, #3]
 8010448:	460b      	mov	r3, r1
 801044a:	70bb      	strb	r3, [r7, #2]
 801044c:	4613      	mov	r3, r2
 801044e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010450:	2300      	movs	r3, #0
 8010452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010454:	2300      	movs	r3, #0
 8010456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801045e:	78bb      	ldrb	r3, [r7, #2]
 8010460:	883a      	ldrh	r2, [r7, #0]
 8010462:	78f9      	ldrb	r1, [r7, #3]
 8010464:	f7f2 fff3 	bl	800344e <HAL_PCD_EP_Open>
 8010468:	4603      	mov	r3, r0
 801046a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801046c:	7bfb      	ldrb	r3, [r7, #15]
 801046e:	4618      	mov	r0, r3
 8010470:	f000 f952 	bl	8010718 <USBD_Get_USB_Status>
 8010474:	4603      	mov	r3, r0
 8010476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010478:	7bbb      	ldrb	r3, [r7, #14]
}
 801047a:	4618      	mov	r0, r3
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010482:	b580      	push	{r7, lr}
 8010484:	b084      	sub	sp, #16
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
 801048a:	460b      	mov	r3, r1
 801048c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801048e:	2300      	movs	r3, #0
 8010490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010492:	2300      	movs	r3, #0
 8010494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801049c:	78fa      	ldrb	r2, [r7, #3]
 801049e:	4611      	mov	r1, r2
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7f3 f834 	bl	800350e <HAL_PCD_EP_Close>
 80104a6:	4603      	mov	r3, r0
 80104a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104aa:	7bfb      	ldrb	r3, [r7, #15]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f000 f933 	bl	8010718 <USBD_Get_USB_Status>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3710      	adds	r7, #16
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	460b      	mov	r3, r1
 80104ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104cc:	2300      	movs	r3, #0
 80104ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104d0:	2300      	movs	r3, #0
 80104d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104da:	78fa      	ldrb	r2, [r7, #3]
 80104dc:	4611      	mov	r1, r2
 80104de:	4618      	mov	r0, r3
 80104e0:	f7f3 f8df 	bl	80036a2 <HAL_PCD_EP_SetStall>
 80104e4:	4603      	mov	r3, r0
 80104e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104e8:	7bfb      	ldrb	r3, [r7, #15]
 80104ea:	4618      	mov	r0, r3
 80104ec:	f000 f914 	bl	8010718 <USBD_Get_USB_Status>
 80104f0:	4603      	mov	r3, r0
 80104f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}

080104fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104fe:	b580      	push	{r7, lr}
 8010500:	b084      	sub	sp, #16
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
 8010506:	460b      	mov	r3, r1
 8010508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801050a:	2300      	movs	r3, #0
 801050c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801050e:	2300      	movs	r3, #0
 8010510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010518:	78fa      	ldrb	r2, [r7, #3]
 801051a:	4611      	mov	r1, r2
 801051c:	4618      	mov	r0, r3
 801051e:	f7f3 f91a 	bl	8003756 <HAL_PCD_EP_ClrStall>
 8010522:	4603      	mov	r3, r0
 8010524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010526:	7bfb      	ldrb	r3, [r7, #15]
 8010528:	4618      	mov	r0, r3
 801052a:	f000 f8f5 	bl	8010718 <USBD_Get_USB_Status>
 801052e:	4603      	mov	r3, r0
 8010530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010532:	7bbb      	ldrb	r3, [r7, #14]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801053c:	b480      	push	{r7}
 801053e:	b085      	sub	sp, #20
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	460b      	mov	r3, r1
 8010546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801054e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010554:	2b00      	cmp	r3, #0
 8010556:	da08      	bge.n	801056a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010558:	78fb      	ldrb	r3, [r7, #3]
 801055a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	015b      	lsls	r3, r3, #5
 8010562:	4413      	add	r3, r2
 8010564:	332a      	adds	r3, #42	; 0x2a
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	e008      	b.n	801057c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801056a:	78fb      	ldrb	r3, [r7, #3]
 801056c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	015b      	lsls	r3, r3, #5
 8010574:	4413      	add	r3, r2
 8010576:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 801057a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801057c:	4618      	mov	r0, r3
 801057e:	3714      	adds	r7, #20
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	460b      	mov	r3, r1
 8010592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010594:	2300      	movs	r3, #0
 8010596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010598:	2300      	movs	r3, #0
 801059a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105a2:	78fa      	ldrb	r2, [r7, #3]
 80105a4:	4611      	mov	r1, r2
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7f2 ff2c 	bl	8003404 <HAL_PCD_SetAddress>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
 80105b2:	4618      	mov	r0, r3
 80105b4:	f000 f8b0 	bl	8010718 <USBD_Get_USB_Status>
 80105b8:	4603      	mov	r3, r0
 80105ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3710      	adds	r7, #16
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b086      	sub	sp, #24
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	60f8      	str	r0, [r7, #12]
 80105ce:	607a      	str	r2, [r7, #4]
 80105d0:	603b      	str	r3, [r7, #0]
 80105d2:	460b      	mov	r3, r1
 80105d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105d6:	2300      	movs	r3, #0
 80105d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105da:	2300      	movs	r3, #0
 80105dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80105e4:	7af9      	ldrb	r1, [r7, #11]
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	687a      	ldr	r2, [r7, #4]
 80105ea:	f7f3 f821 	bl	8003630 <HAL_PCD_EP_Transmit>
 80105ee:	4603      	mov	r3, r0
 80105f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105f2:	7dfb      	ldrb	r3, [r7, #23]
 80105f4:	4618      	mov	r0, r3
 80105f6:	f000 f88f 	bl	8010718 <USBD_Get_USB_Status>
 80105fa:	4603      	mov	r3, r0
 80105fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80105fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8010600:	4618      	mov	r0, r3
 8010602:	3718      	adds	r7, #24
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b086      	sub	sp, #24
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	607a      	str	r2, [r7, #4]
 8010612:	603b      	str	r3, [r7, #0]
 8010614:	460b      	mov	r3, r1
 8010616:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010618:	2300      	movs	r3, #0
 801061a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801061c:	2300      	movs	r3, #0
 801061e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010626:	7af9      	ldrb	r1, [r7, #11]
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	f7f2 ffb1 	bl	8003592 <HAL_PCD_EP_Receive>
 8010630:	4603      	mov	r3, r0
 8010632:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010634:	7dfb      	ldrb	r3, [r7, #23]
 8010636:	4618      	mov	r0, r3
 8010638:	f000 f86e 	bl	8010718 <USBD_Get_USB_Status>
 801063c:	4603      	mov	r3, r0
 801063e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010640:	7dbb      	ldrb	r3, [r7, #22]
}
 8010642:	4618      	mov	r0, r3
 8010644:	3718      	adds	r7, #24
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}

0801064a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801064a:	b580      	push	{r7, lr}
 801064c:	b082      	sub	sp, #8
 801064e:	af00      	add	r7, sp, #0
 8010650:	6078      	str	r0, [r7, #4]
 8010652:	460b      	mov	r3, r1
 8010654:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801065c:	78fa      	ldrb	r2, [r7, #3]
 801065e:	4611      	mov	r1, r2
 8010660:	4618      	mov	r0, r3
 8010662:	f7f2 ffd0 	bl	8003606 <HAL_PCD_EP_GetRxCount>
 8010666:	4603      	mov	r3, r0
}
 8010668:	4618      	mov	r0, r3
 801066a:	3708      	adds	r7, #8
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	460b      	mov	r3, r1
 801067a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801067c:	78fb      	ldrb	r3, [r7, #3]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d002      	beq.n	8010688 <HAL_PCDEx_LPM_Callback+0x18>
 8010682:	2b01      	cmp	r3, #1
 8010684:	d013      	beq.n	80106ae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010686:	e023      	b.n	80106d0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	699b      	ldr	r3, [r3, #24]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d007      	beq.n	80106a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010690:	f000 f83c 	bl	801070c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010694:	4b10      	ldr	r3, [pc, #64]	; (80106d8 <HAL_PCDEx_LPM_Callback+0x68>)
 8010696:	691b      	ldr	r3, [r3, #16]
 8010698:	4a0f      	ldr	r2, [pc, #60]	; (80106d8 <HAL_PCDEx_LPM_Callback+0x68>)
 801069a:	f023 0306 	bic.w	r3, r3, #6
 801069e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7f7 fdc4 	bl	8008234 <USBD_LL_Resume>
    break;
 80106ac:	e010      	b.n	80106d0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7f7 fda7 	bl	8008208 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	699b      	ldr	r3, [r3, #24]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d005      	beq.n	80106ce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80106c2:	4b05      	ldr	r3, [pc, #20]	; (80106d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80106c4:	691b      	ldr	r3, [r3, #16]
 80106c6:	4a04      	ldr	r2, [pc, #16]	; (80106d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80106c8:	f043 0306 	orr.w	r3, r3, #6
 80106cc:	6113      	str	r3, [r2, #16]
    break;
 80106ce:	bf00      	nop
}
 80106d0:	bf00      	nop
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	e000ed00 	.word	0xe000ed00

080106dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80106e4:	4b03      	ldr	r3, [pc, #12]	; (80106f4 <USBD_static_malloc+0x18>)
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	20004b50 	.word	0x20004b50

080106f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]

}
 8010700:	bf00      	nop
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010710:	f7f0 fe58 	bl	80013c4 <SystemClock_Config>
}
 8010714:	bf00      	nop
 8010716:	bd80      	pop	{r7, pc}

08010718 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010718:	b480      	push	{r7}
 801071a:	b085      	sub	sp, #20
 801071c:	af00      	add	r7, sp, #0
 801071e:	4603      	mov	r3, r0
 8010720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010722:	2300      	movs	r3, #0
 8010724:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010726:	79fb      	ldrb	r3, [r7, #7]
 8010728:	2b03      	cmp	r3, #3
 801072a:	d817      	bhi.n	801075c <USBD_Get_USB_Status+0x44>
 801072c:	a201      	add	r2, pc, #4	; (adr r2, 8010734 <USBD_Get_USB_Status+0x1c>)
 801072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010732:	bf00      	nop
 8010734:	08010745 	.word	0x08010745
 8010738:	0801074b 	.word	0x0801074b
 801073c:	08010751 	.word	0x08010751
 8010740:	08010757 	.word	0x08010757
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010744:	2300      	movs	r3, #0
 8010746:	73fb      	strb	r3, [r7, #15]
    break;
 8010748:	e00b      	b.n	8010762 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801074a:	2303      	movs	r3, #3
 801074c:	73fb      	strb	r3, [r7, #15]
    break;
 801074e:	e008      	b.n	8010762 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010750:	2301      	movs	r3, #1
 8010752:	73fb      	strb	r3, [r7, #15]
    break;
 8010754:	e005      	b.n	8010762 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010756:	2303      	movs	r3, #3
 8010758:	73fb      	strb	r3, [r7, #15]
    break;
 801075a:	e002      	b.n	8010762 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801075c:	2303      	movs	r3, #3
 801075e:	73fb      	strb	r3, [r7, #15]
    break;
 8010760:	bf00      	nop
  }
  return usb_status;
 8010762:	7bfb      	ldrb	r3, [r7, #15]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3714      	adds	r7, #20
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr

08010770 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8010770:	b480      	push	{r7}
 8010772:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010774:	4b05      	ldr	r3, [pc, #20]	; (801078c <UTIL_LPM_Init+0x1c>)
 8010776:	2200      	movs	r2, #0
 8010778:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801077a:	4b05      	ldr	r3, [pc, #20]	; (8010790 <UTIL_LPM_Init+0x20>)
 801077c:	2200      	movs	r2, #0
 801077e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010780:	bf00      	nop
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop
 801078c:	20004d70 	.word	0x20004d70
 8010790:	20004d74 	.word	0x20004d74

08010794 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8010794:	b480      	push	{r7}
 8010796:	b087      	sub	sp, #28
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	460b      	mov	r3, r1
 801079e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107a0:	f3ef 8310 	mrs	r3, PRIMASK
 80107a4:	613b      	str	r3, [r7, #16]
  return(result);
 80107a6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80107a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80107aa:	b672      	cpsid	i
  
  switch(state)
 80107ac:	78fb      	ldrb	r3, [r7, #3]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d009      	beq.n	80107c6 <UTIL_LPM_SetOffMode+0x32>
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d000      	beq.n	80107b8 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 80107b6:	e00e      	b.n	80107d6 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80107b8:	4b0c      	ldr	r3, [pc, #48]	; (80107ec <UTIL_LPM_SetOffMode+0x58>)
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	4313      	orrs	r3, r2
 80107c0:	4a0a      	ldr	r2, [pc, #40]	; (80107ec <UTIL_LPM_SetOffMode+0x58>)
 80107c2:	6013      	str	r3, [r2, #0]
      break;
 80107c4:	e007      	b.n	80107d6 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	43da      	mvns	r2, r3
 80107ca:	4b08      	ldr	r3, [pc, #32]	; (80107ec <UTIL_LPM_SetOffMode+0x58>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	4013      	ands	r3, r2
 80107d0:	4a06      	ldr	r2, [pc, #24]	; (80107ec <UTIL_LPM_SetOffMode+0x58>)
 80107d2:	6013      	str	r3, [r2, #0]
      break;
 80107d4:	bf00      	nop
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80107e0:	bf00      	nop
 80107e2:	371c      	adds	r7, #28
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr
 80107ec:	20004d74 	.word	0x20004d74

080107f0 <__libc_init_array>:
 80107f0:	b570      	push	{r4, r5, r6, lr}
 80107f2:	4e0d      	ldr	r6, [pc, #52]	; (8010828 <__libc_init_array+0x38>)
 80107f4:	4c0d      	ldr	r4, [pc, #52]	; (801082c <__libc_init_array+0x3c>)
 80107f6:	1ba4      	subs	r4, r4, r6
 80107f8:	10a4      	asrs	r4, r4, #2
 80107fa:	2500      	movs	r5, #0
 80107fc:	42a5      	cmp	r5, r4
 80107fe:	d109      	bne.n	8010814 <__libc_init_array+0x24>
 8010800:	4e0b      	ldr	r6, [pc, #44]	; (8010830 <__libc_init_array+0x40>)
 8010802:	4c0c      	ldr	r4, [pc, #48]	; (8010834 <__libc_init_array+0x44>)
 8010804:	f000 f82c 	bl	8010860 <_init>
 8010808:	1ba4      	subs	r4, r4, r6
 801080a:	10a4      	asrs	r4, r4, #2
 801080c:	2500      	movs	r5, #0
 801080e:	42a5      	cmp	r5, r4
 8010810:	d105      	bne.n	801081e <__libc_init_array+0x2e>
 8010812:	bd70      	pop	{r4, r5, r6, pc}
 8010814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010818:	4798      	blx	r3
 801081a:	3501      	adds	r5, #1
 801081c:	e7ee      	b.n	80107fc <__libc_init_array+0xc>
 801081e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010822:	4798      	blx	r3
 8010824:	3501      	adds	r5, #1
 8010826:	e7f2      	b.n	801080e <__libc_init_array+0x1e>
 8010828:	08010d94 	.word	0x08010d94
 801082c:	08010d94 	.word	0x08010d94
 8010830:	08010d94 	.word	0x08010d94
 8010834:	08010d98 	.word	0x08010d98

08010838 <memcpy>:
 8010838:	b510      	push	{r4, lr}
 801083a:	1e43      	subs	r3, r0, #1
 801083c:	440a      	add	r2, r1
 801083e:	4291      	cmp	r1, r2
 8010840:	d100      	bne.n	8010844 <memcpy+0xc>
 8010842:	bd10      	pop	{r4, pc}
 8010844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010848:	f803 4f01 	strb.w	r4, [r3, #1]!
 801084c:	e7f7      	b.n	801083e <memcpy+0x6>

0801084e <memset>:
 801084e:	4402      	add	r2, r0
 8010850:	4603      	mov	r3, r0
 8010852:	4293      	cmp	r3, r2
 8010854:	d100      	bne.n	8010858 <memset+0xa>
 8010856:	4770      	bx	lr
 8010858:	f803 1b01 	strb.w	r1, [r3], #1
 801085c:	e7f9      	b.n	8010852 <memset+0x4>
	...

08010860 <_init>:
 8010860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010862:	bf00      	nop
 8010864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010866:	bc08      	pop	{r3}
 8010868:	469e      	mov	lr, r3
 801086a:	4770      	bx	lr

0801086c <_fini>:
 801086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801086e:	bf00      	nop
 8010870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010872:	bc08      	pop	{r3}
 8010874:	469e      	mov	lr, r3
 8010876:	4770      	bx	lr
